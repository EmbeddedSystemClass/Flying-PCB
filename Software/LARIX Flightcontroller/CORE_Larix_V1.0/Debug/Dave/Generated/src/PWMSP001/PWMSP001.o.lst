   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"PWMSP001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWMSP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	PWMSP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	PWMSP001_Init:
  26              	.LFB120:
  27              		.file 1 "../Dave/Generated/src/PWMSP001/PWMSP001.c"
   1:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
   2:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  DAVE App Name : PWMSP001       App Version: 1.0.34               
   3:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
   6:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   7:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   8:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
   9:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*CODE_BLOCK_BEGIN[PWMSP001.c]*/
  10:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  11:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  12:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  13:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Copyright (c) 2014, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  16:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  19:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  may be used to endorse or promote products derived from this software without**
  26:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  28:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  40:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                                                               **
  44:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  45:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  46:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  47:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** PLATFORM : Infineon XMC4000/XMC1000 Series                                 **
  48:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  49:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  51:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  53:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  54:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  55:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** MODIFICATION DATE : April 28, 2014                                         **
  56:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  57:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  58:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
  59:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Author(s) Identity                                    **
  60:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ********************************************************************************
  61:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  62:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** Initials     Name                                                          **
  63:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** ---------------------------------------------------------------------------**
  64:../Dave/Generated/src/PWMSP001/PWMSP001.c **** ** KS           App Developer                                                 **
  65:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                                                                            **
  66:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
  67:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  68:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
  69:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @file  PWMSP001.c
  70:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *
  71:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This file contains implementations of all Public and Private functions
  72:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        of Single Phase PWM without dead time APP.
  73:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        This app generates the single PWM waveform without dead time. 
  74:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        Duty cycle can be changed at runtime. And PWM frequency can be changed
  75:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *        when timer is not running.
  76:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
  77:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
  78:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* Revision History															  
  79:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 21 Nov 2012   v1.0.16   coding guidelines  
  80:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 10 Dec 2012   v1.0.18   DBG002 Macros are added
  81:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 1  Feb 2013   v1.0.20   PDR register constraints are added
  82:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 26 Mar 2013   v1.0.22   DAVE3.H inclusion
  83:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 22 Apr 2013   v1.0.24   MCSW300000628 utp w.r.t open drain port configuration
  84:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         is fixed
  85:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   MCSW300000629 utp w.r.t SetCompare API is fixed by 
  86:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         fetching period value from register instead from UI 
  87:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         parameter
  88:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 						   Removed the inclusion of other header files
  89:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                                                  (PWMSP001.h,PWMSP001_Conf.c)
  90:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 30 Aug 2013   v1.0.26   Defect 32385 fix: Duty cycle updation issue when not 
  91:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         using timer concatenation in 
  92:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         PWMSP001_SetPwmFreqAndDutyCycle() API is fixed.
  93:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 17 Feb 2014   v1.0.32   1.Trap enabling is shifted from PWMSP001_Start() to
  94:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                           PWMSP001_Init()
  95:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         2.In PWMSP001_lSetDutyEdgeAlignTimerConcat()compare
  96:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          value calculation is updated.
  97:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         3.During Timer concatenation if single shot mode is 
  98:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                          enabled lower timer is made as free running.
  99:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * 28 Apr 2014   v1.0.34   Removed the DBG002_FUNCTION_ENTRY() and 
 100:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         DBG002_FUNCTION_EXIT() from all the APIs.
 101:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         In PWMSP001_SetCompare() period value checks are 
 102:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *                         removed.
 103:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 105:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 106:../Dave/Generated/src/PWMSP001/PWMSP001.c **** **                      Include Files                                         **
 107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *******************************************************************************/
 108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #include <DAVE3.h>
 109:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*****************************************************************************
 112:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
 113:../Dave/Generated/src/PWMSP001/PWMSP001.c **** *****************************************************************************/
 114:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*These definitions are included here to avoid compilation errors,
 115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  since the DBG002 app is not part of the project. All the macros are defined
 116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  as empty*/ 
 117:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #ifndef _DBG002_H_
 118:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 119:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_RegisterCallBack(A,B,C)
 120:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_I(e) 
 121:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IG(e,g) 
 122:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IH(e,h) 
 123:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IP(e,p) 
 124:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGH(e,g,h) 
 125:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGP(e,g,p) 
 126:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IHP(e,h,p) 
 127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IGHP(e,g,h,p) 
 128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_N(e) 
 129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NG(e,g) 
 130:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NH(e,h) 
 131:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NP(e,p) 
 132:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGH(e,g,h) 
 133:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGP(e,g,p) 
 134:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NHP(e,h,p) 
 135:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_NGHP(e,g,h,p) 
 136:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ID(e) 
 137:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_IS(e) 
 138:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ISG(e,g) 
 139:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 140:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 141:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 142:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 143:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_INFO(groupid,messageid,length,value)
 144:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 145:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 146:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 147:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define DBG002_MESSAGEID_LITERAL
 148:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #endif/* End of definitions of dummy Debug Log macros*/   
 149:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define APP_GID DBG002_GID_PWMSP001
 150:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 151:../Dave/Generated/src/PWMSP001/PWMSP001.c **** #define PWMSP001_STATUS_LEN 4U
 152:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Private Function declarations                              **
 154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 155:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @cond INTERNAL_DOCS
 157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 158:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @ingroup PWMSP001_privatefunc
 160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @{
 161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 162:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 163:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will initialize second slice registers (in case of timer
 165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * concatenation) with user configured value
 166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]   HandlePtr Pointer to PWMSP001_HandleType structure
 167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return void
 168:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice
 170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
 172:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 177:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 178:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 180:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 181:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 183:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 184:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 185:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 186:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 188:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 191:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 192:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 193:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 196:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 197:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 198:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 199:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Duty This is duty cycle in percentage
 202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 204:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 205:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 209:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 210:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if center aligned mode is selected.
 212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 215:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 216:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 217:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 218:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 220:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 221:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 222:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 223:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode without timer concatenation is sel
 224:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 225:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 226:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 227:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 229:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 231:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 233:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 234:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 235:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set duty cycle if edge aligned mode with timer concatenation is suppor
 236:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  Compare This is duty cycle in percentage
 238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t void
 239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 240:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 241:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 242:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 244:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 245:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 246:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function will set pwm frequency if timer concatenation is selected
 248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  PwmTime This is PWM frequency in hertz.
 250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 252:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
 253:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 255:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
 256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** );
 257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @brief This function initializes CCU4 slice as per GUI configurations.
 260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @param[in]  HandlePtr Pointer to PWMSP001_HandleType structure
 261:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @return status_t status
 262:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 263:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr);
 264:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
 266:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * @}
 267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 268:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 269:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*******************************************************************************
 270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  **                 Function definitions                                       **
 271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  *******************************************************************************/
 272:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    
 273:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes the app */
 274:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_Init(void)
 275:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
  28              		.loc 1 275 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Error = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
  43              		.loc 1 276 0
  44 0006 4FF00103 		mov	r3, #1
  45 000a 7B60     		str	r3, [r7, #4]
 277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   CCU4GLOBAL_Init();
  46              		.loc 1 277 0
  47 000c FFF7FEFF 		bl	CCU4GLOBAL_Init
 278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle0);
  48              		.loc 1 278 0
  49 0010 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  50 0014 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  51 0018 FFF7FEFF 		bl	PWMSP001_lInit
  52 001c 7860     		str	r0, [r7, #4]
 279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
  53              		.loc 1 280 0
  54 001e 7B68     		ldr	r3, [r7, #4]
  55 0020 002B     		cmp	r3, #0
  56 0022 0DD1     		bne	.L2
 281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle0.StartControl == (uint8_t)SET)
  57              		.loc 1 282 0
  58 0024 40F20003 		movw	r3, #:lower16:PWMSP001_Handle0
  59 0028 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle0
  60 002c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  61 002e 012B     		cmp	r3, #1
  62 0030 06D1     		bne	.L2
 283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle0);
  63              		.loc 1 284 0
  64 0032 40F20000 		movw	r0, #:lower16:PWMSP001_Handle0
  65 0036 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle0
  66 003a FFF7FEFF 		bl	PWMSP001_Start
  67 003e 7860     		str	r0, [r7, #4]
  68              	.L2:
 285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.3 based on User configuration */
 290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD3_Msk));
  69              		.loc 1 290 0
  70 0040 4FF40143 		mov	r3, #33024
  71 0044 C4F60203 		movt	r3, 18434
  72 0048 4FF40142 		mov	r2, #33024
  73 004c C4F60202 		movt	r2, 18434
  74 0050 126C     		ldr	r2, [r2, #64]
  75 0052 22F4E042 		bic	r2, r2, #28672
  76 0056 1A64     		str	r2, [r3, #64]
 291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD3_Pos) & \
  77              		.loc 1 291 0
  78 0058 4FF40143 		mov	r3, #33024
  79 005c C4F60203 		movt	r3, 18434
  80 0060 4FF40142 		mov	r2, #33024
  81 0064 C4F60202 		movt	r2, 18434
  82 0068 126C     		ldr	r2, [r2, #64]
  83 006a 1A64     		str	r2, [r3, #64]
 292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD3_Msk);
 293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC3_PO_Msk));
  84              		.loc 1 293 0
  85 006c 4FF40143 		mov	r3, #33024
  86 0070 C4F60203 		movt	r3, 18434
  87 0074 4FF40142 		mov	r2, #33024
  88 0078 C4F60202 		movt	r2, 18434
  89 007c 1269     		ldr	r2, [r2, #16]
  90 007e 22F08042 		bic	r2, r2, #1073741824
  91 0082 1A61     		str	r2, [r3, #16]
 294:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC3_PO_Pos) & \
  92              		.loc 1 294 0
  93 0084 4FF40143 		mov	r3, #33024
  94 0088 C4F60203 		movt	r3, 18434
  95 008c 4FF40142 		mov	r2, #33024
  96 0090 C4F60202 		movt	r2, 18434
  97 0094 1269     		ldr	r2, [r2, #16]
  98 0096 1A61     		str	r2, [r3, #16]
 295:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC3_PO_Msk);
 296:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle1);
  99              		.loc 1 296 0
 100 0098 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 101 009c C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 102 00a0 FFF7FEFF 		bl	PWMSP001_lInit
 103 00a4 7860     		str	r0, [r7, #4]
 297:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 104              		.loc 1 298 0
 105 00a6 7B68     		ldr	r3, [r7, #4]
 106 00a8 002B     		cmp	r3, #0
 107 00aa 0DD1     		bne	.L3
 299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 300:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle1.StartControl == (uint8_t)SET)
 108              		.loc 1 300 0
 109 00ac 40F20003 		movw	r3, #:lower16:PWMSP001_Handle1
 110 00b0 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle1
 111 00b4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 112 00b6 012B     		cmp	r3, #1
 113 00b8 06D1     		bne	.L3
 301:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle1);
 114              		.loc 1 302 0
 115 00ba 40F20000 		movw	r0, #:lower16:PWMSP001_Handle1
 116 00be C0F20000 		movt	r0, #:upper16:PWMSP001_Handle1
 117 00c2 FFF7FEFF 		bl	PWMSP001_Start
 118 00c6 7860     		str	r0, [r7, #4]
 119              	.L3:
 303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 304:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 305:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.0 based on User configuration */
 308:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD0_Msk));
 120              		.loc 1 308 0
 121 00c8 4FF40143 		mov	r3, #33024
 122 00cc C4F60203 		movt	r3, 18434
 123 00d0 4FF40142 		mov	r2, #33024
 124 00d4 C4F60202 		movt	r2, 18434
 125 00d8 126C     		ldr	r2, [r2, #64]
 126 00da 22F00702 		bic	r2, r2, #7
 127 00de 1A64     		str	r2, [r3, #64]
 309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD0_Pos) & \
 128              		.loc 1 309 0
 129 00e0 4FF40143 		mov	r3, #33024
 130 00e4 C4F60203 		movt	r3, 18434
 131 00e8 4FF40142 		mov	r2, #33024
 132 00ec C4F60202 		movt	r2, 18434
 133 00f0 126C     		ldr	r2, [r2, #64]
 134 00f2 1A64     		str	r2, [r3, #64]
 310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD0_Msk);
 311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC0_PO_Msk));
 135              		.loc 1 311 0
 136 00f4 4FF40143 		mov	r3, #33024
 137 00f8 C4F60203 		movt	r3, 18434
 138 00fc 4FF40142 		mov	r2, #33024
 139 0100 C4F60202 		movt	r2, 18434
 140 0104 1269     		ldr	r2, [r2, #16]
 141 0106 22F04002 		bic	r2, r2, #64
 142 010a 1A61     		str	r2, [r3, #16]
 312:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC0_PO_Pos) & \
 143              		.loc 1 312 0
 144 010c 4FF40143 		mov	r3, #33024
 145 0110 C4F60203 		movt	r3, 18434
 146 0114 4FF40142 		mov	r2, #33024
 147 0118 C4F60202 		movt	r2, 18434
 148 011c 1269     		ldr	r2, [r2, #16]
 149 011e 1A61     		str	r2, [r3, #16]
 313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC0_PO_Msk);
 314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle2);
 150              		.loc 1 314 0
 151 0120 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 152 0124 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 153 0128 FFF7FEFF 		bl	PWMSP001_lInit
 154 012c 7860     		str	r0, [r7, #4]
 315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 155              		.loc 1 316 0
 156 012e 7B68     		ldr	r3, [r7, #4]
 157 0130 002B     		cmp	r3, #0
 158 0132 0DD1     		bne	.L4
 317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle2.StartControl == (uint8_t)SET)
 159              		.loc 1 318 0
 160 0134 40F20003 		movw	r3, #:lower16:PWMSP001_Handle2
 161 0138 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle2
 162 013c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 163 013e 012B     		cmp	r3, #1
 164 0140 06D1     		bne	.L4
 319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle2);
 165              		.loc 1 320 0
 166 0142 40F20000 		movw	r0, #:lower16:PWMSP001_Handle2
 167 0146 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle2
 168 014a FFF7FEFF 		bl	PWMSP001_Start
 169 014e 7860     		str	r0, [r7, #4]
 170              	.L4:
 321:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 325:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.1 based on User configuration */
 326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD1_Msk));
 171              		.loc 1 326 0
 172 0150 4FF40143 		mov	r3, #33024
 173 0154 C4F60203 		movt	r3, 18434
 174 0158 4FF40142 		mov	r2, #33024
 175 015c C4F60202 		movt	r2, 18434
 176 0160 126C     		ldr	r2, [r2, #64]
 177 0162 22F07002 		bic	r2, r2, #112
 178 0166 1A64     		str	r2, [r3, #64]
 327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD1_Pos) & \
 179              		.loc 1 327 0
 180 0168 4FF40143 		mov	r3, #33024
 181 016c C4F60203 		movt	r3, 18434
 182 0170 4FF40142 		mov	r2, #33024
 183 0174 C4F60202 		movt	r2, 18434
 184 0178 126C     		ldr	r2, [r2, #64]
 185 017a 1A64     		str	r2, [r3, #64]
 328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD1_Msk);
 329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC1_PO_Msk));
 186              		.loc 1 329 0
 187 017c 4FF40143 		mov	r3, #33024
 188 0180 C4F60203 		movt	r3, 18434
 189 0184 4FF40142 		mov	r2, #33024
 190 0188 C4F60202 		movt	r2, 18434
 191 018c 1269     		ldr	r2, [r2, #16]
 192 018e 22F48042 		bic	r2, r2, #16384
 193 0192 1A61     		str	r2, [r3, #16]
 330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC1_PO_Pos) & \
 194              		.loc 1 330 0
 195 0194 4FF40143 		mov	r3, #33024
 196 0198 C4F60203 		movt	r3, 18434
 197 019c 4FF40142 		mov	r2, #33024
 198 01a0 C4F60202 		movt	r2, 18434
 199 01a4 1269     		ldr	r2, [r2, #16]
 200 01a6 1A61     		str	r2, [r3, #16]
 331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC1_PO_Msk);
 332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle3);
 201              		.loc 1 332 0
 202 01a8 40F20000 		movw	r0, #:lower16:PWMSP001_Handle3
 203 01ac C0F20000 		movt	r0, #:upper16:PWMSP001_Handle3
 204 01b0 FFF7FEFF 		bl	PWMSP001_lInit
 205 01b4 7860     		str	r0, [r7, #4]
 333:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 206              		.loc 1 334 0
 207 01b6 7B68     		ldr	r3, [r7, #4]
 208 01b8 002B     		cmp	r3, #0
 209 01ba 0DD1     		bne	.L5
 335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle3.StartControl == (uint8_t)SET)
 210              		.loc 1 336 0
 211 01bc 40F20003 		movw	r3, #:lower16:PWMSP001_Handle3
 212 01c0 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle3
 213 01c4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 214 01c6 012B     		cmp	r3, #1
 215 01c8 06D1     		bne	.L5
 337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 338:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle3);
 216              		.loc 1 338 0
 217 01ca 40F20000 		movw	r0, #:lower16:PWMSP001_Handle3
 218 01ce C0F20000 		movt	r0, #:upper16:PWMSP001_Handle3
 219 01d2 FFF7FEFF 		bl	PWMSP001_Start
 220 01d6 7860     		str	r0, [r7, #4]
 221              	.L5:
 339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 341:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 2.2 based on User configuration */
 344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT2->PDR0  &= (uint32_t)(~(PORT2_PDR0_PD2_Msk));
 222              		.loc 1 344 0
 223 01d8 4FF40243 		mov	r3, #33280
 224 01dc C4F60203 		movt	r3, 18434
 225 01e0 4FF40242 		mov	r2, #33280
 226 01e4 C4F60202 		movt	r2, 18434
 227 01e8 126C     		ldr	r2, [r2, #64]
 228 01ea 22F4E062 		bic	r2, r2, #1792
 229 01ee 1A64     		str	r2, [r3, #64]
 345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT2->PDR0  |= (((uint32_t)0 << (uint32_t)PORT2_PDR0_PD2_Pos) & \
 230              		.loc 1 345 0
 231 01f0 4FF40243 		mov	r3, #33280
 232 01f4 C4F60203 		movt	r3, 18434
 233 01f8 4FF40242 		mov	r2, #33280
 234 01fc C4F60202 		movt	r2, 18434
 235 0200 126C     		ldr	r2, [r2, #64]
 236 0202 1A64     		str	r2, [r3, #64]
 346:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT2_PDR0_PD2_Msk);
 347:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT2->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC2_PO_Msk));
 237              		.loc 1 347 0
 238 0204 4FF40243 		mov	r3, #33280
 239 0208 C4F60203 		movt	r3, 18434
 240 020c 4FF40242 		mov	r2, #33280
 241 0210 C4F60202 		movt	r2, 18434
 242 0214 1269     		ldr	r2, [r2, #16]
 243 0216 22F48002 		bic	r2, r2, #4194304
 244 021a 1A61     		str	r2, [r3, #16]
 348:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT2->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC2_PO_Pos) & \
 245              		.loc 1 348 0
 246 021c 4FF40243 		mov	r3, #33280
 247 0220 C4F60203 		movt	r3, 18434
 248 0224 4FF40242 		mov	r2, #33280
 249 0228 C4F60202 		movt	r2, 18434
 250 022c 1269     		ldr	r2, [r2, #16]
 251 022e 1A61     		str	r2, [r3, #16]
 349:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC2_PO_Msk);
 350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Error = PWMSP001_lInit((PWMSP001_HandleType*) &PWMSP001_Handle4);
 252              		.loc 1 350 0
 253 0230 40F20000 		movw	r0, #:lower16:PWMSP001_Handle4
 254 0234 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle4
 255 0238 FFF7FEFF 		bl	PWMSP001_lInit
 256 023c 7860     		str	r0, [r7, #4]
 351:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Start the app if "Start after initialization" is checked */
 352:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(Error == (uint32_t)DAVEApp_SUCCESS)
 257              		.loc 1 352 0
 258 023e 7B68     		ldr	r3, [r7, #4]
 259 0240 002B     		cmp	r3, #0
 260 0242 0DD1     		bne	.L6
 353:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {   
 354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (PWMSP001_Handle4.StartControl == (uint8_t)SET)
 261              		.loc 1 354 0
 262 0244 40F20003 		movw	r3, #:lower16:PWMSP001_Handle4
 263 0248 C0F20003 		movt	r3, #:upper16:PWMSP001_Handle4
 264 024c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 265 024e 012B     		cmp	r3, #1
 266 0250 06D1     		bne	.L6
 355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 356:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Error = PWMSP001_Start((PWMSP001_HandleType*) &PWMSP001_Handle4);
 267              		.loc 1 356 0
 268 0252 40F20000 		movw	r0, #:lower16:PWMSP001_Handle4
 269 0256 C0F20000 		movt	r0, #:upper16:PWMSP001_Handle4
 270 025a FFF7FEFF 		bl	PWMSP001_Start
 271 025e 7860     		str	r0, [r7, #4]
 272              	.L6:
 357:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_N(Error != DAVEApp_SUCCESS);
 358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 359:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Configuration of Direct Output Pin 1.2 based on User configuration */
 362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  &= (uint32_t)(~(PORT1_PDR0_PD2_Msk));
 273              		.loc 1 362 0
 274 0260 4FF40143 		mov	r3, #33024
 275 0264 C4F60203 		movt	r3, 18434
 276 0268 4FF40142 		mov	r2, #33024
 277 026c C4F60202 		movt	r2, 18434
 278 0270 126C     		ldr	r2, [r2, #64]
 279 0272 22F4E062 		bic	r2, r2, #1792
 280 0276 1A64     		str	r2, [r3, #64]
 363:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->PDR0  |= (((uint32_t)0 << (uint32_t)PORT1_PDR0_PD2_Pos) & \
 281              		.loc 1 363 0
 282 0278 4FF40143 		mov	r3, #33024
 283 027c C4F60203 		movt	r3, 18434
 284 0280 4FF40142 		mov	r2, #33024
 285 0284 C4F60202 		movt	r2, 18434
 286 0288 126C     		ldr	r2, [r2, #64]
 287 028a 1A64     		str	r2, [r3, #64]
 364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                (uint32_t)PORT1_PDR0_PD2_Msk);
 365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  &= (uint32_t)(~(PORT_IOCR_PC2_PO_Msk));
 288              		.loc 1 365 0
 289 028c 4FF40143 		mov	r3, #33024
 290 0290 C4F60203 		movt	r3, 18434
 291 0294 4FF40142 		mov	r2, #33024
 292 0298 C4F60202 		movt	r2, 18434
 293 029c 1269     		ldr	r2, [r2, #16]
 294 029e 22F48002 		bic	r2, r2, #4194304
 295 02a2 1A61     		str	r2, [r3, #16]
 366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PORT1->IOCR0  |= (((uint32_t)0 << (uint32_t)PORT_IOCR_PC2_PO_Pos) & \
 296              		.loc 1 366 0
 297 02a4 4FF40143 		mov	r3, #33024
 298 02a8 C4F60203 		movt	r3, 18434
 299 02ac 4FF40142 		mov	r2, #33024
 300 02b0 C4F60202 		movt	r2, 18434
 301 02b4 1269     		ldr	r2, [r2, #16]
 302 02b6 1A61     		str	r2, [r3, #16]
 367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                                    (uint32_t)PORT_IOCR_PC2_PO_Msk);
 368:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 303              		.loc 1 368 0
 304 02b8 07F10807 		add	r7, r7, #8
 305 02bc BD46     		mov	sp, r7
 306 02be 80BD     		pop	{r7, pc}
 307              		.cfi_endproc
 308              	.LFE120:
 310              		.section	.text.PWMSP001_lInit,"ax",%progbits
 311              		.align	2
 312              		.global	PWMSP001_lInit
 313              		.thumb
 314              		.thumb_func
 316              	PWMSP001_lInit:
 317              	.LFB121:
 369:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 370:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_1>>>*/
 371:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function initializes an instance of the app */
 372:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lInit(const PWMSP001_HandleType* HandlePtr)
 373:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 318              		.loc 1 373 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 16
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322 0000 90B5     		push	{r4, r7, lr}
 323              	.LCFI3:
 324              		.cfi_def_cfa_offset 12
 325              		.cfi_offset 4, -12
 326              		.cfi_offset 7, -8
 327              		.cfi_offset 14, -4
 328 0002 85B0     		sub	sp, sp, #20
 329              	.LCFI4:
 330              		.cfi_def_cfa_offset 32
 331 0004 00AF     		add	r7, sp, #0
 332              	.LCFI5:
 333              		.cfi_def_cfa_register 7
 334 0006 7860     		str	r0, [r7, #4]
 374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 335              		.loc 1 374 0
 336 0008 4FF00103 		mov	r3, #1
 337 000c FB60     		str	r3, [r7, #12]
 375:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_1>>>*/
 379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 338              		.loc 1 379 0
 339 000e 7B68     		ldr	r3, [r7, #4]
 340 0010 DB6B     		ldr	r3, [r3, #60]
 341 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 342 0014 002B     		cmp	r3, #0
 343 0016 40F06981 		bne	.L17
 344              	.L8:
 380:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 382:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 383:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 345              		.loc 1 383 0
 346 001a 7B68     		ldr	r3, [r7, #4]
 347 001c 9B69     		ldr	r3, [r3, #24]
 348 001e 4FF00702 		mov	r2, #7
 349 0022 1A61     		str	r2, [r3, #16]
 384:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_3>>>*/
 386:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* If external stop trigger is setelected */
 387:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 350              		.loc 1 387 0
 351 0024 7B68     		ldr	r3, [r7, #4]
 352 0026 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 353 0028 012B     		cmp	r3, #1
 354 002a 27D1     		bne	.L10
 388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 389:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS &= (uint32_t)~((uint32_t)CCU4_CC4_INS_EV1EM_Msk | CCU4_CC4_INS_LP
 355              		.loc 1 389 0
 356 002c 7B68     		ldr	r3, [r7, #4]
 357 002e 9A69     		ldr	r2, [r3, #24]
 358 0030 7B68     		ldr	r3, [r7, #4]
 359 0032 9B69     		ldr	r3, [r3, #24]
 360 0034 1B68     		ldr	r3, [r3, #0]
 361 0036 23F0C053 		bic	r3, r3, #402653184
 362 003a 23F44023 		bic	r3, r3, #786432
 363 003e 1360     		str	r3, [r2, #0]
 390:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_ENDS_Msk;
 364              		.loc 1 390 0
 365 0040 7B68     		ldr	r3, [r7, #4]
 366 0042 9B69     		ldr	r3, [r3, #24]
 367 0044 7A68     		ldr	r2, [r7, #4]
 368 0046 9269     		ldr	r2, [r2, #24]
 369 0048 5268     		ldr	r2, [r2, #4]
 370 004a 22F00C02 		bic	r2, r2, #12
 371 004e 5A60     		str	r2, [r3, #4]
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 372              		.loc 1 391 0
 373 0050 7B68     		ldr	r3, [r7, #4]
 374 0052 9B69     		ldr	r3, [r3, #24]
 375 0054 7A68     		ldr	r2, [r7, #4]
 376 0056 9269     		ldr	r2, [r2, #24]
 377 0058 1168     		ldr	r1, [r2, #0]
 378 005a 7A68     		ldr	r2, [r7, #4]
 379 005c 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 380 0060 4FEA8242 		lsl	r2, r2, #18
 392:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    & (uint32_t)CCU4_CC4_INS_EV1EM_Msk)| (((uint32_t)PWMSP001_LPF  << (uint32_t)CCU4_CC4_INS_LPF1M
 381              		.loc 1 392 0
 382 0064 02F44022 		and	r2, r2, #786432
 391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INS |= ((((uint32_t)HandlePtr->kStopEdge << (uint32_t)CCU4_CC4_INS_EV
 383              		.loc 1 391 0
 384 0068 0A43     		orrs	r2, r2, r1
 385 006a 1A60     		str	r2, [r3, #0]
 393:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  & (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
 394:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 395:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<
 386              		.loc 1 395 0
 387 006c 7B68     		ldr	r3, [r7, #4]
 388 006e 9B69     		ldr	r3, [r3, #24]
 389 0070 7A68     		ldr	r2, [r7, #4]
 390 0072 9269     		ldr	r2, [r2, #24]
 391 0074 5268     		ldr	r2, [r2, #4]
 392 0076 42F00802 		orr	r2, r2, #8
 393 007a 5A60     		str	r2, [r3, #4]
 394              	.L10:
 396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
 397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kExtStopTrig == SET)*/
 398:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_4>>>*/
 400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Trap configurations if trap is enabled */
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 395              		.loc 1 401 0
 396 007c 7B68     		ldr	r3, [r7, #4]
 397 007e 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 398 0080 012B     		cmp	r3, #1
 399 0082 2BD1     		bne	.L11
 402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 400              		.loc 1 402 0 discriminator 1
 401 0084 7B68     		ldr	r3, [r7, #4]
 402 0086 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->kTrapEnable == (uint8_t)SET) &&\
 403              		.loc 1 401 0 discriminator 1
 404 008a 012B     		cmp	r3, #1
 405 008c 26D0     		beq	.L11
 403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     )
 404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS &= ~((uint32_t)CCU4_CC4_INS_EV2EM_Msk | \
 406              		.loc 1 405 0
 407 008e 7B68     		ldr	r3, [r7, #4]
 408 0090 9A69     		ldr	r2, [r3, #24]
 409 0092 7B68     		ldr	r3, [r7, #4]
 410 0094 9B69     		ldr	r3, [r3, #24]
 411 0096 1B68     		ldr	r3, [r3, #0]
 412 0098 23F0C243 		bic	r3, r3, #1627389952
 413 009c 23F44013 		bic	r3, r3, #3145728
 414 00a0 1360     		str	r3, [r2, #0]
 406:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_INS_EV2LM_Msk | (uint32_t)CCU4_CC4_INS_LPF2M_Msk);
 407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC &= (uint32_t)~CCU4_CC4_CMC_TS_Msk;
 415              		.loc 1 407 0
 416 00a2 7B68     		ldr	r3, [r7, #4]
 417 00a4 9B69     		ldr	r3, [r3, #24]
 418 00a6 7A68     		ldr	r2, [r7, #4]
 419 00a8 9269     		ldr	r2, [r2, #24]
 420 00aa 5268     		ldr	r2, [r2, #4]
 421 00ac 22F40032 		bic	r2, r2, #131072
 422 00b0 5A60     		str	r2, [r3, #4]
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 423              		.loc 1 408 0
 424 00b2 7B68     		ldr	r3, [r7, #4]
 425 00b4 9B69     		ldr	r3, [r3, #24]
 426 00b6 7A68     		ldr	r2, [r7, #4]
 427 00b8 9269     		ldr	r2, [r2, #24]
 428 00ba 1168     		ldr	r1, [r2, #0]
 409:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    &(uint32_t)CCU4_CC4_INS_EV2EM_Msk) | (((uint32_t)HandlePtr->kTrapLevel  <<	\
 429              		.loc 1 409 0
 430 00bc 7A68     		ldr	r2, [r7, #4]
 431 00be 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 432 00c0 4FEA0262 		lsl	r2, r2, #24
 410:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk ) | \
 433              		.loc 1 410 0
 434 00c4 02F08072 		and	r2, r2, #16777216
 408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr -> INS |= ((((uint32_t)0 << (uint32_t)CCU4_CC4_INS_EV2EM_Pos)\
 435              		.loc 1 408 0
 436 00c8 0A43     		orrs	r2, r2, r1
 437 00ca 1A60     		str	r2, [r3, #0]
 411:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (((uint32_t)0 << (uint32_t)CCU4_CC4_INS_LPF2M_Pos)& \
 412:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_LPF2M_Msk));
 413:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->CMC |= ((uint32_t)1 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 438              		.loc 1 414 0
 439 00cc 7B68     		ldr	r3, [r7, #4]
 440 00ce 9B69     		ldr	r3, [r3, #24]
 441 00d0 7A68     		ldr	r2, [r7, #4]
 442 00d2 9269     		ldr	r2, [r2, #24]
 443 00d4 5268     		ldr	r2, [r2, #4]
 444 00d6 42F40032 		orr	r2, r2, #131072
 445 00da 5A60     		str	r2, [r3, #4]
 446              	.L11:
 415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/* End of  if (HandlePtr->kTrapEnable == (uint8_t)SET)*/
 416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC &= ~((uint32_t)CCU4_CC4_TC_TCM_Msk | \
 447              		.loc 1 417 0
 448 00dc 7B68     		ldr	r3, [r7, #4]
 449 00de 9A69     		ldr	r2, [r3, #24]
 450 00e0 7B68     		ldr	r3, [r7, #4]
 451 00e2 9B69     		ldr	r3, [r3, #24]
 452 00e4 5B69     		ldr	r3, [r3, #20]
 453 00e6 23F4CE43 		bic	r3, r3, #26368
 454 00ea 23F00903 		bic	r3, r3, #9
 455 00ee 5361     		str	r3, [r2, #20]
 418:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_CMOD_Msk | (uint32_t)CCU4_CC4_TC_STRM_Msk | \
 419:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   (uint32_t)CCU4_CC4_TC_ENDM_Msk | (uint32_t)CCU4_CC4_TC_DITHE_Msk);
 420:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 456              		.loc 1 421 0
 457 00f0 7B68     		ldr	r3, [r7, #4]
 458 00f2 9B69     		ldr	r3, [r3, #24]
 459 00f4 7A68     		ldr	r2, [r7, #4]
 460 00f6 9269     		ldr	r2, [r2, #24]
 461 00f8 5169     		ldr	r1, [r2, #20]
 462 00fa 7A68     		ldr	r2, [r7, #4]
 463 00fc 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
 422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|\
 464              		.loc 1 422 0
 465 0100 02F00100 		and	r0, r2, #1
 423:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)PWMSP001_COMPARE_MODE  << \
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 425:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (((uint32_t)HandlePtr->ExtStartConfigType  << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 466              		.loc 1 425 0
 467 0104 7A68     		ldr	r2, [r7, #4]
 468 0106 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 469 010a 4FEA8222 		lsl	r2, r2, #10
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 470              		.loc 1 426 0
 471 010e 02F48062 		and	r2, r2, #1024
 424:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 472              		.loc 1 424 0
 473 0112 1043     		orrs	r0, r0, r2
 474              		.loc 1 426 0
 475 0114 7A68     		ldr	r2, [r7, #4]
 476 0116 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 477 011a 4FEA0222 		lsl	r2, r2, #8
 427:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 				  (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 478              		.loc 1 427 0
 479 011e 02F44072 		and	r2, r2, #768
 426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			    &(uint32_t)CCU4_CC4_TC_STRM_Msk)|(((uint32_t)HandlePtr->ExtStopConfigType <<\
 480              		.loc 1 426 0
 481 0122 0243     		orrs	r2, r2, r0
 421:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= (((uint32_t)HandlePtr->CountingModeType << \
 482              		.loc 1 421 0
 483 0124 0A43     		orrs	r2, r2, r1
 484 0126 5A61     		str	r2, [r3, #20]
 428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*
 429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * If timer concatenation is enabled during single shot mode lower timer 
 430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * should be free running
 431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      */
 432:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation != (uint8_t)SET)
 485              		.loc 1 432 0
 486 0128 7B68     		ldr	r3, [r7, #4]
 487 012a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 488 012e 012B     		cmp	r3, #1
 489 0130 0ED0     		beq	.L12
 433:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 434:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TSSM_Msk, \
 490              		.loc 1 434 0
 491 0132 7B68     		ldr	r3, [r7, #4]
 492 0134 9B69     		ldr	r3, [r3, #24]
 493 0136 7A68     		ldr	r2, [r7, #4]
 494 0138 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 495 013a 4FEA4202 		lsl	r2, r2, #1
 496 013e 02F00201 		and	r1, r2, #2
 497 0142 7A68     		ldr	r2, [r7, #4]
 498 0144 9269     		ldr	r2, [r2, #24]
 499 0146 5269     		ldr	r2, [r2, #20]
 500 0148 22F00202 		bic	r2, r2, #2
 501 014c 0A43     		orrs	r2, r2, r1
 502 014e 5A61     		str	r2, [r3, #20]
 503              	.L12:
 435:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  		  (uint32_t)CCU4_CC4_TC_TSSM_Pos, HandlePtr->kTimerMode);
 436:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} 
 437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the dither mode setting*/
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 504              		.loc 1 439 0
 505 0150 7B68     		ldr	r3, [r7, #4]
 506 0152 9B69     		ldr	r3, [r3, #24]
 507 0154 7A68     		ldr	r2, [r7, #4]
 508 0156 9269     		ldr	r2, [r2, #24]
 509 0158 5169     		ldr	r1, [r2, #20]
 510 015a 7A68     		ldr	r2, [r7, #4]
 511 015c 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 512 0160 4FEA4232 		lsl	r2, r2, #13
 440:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_DITHE_Pos) & (uint32_t)CCU4_CC4_TC_DITHE_Msk ;
 513              		.loc 1 440 0
 514 0164 02F4C042 		and	r2, r2, #24576
 439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC |= ((uint32_t)HandlePtr->kDitherSetting << \
 515              		.loc 1 439 0
 516 0168 0A43     		orrs	r2, r2, r1
 517 016a 5A61     		str	r2, [r3, #20]
 441:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 442:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->DITS,(uint32_t)CCU4_CC4_DITS_DCVS_Msk,\
 518              		.loc 1 442 0
 519 016c 7B68     		ldr	r3, [r7, #4]
 520 016e 9B69     		ldr	r3, [r3, #24]
 521 0170 7A68     		ldr	r2, [r7, #4]
 522 0172 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 523 0174 02F00F01 		and	r1, r2, #15
 524 0178 7A68     		ldr	r2, [r7, #4]
 525 017a 9269     		ldr	r2, [r2, #24]
 526 017c 126A     		ldr	r2, [r2, #32]
 527 017e 22F00F02 		bic	r2, r2, #15
 528 0182 0A43     		orrs	r2, r2, r1
 529 0184 1A62     		str	r2, [r3, #32]
 443:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
 444:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Configure Trap mode as per GUI*/
 446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation != (uint8_t)SET)
 530              		.loc 1 446 0
 531 0186 7B68     		ldr	r3, [r7, #4]
 532 0188 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 533 018c 012B     		cmp	r3, #1
 534 018e 2CD0     		beq	.L13
 447:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 448:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_6>>>*/
 449:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 535              		.loc 1 449 0
 536 0190 7B68     		ldr	r3, [r7, #4]
 537 0192 9B69     		ldr	r3, [r3, #24]
 538 0194 7A68     		ldr	r2, [r7, #4]
 539 0196 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 540 0198 4FEA4252 		lsl	r2, r2, #21
 541 019c 02F40011 		and	r1, r2, #2097152
 542 01a0 7A68     		ldr	r2, [r7, #4]
 543 01a2 9269     		ldr	r2, [r2, #24]
 544 01a4 5269     		ldr	r2, [r2, #20]
 545 01a6 22F40012 		bic	r2, r2, #2097152
 546 01aa 0A43     		orrs	r2, r2, r1
 547 01ac 5A61     		str	r2, [r3, #20]
 450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
 451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 548              		.loc 1 452 0
 549 01ae 7B68     		ldr	r3, [r7, #4]
 550 01b0 9B69     		ldr	r3, [r3, #24]
 551 01b2 7A68     		ldr	r2, [r7, #4]
 552 01b4 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 553 01b6 4FEA8252 		lsl	r2, r2, #22
 554 01ba 02F48001 		and	r1, r2, #4194304
 555 01be 7A68     		ldr	r2, [r7, #4]
 556 01c0 9269     		ldr	r2, [r2, #24]
 557 01c2 5269     		ldr	r2, [r2, #20]
 558 01c4 22F48002 		bic	r2, r2, #4194304
 559 01c8 0A43     		orrs	r2, r2, r1
 560 01ca 5A61     		str	r2, [r3, #20]
 453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
 454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       
 455:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  WR_REG(HandlePtr->CC4yRegsPtr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk, \
 561              		.loc 1 455 0
 562 01cc 7B68     		ldr	r3, [r7, #4]
 563 01ce 9B69     		ldr	r3, [r3, #24]
 564 01d0 7A68     		ldr	r2, [r7, #4]
 565 01d2 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 566 01d4 4FEA4242 		lsl	r2, r2, #17
 567 01d8 02F40031 		and	r1, r2, #131072
 568 01dc 7A68     		ldr	r2, [r7, #4]
 569 01de 9269     		ldr	r2, [r2, #24]
 570 01e0 5269     		ldr	r2, [r2, #20]
 571 01e2 22F40032 		bic	r2, r2, #131072
 572 01e6 0A43     		orrs	r2, r2, r1
 573 01e8 5A61     		str	r2, [r3, #20]
 574              	.L13:
 456:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
 457:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set the prescalar divider and passive level of the o/p signal.*/
 459:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     WR_REG(HandlePtr->CC4yRegsPtr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk,\
 575              		.loc 1 459 0
 576 01ea 7B68     		ldr	r3, [r7, #4]
 577 01ec 9B69     		ldr	r3, [r3, #24]
 578 01ee 7A68     		ldr	r2, [r7, #4]
 579 01f0 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 580 01f4 02F00F01 		and	r1, r2, #15
 581 01f8 7A68     		ldr	r2, [r7, #4]
 582 01fa 9269     		ldr	r2, [r2, #24]
 583 01fc 526A     		ldr	r2, [r2, #36]
 584 01fe 22F00F02 		bic	r2, r2, #15
 585 0202 0A43     		orrs	r2, r2, r1
 586 0204 5A62     		str	r2, [r3, #36]
 460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
 461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = HandlePtr->kPassiveLevel;
 587              		.loc 1 461 0
 588 0206 7B68     		ldr	r3, [r7, #4]
 589 0208 9B69     		ldr	r3, [r3, #24]
 590 020a 7A68     		ldr	r2, [r7, #4]
 591 020c 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 592 020e 9A61     		str	r2, [r3, #24]
 462:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_1_7>>>*/
 464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting period register's value*/
 465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = (uint32_t)(HandlePtr->kPeriodVal & 0xFFFFU);
 593              		.loc 1 465 0
 594 0210 7B68     		ldr	r3, [r7, #4]
 595 0212 9A69     		ldr	r2, [r3, #24]
 596 0214 7B68     		ldr	r3, [r7, #4]
 597 0216 9B6A     		ldr	r3, [r3, #40]
 598 0218 4FEA0343 		lsl	r3, r3, #16
 599 021c 4FEA1343 		lsr	r3, r3, #16
 600 0220 5363     		str	r3, [r2, #52]
 466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Setting compare register's value*/
 467:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = (uint32_t)(HandlePtr->kCompareValue & 0xFFFFU);
 601              		.loc 1 467 0
 602 0222 7B68     		ldr	r3, [r7, #4]
 603 0224 9A69     		ldr	r2, [r3, #24]
 604 0226 7B68     		ldr	r3, [r7, #4]
 605 0228 9B68     		ldr	r3, [r3, #8]
 606 022a 4FEA0343 		lsl	r3, r3, #16
 607 022e 4FEA1343 		lsr	r3, r3, #16
 608 0232 D363     		str	r3, [r2, #60]
 468:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR |= PWMSP001_ALL_CCU4_INTR_CLEAR;
 609              		.loc 1 468 0
 610 0234 7B68     		ldr	r3, [r7, #4]
 611 0236 9A69     		ldr	r2, [r3, #24]
 612 0238 7B68     		ldr	r3, [r7, #4]
 613 023a 9B69     		ldr	r3, [r3, #24]
 614 023c D3F8B030 		ldr	r3, [r3, #176]
 615 0240 43F47063 		orr	r3, r3, #3840
 616 0244 43F00F03 		orr	r3, r3, #15
 617 0248 C2F8B030 		str	r3, [r2, #176]
 469:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Applying register's settings for the second slice if timer concatenation
 471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      * is set */
 472:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 618              		.loc 1 472 0
 619 024c 7B68     		ldr	r3, [r7, #4]
 620 024e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 621 0252 012B     		cmp	r3, #1
 622 0254 0ED1     		bne	.L14
 473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       PWMSP001_lConfigureSecondSlice(HandlePtr);
 623              		.loc 1 474 0
 624 0256 7868     		ldr	r0, [r7, #4]
 625 0258 FFF7FEFF 		bl	PWMSP001_lConfigureSecondSlice
 475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE |= HandlePtr->InterruptControl;
 626              		.loc 1 475 0
 627 025c 7B68     		ldr	r3, [r7, #4]
 628 025e DB69     		ldr	r3, [r3, #28]
 629 0260 7A68     		ldr	r2, [r7, #4]
 630 0262 D269     		ldr	r2, [r2, #28]
 631 0264 D2F8A410 		ldr	r1, [r2, #164]
 632 0268 7A68     		ldr	r2, [r7, #4]
 633 026a 126B     		ldr	r2, [r2, #48]
 634 026c 0A43     		orrs	r2, r2, r1
 635 026e C3F8A420 		str	r2, [r3, #164]
 636 0272 0AE0     		b	.L15
 637              	.L14:
 476:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     } /*End of if (HandlePtr->kTimerConcatenation == SET)*/
 478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->INTE |= HandlePtr->InterruptControl;
 638              		.loc 1 480 0
 639 0274 7B68     		ldr	r3, [r7, #4]
 640 0276 9B69     		ldr	r3, [r3, #24]
 641 0278 7A68     		ldr	r2, [r7, #4]
 642 027a 9269     		ldr	r2, [r2, #24]
 643 027c D2F8A410 		ldr	r1, [r2, #164]
 644 0280 7A68     		ldr	r2, [r7, #4]
 645 0282 126B     		ldr	r2, [r2, #48]
 646 0284 0A43     		orrs	r2, r2, r1
 647 0286 C3F8A420 		str	r2, [r3, #164]
 648              	.L15:
 481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request SW shadow transfer for period, compare, dither and prescalar level*/
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 649              		.loc 1 485 0
 650 028a 7B68     		ldr	r3, [r7, #4]
 651 028c 5B69     		ldr	r3, [r3, #20]
 652 028e 7A68     		ldr	r2, [r7, #4]
 653 0290 5269     		ldr	r2, [r2, #20]
 654 0292 1169     		ldr	r1, [r2, #16]
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 655              		.loc 1 486 0
 656 0294 7A68     		ldr	r2, [r7, #4]
 657 0296 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 658              		.loc 1 485 0
 659 029a 4FEA8202 		lsl	r2, r2, #2
 660 029e 4FF00100 		mov	r0, #1
 661 02a2 00FA02F0 		lsl	r0, r0, r2
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 662              		.loc 1 487 0
 663 02a6 7A68     		ldr	r2, [r7, #4]
 664 02a8 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 665              		.loc 1 486 0
 666 02ac 4FEA8202 		lsl	r2, r2, #2
 667              		.loc 1 487 0
 668 02b0 02F10102 		add	r2, r2, #1
 486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 <<(((uint32_t)4 * \
 669              		.loc 1 486 0
 670 02b4 4FF00104 		mov	r4, #1
 671 02b8 04FA02F2 		lsl	r2, r4, r2
 672 02bc 1043     		orrs	r0, r0, r2
 488:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice) + (uint32_t)2)));
 673              		.loc 1 488 0
 674 02be 7A68     		ldr	r2, [r7, #4]
 675 02c0 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 676 02c4 4FEA8202 		lsl	r2, r2, #2
 677 02c8 02F10202 		add	r2, r2, #2
 487:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->FirstSlice) + (uint32_t)1))| ((uint32_t)1 << \
 678              		.loc 1 487 0
 679 02cc 4FF00104 		mov	r4, #1
 680 02d0 04FA02F2 		lsl	r2, r4, r2
 681 02d4 0243     		orrs	r2, r2, r0
 485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)1 << ((uint32_t)4 * \
 682              		.loc 1 485 0
 683 02d6 0A43     		orrs	r2, r2, r1
 684 02d8 1A61     		str	r2, [r3, #16]
 489:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 685              		.loc 1 490 0
 686 02da 4FF00003 		mov	r3, #0
 687 02de FB60     		str	r3, [r7, #12]
 491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_INITIALIZED;
 688              		.loc 1 491 0
 689 02e0 7B68     		ldr	r3, [r7, #4]
 690 02e2 DB6B     		ldr	r3, [r3, #60]
 691 02e4 4FF00102 		mov	r2, #1
 692 02e8 1A70     		strb	r2, [r3, #0]
 693 02ea 00E0     		b	.L9
 694              	.L17:
 381:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 695              		.loc 1 381 0
 696 02ec 00BF     		nop
 697              	.L9:
 492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 493:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 494:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 496:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 498:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 698              		.loc 1 498 0
 699 02ee FB68     		ldr	r3, [r7, #12]
 499:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 700              		.loc 1 499 0
 701 02f0 1846     		mov	r0, r3
 702 02f2 07F11407 		add	r7, r7, #20
 703 02f6 BD46     		mov	sp, r7
 704 02f8 90BD     		pop	{r4, r7, pc}
 705              		.cfi_endproc
 706              	.LFE121:
 708 02fa 00BF     		.section	.text.PWMSP001_Deinit,"ax",%progbits
 709              		.align	2
 710              		.global	PWMSP001_Deinit
 711              		.thumb
 712              		.thumb_func
 714              	PWMSP001_Deinit:
 715              	.LFB122:
 500:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 501:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_2>>>*/
 502:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function de-initializes the app */
 503:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Deinit(const PWMSP001_HandleType* HandlePtr)
 504:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 716              		.loc 1 504 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 32
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              	.LCFI6:
 723              		.cfi_def_cfa_offset 4
 724              		.cfi_offset 7, -4
 725 0002 89B0     		sub	sp, sp, #36
 726              	.LCFI7:
 727              		.cfi_def_cfa_offset 40
 728 0004 00AF     		add	r7, sp, #0
 729              	.LCFI8:
 730              		.cfi_def_cfa_register 7
 731 0006 7860     		str	r0, [r7, #4]
 505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 732              		.loc 1 505 0
 733 0008 4FF00103 		mov	r3, #1
 734 000c FB61     		str	r3, [r7, #28]
 506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 508:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp4;
 510:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 511:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /*<<<DD_PWMSP001_API_2_1>>>*/
 512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 735              		.loc 1 512 0
 736 000e 7B68     		ldr	r3, [r7, #4]
 737 0010 DB6B     		ldr	r3, [r3, #60]
 738 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 739 0014 002B     		cmp	r3, #0
 740 0016 00F0AB80 		beq	.L19
 513:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_3>>>*/
 515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 741              		.loc 1 515 0
 742 001a 7B68     		ldr	r3, [r7, #4]
 743 001c 9B69     		ldr	r3, [r3, #24]
 744 001e 4FF00702 		mov	r2, #7
 745 0022 1A61     		str	r2, [r3, #16]
 516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 746              		.loc 1 516 0
 747 0024 7B68     		ldr	r3, [r7, #4]
 748 0026 9B69     		ldr	r3, [r3, #24]
 749 0028 40F60F72 		movw	r2, #3855
 750 002c C3F8B020 		str	r2, [r3, #176]
 517:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INTE = 0x00U;
 751              		.loc 1 517 0
 752 0030 7B68     		ldr	r3, [r7, #4]
 753 0032 9B69     		ldr	r3, [r3, #24]
 754 0034 4FF00002 		mov	r2, #0
 755 0038 C3F8A420 		str	r2, [r3, #164]
 518:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 519:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set IDLE mode for selected slice*/
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 756              		.loc 1 520 0
 757 003c 7B68     		ldr	r3, [r7, #4]
 758 003e 5B69     		ldr	r3, [r3, #20]
 759 0040 7A68     		ldr	r2, [r7, #4]
 760 0042 5269     		ldr	r2, [r2, #20]
 761 0044 9168     		ldr	r1, [r2, #8]
 521:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  +(uint32_t)HandlePtr->FirstSlice)) | ((uint32_t)1 << (uint32_t)CCU4_GIDLS_CPRB_Pos)\
 762              		.loc 1 521 0
 763 0046 7A68     		ldr	r2, [r7, #4]
 764 0048 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)1<< ((uint32_t)CCU4_GIDLS_SS0I_Pos \
 765              		.loc 1 520 0
 766 004c 4FF00100 		mov	r0, #1
 767 0050 00FA02F2 		lsl	r2, r0, r2
 768 0054 0A43     		orrs	r2, r2, r1
 769 0056 42F44072 		orr	r2, r2, #768
 770 005a 9A60     		str	r2, [r3, #8]
 522:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    |((uint32_t)1 << (uint32_t)CCU4_GIDLS_PSIC_Pos));
 523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Clear all the registers*/
 525:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->INS = 0x00U;
 771              		.loc 1 525 0
 772 005c 7B68     		ldr	r3, [r7, #4]
 773 005e 9B69     		ldr	r3, [r3, #24]
 774 0060 4FF00002 		mov	r2, #0
 775 0064 1A60     		str	r2, [r3, #0]
 526:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CMC = 0x00U;
 776              		.loc 1 526 0
 777 0066 7B68     		ldr	r3, [r7, #4]
 778 0068 9B69     		ldr	r3, [r3, #24]
 779 006a 4FF00002 		mov	r2, #0
 780 006e 5A60     		str	r2, [r3, #4]
 527:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TC = 0x00U;
 781              		.loc 1 527 0
 782 0070 7B68     		ldr	r3, [r7, #4]
 783 0072 9B69     		ldr	r3, [r3, #24]
 784 0074 4FF00002 		mov	r2, #0
 785 0078 5A61     		str	r2, [r3, #20]
 528:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSC = 0x00U;
 786              		.loc 1 528 0
 787 007a 7B68     		ldr	r3, [r7, #4]
 788 007c 9B69     		ldr	r3, [r3, #24]
 789 007e 4FF00002 		mov	r2, #0
 790 0082 5A62     		str	r2, [r3, #36]
 529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PSL = 0x00U;
 791              		.loc 1 529 0
 792 0084 7B68     		ldr	r3, [r7, #4]
 793 0086 9B69     		ldr	r3, [r3, #24]
 794 0088 4FF00002 		mov	r2, #0
 795 008c 9A61     		str	r2, [r3, #24]
 530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->DITS = 0x00U;
 796              		.loc 1 530 0
 797 008e 7B68     		ldr	r3, [r7, #4]
 798 0090 9B69     		ldr	r3, [r3, #24]
 799 0092 4FF00002 		mov	r2, #0
 800 0096 1A62     		str	r2, [r3, #32]
 531:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->CRS = 0x00U;
 801              		.loc 1 531 0
 802 0098 7B68     		ldr	r3, [r7, #4]
 803 009a 9B69     		ldr	r3, [r3, #24]
 804 009c 4FF00002 		mov	r2, #0
 805 00a0 DA63     		str	r2, [r3, #60]
 532:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = 0x00U;
 806              		.loc 1 532 0
 807 00a2 7B68     		ldr	r3, [r7, #4]
 808 00a4 9B69     		ldr	r3, [r3, #24]
 809 00a6 4FF00002 		mov	r2, #0
 810 00aa 5A63     		str	r2, [r3, #52]
 533:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_2_2>>>*/
 535:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 811              		.loc 1 535 0
 812 00ac 7B68     		ldr	r3, [r7, #4]
 813 00ae 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 814 00b2 012B     		cmp	r3, #1
 815 00b4 54D1     		bne	.L20
 536:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_2_3>>>*/
 538:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 816              		.loc 1 538 0
 817 00b6 7B68     		ldr	r3, [r7, #4]
 818 00b8 DB69     		ldr	r3, [r3, #28]
 819 00ba 4FF00702 		mov	r2, #7
 820 00be 1A61     		str	r2, [r3, #16]
 539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 821              		.loc 1 539 0
 822 00c0 7B68     		ldr	r3, [r7, #4]
 823 00c2 DB69     		ldr	r3, [r3, #28]
 824 00c4 40F60F72 		movw	r2, #3855
 825 00c8 C3F8B020 		str	r2, [r3, #176]
 540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INTE = 0x00U;
 826              		.loc 1 540 0
 827 00cc 7B68     		ldr	r3, [r7, #4]
 828 00ce DB69     		ldr	r3, [r3, #28]
 829 00d0 4FF00002 		mov	r2, #0
 830 00d4 C3F8A420 		str	r2, [r3, #164]
 541:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Set IDLE mode for selected slice*/
 543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp4 = ((uint32_t)0x01 << (uint32_t)CCU4_GIDLS_PSIC_Pos);
 831              		.loc 1 543 0
 832 00d8 4FF40073 		mov	r3, #512
 833 00dc BB61     		str	r3, [r7, #24]
 544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 = ((uint32_t)0x01 << CCU4_GIDLS_CPRB_Pos);
 834              		.loc 1 544 0
 835 00de 4FF48073 		mov	r3, #256
 836 00e2 7B61     		str	r3, [r7, #20]
 545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 837              		.loc 1 545 0
 838 00e4 7B68     		ldr	r3, [r7, #4]
 839 00e6 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 840 00ea 3B61     		str	r3, [r7, #16]
 546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = Temp3 | Temp4;
 841              		.loc 1 546 0
 842 00ec 7A69     		ldr	r2, [r7, #20]
 843 00ee BB69     		ldr	r3, [r7, #24]
 844 00f0 1343     		orrs	r3, r3, r2
 845 00f2 FB60     		str	r3, [r7, #12]
 547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | Temp1);
 846              		.loc 1 547 0
 847 00f4 7B68     		ldr	r3, [r7, #4]
 848 00f6 5B69     		ldr	r3, [r3, #20]
 849 00f8 7A68     		ldr	r2, [r7, #4]
 850 00fa 5269     		ldr	r2, [r2, #20]
 851 00fc 9168     		ldr	r1, [r2, #8]
 852 00fe 3A69     		ldr	r2, [r7, #16]
 853 0100 4FF00100 		mov	r0, #1
 854 0104 00FA02F0 		lsl	r0, r0, r2
 855 0108 FA68     		ldr	r2, [r7, #12]
 856 010a 0243     		orrs	r2, r2, r0
 857 010c 0A43     		orrs	r2, r2, r1
 858 010e 9A60     		str	r2, [r3, #8]
 548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*   Temp3 | Temp4 ); */
 549:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Clear all the registers*/
 551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->INS = 0x00U;
 859              		.loc 1 551 0
 860 0110 7B68     		ldr	r3, [r7, #4]
 861 0112 DB69     		ldr	r3, [r3, #28]
 862 0114 4FF00002 		mov	r2, #0
 863 0118 1A60     		str	r2, [r3, #0]
 552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CMC = 0x00U;
 864              		.loc 1 552 0
 865 011a 7B68     		ldr	r3, [r7, #4]
 866 011c DB69     		ldr	r3, [r3, #28]
 867 011e 4FF00002 		mov	r2, #0
 868 0122 5A60     		str	r2, [r3, #4]
 553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TC = 0x00U;
 869              		.loc 1 553 0
 870 0124 7B68     		ldr	r3, [r7, #4]
 871 0126 DB69     		ldr	r3, [r3, #28]
 872 0128 4FF00002 		mov	r2, #0
 873 012c 5A61     		str	r2, [r3, #20]
 554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSC = 0x00U;
 874              		.loc 1 554 0
 875 012e 7B68     		ldr	r3, [r7, #4]
 876 0130 DB69     		ldr	r3, [r3, #28]
 877 0132 4FF00002 		mov	r2, #0
 878 0136 5A62     		str	r2, [r3, #36]
 555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PSL = 0x00U;
 879              		.loc 1 555 0
 880 0138 7B68     		ldr	r3, [r7, #4]
 881 013a DB69     		ldr	r3, [r3, #28]
 882 013c 4FF00002 		mov	r2, #0
 883 0140 9A61     		str	r2, [r3, #24]
 556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->DITS = 0x00U;
 884              		.loc 1 556 0
 885 0142 7B68     		ldr	r3, [r7, #4]
 886 0144 DB69     		ldr	r3, [r3, #28]
 887 0146 4FF00002 		mov	r2, #0
 888 014a 1A62     		str	r2, [r3, #32]
 557:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->CRS = 0x00U;
 889              		.loc 1 557 0
 890 014c 7B68     		ldr	r3, [r7, #4]
 891 014e DB69     		ldr	r3, [r3, #28]
 892 0150 4FF00002 		mov	r2, #0
 893 0154 DA63     		str	r2, [r3, #60]
 558:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->PRS = 0x00U;
 894              		.loc 1 558 0
 895 0156 7B68     		ldr	r3, [r7, #4]
 896 0158 DB69     		ldr	r3, [r3, #28]
 897 015a 4FF00002 		mov	r2, #0
 898 015e 5A63     		str	r2, [r3, #52]
 899              	.L20:
 559:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 560:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_UNINITIALIZED;
 900              		.loc 1 561 0
 901 0160 7B68     		ldr	r3, [r7, #4]
 902 0162 DB6B     		ldr	r3, [r3, #60]
 903 0164 4FF00002 		mov	r2, #0
 904 0168 1A70     		strb	r2, [r3, #0]
 562:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 563:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 905              		.loc 1 563 0
 906 016a 4FF00003 		mov	r3, #0
 907 016e FB61     		str	r3, [r7, #28]
 908              	.L19:
 564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 565:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 566:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 567:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 568:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 569:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 909              		.loc 1 570 0
 910 0170 FB69     		ldr	r3, [r7, #28]
 571:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 911              		.loc 1 571 0
 912 0172 1846     		mov	r0, r3
 913 0174 07F12407 		add	r7, r7, #36
 914 0178 BD46     		mov	sp, r7
 915 017a 80BC     		pop	{r7}
 916 017c 7047     		bx	lr
 917              		.cfi_endproc
 918              	.LFE122:
 920 017e 00BF     		.section	.text.PWMSP001_Start,"ax",%progbits
 921              		.align	2
 922              		.global	PWMSP001_Start
 923              		.thumb
 924              		.thumb_func
 926              	PWMSP001_Start:
 927              	.LFB123:
 572:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 573:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_3>>>*/
 574:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function starts the app. 
 575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This needs to be called even if external start is configured.*/
 576:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Start(const PWMSP001_HandleType* HandlePtr)
 577:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 928              		.loc 1 577 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 16
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932              		@ link register save eliminated.
 933 0000 80B4     		push	{r7}
 934              	.LCFI9:
 935              		.cfi_def_cfa_offset 4
 936              		.cfi_offset 7, -4
 937 0002 85B0     		sub	sp, sp, #20
 938              	.LCFI10:
 939              		.cfi_def_cfa_offset 24
 940 0004 00AF     		add	r7, sp, #0
 941              	.LCFI11:
 942              		.cfi_def_cfa_register 7
 943 0006 7860     		str	r0, [r7, #4]
 578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 944              		.loc 1 578 0
 945 0008 4FF00103 		mov	r3, #1
 946 000c FB60     		str	r3, [r7, #12]
 579:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_1>>>*/
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 947              		.loc 1 583 0
 948 000e 7B68     		ldr	r3, [r7, #4]
 949 0010 DB6B     		ldr	r3, [r3, #60]
 950 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 951 0014 012B     		cmp	r3, #1
 952 0016 05D0     		beq	.L23
 584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 953              		.loc 1 584 0 discriminator 1
 954 0018 7B68     		ldr	r3, [r7, #4]
 955 001a DB6B     		ldr	r3, [r3, #60]
 956 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 957              		.loc 1 583 0 discriminator 1
 958 001e 032B     		cmp	r3, #3
 959 0020 40F0A780 		bne	.L30
 960              	.L23:
 585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 588:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 589:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 590:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->SWR = PWMSP001_ALL_CCU4_INTR_CLEAR;
 961              		.loc 1 590 0
 962 0024 7B68     		ldr	r3, [r7, #4]
 963 0026 9B69     		ldr	r3, [r3, #24]
 964 0028 40F60F72 		movw	r2, #3855
 965 002c C3F8B020 		str	r2, [r3, #176]
 591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     
 592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_3_2>>>*/
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 966              		.loc 1 593 0
 967 0030 7B68     		ldr	r3, [r7, #4]
 968 0032 5B69     		ldr	r3, [r3, #20]
 969 0034 7A68     		ldr	r2, [r7, #4]
 970 0036 5269     		ldr	r2, [r2, #20]
 971 0038 D168     		ldr	r1, [r2, #12]
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 595:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->FirstSlice)) );
 972              		.loc 1 595 0
 973 003a 7A68     		ldr	r2, [r7, #4]
 974 003c 92F83720 		ldrb	r2, [r2, #55]	@ zero_extendqisi2
 594:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		(((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 975              		.loc 1 594 0
 976 0040 4FF00100 		mov	r0, #1
 977 0044 00FA02F2 		lsl	r2, r0, r2
 593:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	HandlePtr->CC4yKernRegsPtr->GIDLC |=
 978              		.loc 1 593 0
 979 0048 0A43     		orrs	r2, r2, r1
 980 004a DA60     		str	r2, [r3, #12]
 596:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 981              		.loc 1 596 0
 982 004c 7B68     		ldr	r3, [r7, #4]
 983 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 984 0052 012B     		cmp	r3, #1
 985 0054 0DD1     		bne	.L25
 597:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	{
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 986              		.loc 1 598 0
 987 0056 7B68     		ldr	r3, [r7, #4]
 988 0058 5B69     		ldr	r3, [r3, #20]
 989 005a 7A68     		ldr	r2, [r7, #4]
 990 005c 5269     		ldr	r2, [r2, #20]
 991 005e D168     		ldr	r1, [r2, #12]
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 600:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			(uint32_t)HandlePtr->SecondSlice));
 992              		.loc 1 600 0
 993 0060 7A68     		ldr	r2, [r7, #4]
 994 0062 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 599:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  ((uint32_t)1 << ((uint32_t)CCU4_GIDLC_CS0I_Pos + \
 995              		.loc 1 599 0
 996 0066 4FF00100 		mov	r0, #1
 997 006a 00FA02F2 		lsl	r2, r0, r2
 598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  HandlePtr->CC4yKernRegsPtr->GIDLC |=
 998              		.loc 1 598 0
 999 006e 0A43     		orrs	r2, r2, r1
 1000 0070 DA60     		str	r2, [r3, #12]
 1001              	.L25:
 601:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	} /*End if (HandlePtr->kTimerConcatenation == SET)*/
 602:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	
 603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Set run bit of slices if external start is not configured*/
 604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kExtStartTrig == (uint8_t)RESET)
 1002              		.loc 1 604 0
 1003 0072 7B68     		ldr	r3, [r7, #4]
 1004 0074 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1005 0076 002B     		cmp	r3, #0
 1006 0078 15D1     		bne	.L26
 605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCSET |= (uint32_t)1;
 1007              		.loc 1 606 0
 1008 007a 7B68     		ldr	r3, [r7, #4]
 1009 007c 9B69     		ldr	r3, [r3, #24]
 1010 007e 7A68     		ldr	r2, [r7, #4]
 1011 0080 9269     		ldr	r2, [r2, #24]
 1012 0082 D268     		ldr	r2, [r2, #12]
 1013 0084 42F00102 		orr	r2, r2, #1
 1014 0088 DA60     		str	r2, [r3, #12]
 607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1015              		.loc 1 607 0
 1016 008a 7B68     		ldr	r3, [r7, #4]
 1017 008c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1018 0090 012B     		cmp	r3, #1
 1019 0092 65D1     		bne	.L27
 608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCSET |= (uint32_t)1;
 1020              		.loc 1 609 0
 1021 0094 7B68     		ldr	r3, [r7, #4]
 1022 0096 DB69     		ldr	r3, [r3, #28]
 1023 0098 7A68     		ldr	r2, [r7, #4]
 1024 009a D269     		ldr	r2, [r2, #28]
 1025 009c D268     		ldr	r2, [r2, #12]
 1026 009e 42F00102 		orr	r2, r2, #1
 1027 00a2 DA60     		str	r2, [r3, #12]
 1028 00a4 5CE0     		b	.L27
 1029              	.L26:
 610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }/*End of  if (HandlePtr->kExtStartTrig == (uint8_t)RESET)*/
 612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_API_1_2>>>*/
 615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kExtStartTrig == (uint8_t)SET)
 1030              		.loc 1 615 0
 1031 00a6 7B68     		ldr	r3, [r7, #4]
 1032 00a8 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1033 00aa 012B     		cmp	r3, #1
 1034 00ac 27D1     		bne	.L28
 616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS &= ~((uint32_t)CCU4_CC4_INS_EV0EM_Msk | \
 1035              		.loc 1 617 0
 1036 00ae 7B68     		ldr	r3, [r7, #4]
 1037 00b0 9A69     		ldr	r2, [r3, #24]
 1038 00b2 7B68     		ldr	r3, [r7, #4]
 1039 00b4 9B69     		ldr	r3, [r3, #24]
 1040 00b6 1B68     		ldr	r3, [r3, #0]
 1041 00b8 23F0C063 		bic	r3, r3, #100663296
 1042 00bc 23F44033 		bic	r3, r3, #196608
 1043 00c0 1360     		str	r3, [r2, #0]
 618:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF0M_Msk);
 619:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC &= ~(uint32_t)CCU4_CC4_CMC_STRTS_Msk;
 1044              		.loc 1 619 0
 1045 00c2 7B68     		ldr	r3, [r7, #4]
 1046 00c4 9B69     		ldr	r3, [r3, #24]
 1047 00c6 7A68     		ldr	r2, [r7, #4]
 1048 00c8 9269     		ldr	r2, [r2, #24]
 1049 00ca 5268     		ldr	r2, [r2, #4]
 1050 00cc 22F00302 		bic	r2, r2, #3
 1051 00d0 5A60     		str	r2, [r3, #4]
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 1052              		.loc 1 620 0
 1053 00d2 7B68     		ldr	r3, [r7, #4]
 1054 00d4 9B69     		ldr	r3, [r3, #24]
 1055 00d6 7A68     		ldr	r2, [r7, #4]
 1056 00d8 9269     		ldr	r2, [r2, #24]
 1057 00da 1168     		ldr	r1, [r2, #0]
 621:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 1058              		.loc 1 621 0
 1059 00dc 7A68     		ldr	r2, [r7, #4]
 1060 00de 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 1061 00e2 4FEA0242 		lsl	r2, r2, #16
 622:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF   << \
 1062              		.loc 1 622 0
 1063 00e6 02F44032 		and	r2, r2, #196608
 620:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->INS |=
 1064              		.loc 1 620 0
 1065 00ea 0A43     		orrs	r2, r2, r1
 1066 00ec 1A60     		str	r2, [r3, #0]
 623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->CMC |= (((uint32_t)PWMSP001_EVENT_0  <<
 1067              		.loc 1 624 0
 1068 00ee 7B68     		ldr	r3, [r7, #4]
 1069 00f0 9B69     		ldr	r3, [r3, #24]
 1070 00f2 7A68     		ldr	r2, [r7, #4]
 1071 00f4 9269     		ldr	r2, [r2, #24]
 1072 00f6 5268     		ldr	r2, [r2, #4]
 1073 00f8 42F00102 		orr	r2, r2, #1
 1074 00fc 5A60     		str	r2, [r3, #4]
 1075              	.L28:
 625:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (uint32_t)CCU4_CC4_CMC_STRTS_Pos)& (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 626:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == (uint8_t)SET)*/
 627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*<<<DD_PWMSP001_nonAPI_1_2>>>*/
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 1076              		.loc 1 628 0
 1077 00fe 7B68     		ldr	r3, [r7, #4]
 1078 0100 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1079 0102 012B     		cmp	r3, #1
 1080 0104 2CD1     		bne	.L27
 629:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1081              		.loc 1 629 0 discriminator 1
 1082 0106 7B68     		ldr	r3, [r7, #4]
 1083 0108 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((HandlePtr->kExtStartTrig == (uint8_t)SET) &&\
 1084              		.loc 1 628 0 discriminator 1
 1085 010c 012B     		cmp	r3, #1
 1086 010e 27D1     		bne	.L27
 630:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       )
 631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 632:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS &= (uint32_t)~(CCU4_CC4_INS_EV0EM_Msk | CCU4_CC4_INS_LPF0M_Msk
 1087              		.loc 1 632 0
 1088 0110 7B68     		ldr	r3, [r7, #4]
 1089 0112 DA69     		ldr	r2, [r3, #28]
 1090 0114 7B68     		ldr	r3, [r7, #4]
 1091 0116 DB69     		ldr	r3, [r3, #28]
 1092 0118 1B68     		ldr	r3, [r3, #0]
 1093 011a 23F0C063 		bic	r3, r3, #100663296
 1094 011e 23F44033 		bic	r3, r3, #196608
 1095 0122 1360     		str	r3, [r2, #0]
 633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_STRTS_Msk);
 1096              		.loc 1 633 0
 1097 0124 7B68     		ldr	r3, [r7, #4]
 1098 0126 DB69     		ldr	r3, [r3, #28]
 1099 0128 7A68     		ldr	r2, [r7, #4]
 1100 012a D269     		ldr	r2, [r2, #28]
 1101 012c 5268     		ldr	r2, [r2, #4]
 1102 012e 22F00302 		bic	r2, r2, #3
 1103 0132 5A60     		str	r2, [r3, #4]
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1104              		.loc 1 634 0
 1105 0134 7B68     		ldr	r3, [r7, #4]
 1106 0136 DB69     		ldr	r3, [r3, #28]
 1107 0138 7A68     		ldr	r2, [r7, #4]
 1108 013a D269     		ldr	r2, [r2, #28]
 1109 013c 1168     		ldr	r1, [r2, #0]
 635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kStartEdge  << (uint32_t)CCU4_CC4_INS_EV0EM_Pos)& \
 1110              		.loc 1 635 0
 1111 013e 7A68     		ldr	r2, [r7, #4]
 1112 0140 92F82320 		ldrb	r2, [r2, #35]	@ zero_extendqisi2
 1113 0144 4FEA0242 		lsl	r2, r2, #16
 636:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  (uint32_t)CCU4_CC4_INS_EV0EM_Msk) | (((uint32_t)PWMSP001_LPF  <<
 1114              		.loc 1 636 0
 1115 0148 02F44032 		and	r2, r2, #196608
 634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->INS |=
 1116              		.loc 1 634 0
 1117 014c 0A43     		orrs	r2, r2, r1
 1118 014e 1A60     		str	r2, [r3, #0]
 637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     (uint32_t)CCU4_CC4_INS_LPF0M_Pos)& (uint32_t)CCU4_CC4_INS_LPF0M_Msk));
 638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_0  << \
 1119              		.loc 1 638 0
 1120 0150 7B68     		ldr	r3, [r7, #4]
 1121 0152 DB69     		ldr	r3, [r3, #28]
 1122 0154 7A68     		ldr	r2, [r7, #4]
 1123 0156 D269     		ldr	r2, [r2, #28]
 1124 0158 5268     		ldr	r2, [r2, #4]
 1125 015a 42F00102 		orr	r2, r2, #1
 1126 015e 5A60     		str	r2, [r3, #4]
 1127              	.L27:
 639:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_CMC_STRTS_Pos) & (uint32_t)CCU4_CC4_CMC_STRTS_Msk);
 640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of if (HandlePtr->kExtStartTrig == SET)*/
 641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 642:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->DynamicDataType->StateType = PWMSP001_RUNNING;
 1128              		.loc 1 643 0
 1129 0160 7B68     		ldr	r3, [r7, #4]
 1130 0162 DB6B     		ldr	r3, [r3, #60]
 1131 0164 4FF00202 		mov	r2, #2
 1132 0168 1A70     		strb	r2, [r3, #0]
 644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1133              		.loc 1 644 0
 1134 016a 4FF00003 		mov	r3, #0
 1135 016e FB60     		str	r3, [r7, #12]
 1136 0170 00E0     		b	.L24
 1137              	.L30:
 587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1138              		.loc 1 587 0
 1139 0172 00BF     		nop
 1140              	.L24:
 645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 646:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1141              		.loc 1 646 0
 1142 0174 FB68     		ldr	r3, [r7, #12]
 647:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1143              		.loc 1 647 0
 1144 0176 1846     		mov	r0, r3
 1145 0178 07F11407 		add	r7, r7, #20
 1146 017c BD46     		mov	sp, r7
 1147 017e 80BC     		pop	{r7}
 1148 0180 7047     		bx	lr
 1149              		.cfi_endproc
 1150              	.LFE123:
 1152 0182 00BF     		.section	.text.PWMSP001_Stop,"ax",%progbits
 1153              		.align	2
 1154              		.global	PWMSP001_Stop
 1155              		.thumb
 1156              		.thumb_func
 1158              	PWMSP001_Stop:
 1159              	.LFB124:
 648:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 649:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_4>>>*/
 650:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function stops the app */
 651:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_Stop(const PWMSP001_HandleType* HandlePtr)
 652:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1160              		.loc 1 652 0
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 24
 1163              		@ frame_needed = 1, uses_anonymous_args = 0
 1164              		@ link register save eliminated.
 1165 0000 80B4     		push	{r7}
 1166              	.LCFI12:
 1167              		.cfi_def_cfa_offset 4
 1168              		.cfi_offset 7, -4
 1169 0002 87B0     		sub	sp, sp, #28
 1170              	.LCFI13:
 1171              		.cfi_def_cfa_offset 32
 1172 0004 00AF     		add	r7, sp, #0
 1173              	.LCFI14:
 1174              		.cfi_def_cfa_register 7
 1175 0006 7860     		str	r0, [r7, #4]
 653:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1176              		.loc 1 653 0
 1177 0008 4FF00103 		mov	r3, #1
 1178 000c 7B61     		str	r3, [r7, #20]
 654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 656:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 657:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   do
 658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 659:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_4_1>>>*/
 660:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->DynamicDataType->StateType != PWMSP001_RUNNING)
 1179              		.loc 1 660 0
 1180 000e 7B68     		ldr	r3, [r7, #4]
 1181 0010 DB6B     		ldr	r3, [r3, #60]
 1182 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1183 0014 022B     		cmp	r3, #2
 1184 0016 41D1     		bne	.L36
 1185              	.L32:
 661:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 664:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->FirstSlice);
 1186              		.loc 1 666 0
 1187 0018 7B68     		ldr	r3, [r7, #4]
 1188 001a 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1189 001e 3B61     		str	r3, [r7, #16]
 667:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1190              		.loc 1 667 0
 1191 0020 4FF40073 		mov	r3, #512
 1192 0024 FB60     		str	r3, [r7, #12]
 668:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegsPtr->TCCLR = PWMSP001_SLICE_CLEAR;
 1193              		.loc 1 668 0
 1194 0026 7B68     		ldr	r3, [r7, #4]
 1195 0028 9B69     		ldr	r3, [r3, #24]
 1196 002a 4FF00702 		mov	r2, #7
 1197 002e 1A61     		str	r2, [r3, #16]
 669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1 ) | Temp2 );
 1198              		.loc 1 669 0
 1199 0030 7B68     		ldr	r3, [r7, #4]
 1200 0032 5B69     		ldr	r3, [r3, #20]
 1201 0034 7A68     		ldr	r2, [r7, #4]
 1202 0036 5269     		ldr	r2, [r2, #20]
 1203 0038 9168     		ldr	r1, [r2, #8]
 1204 003a 3A69     		ldr	r2, [r7, #16]
 1205 003c 4FF00100 		mov	r0, #1
 1206 0040 00FA02F0 		lsl	r0, r0, r2
 1207 0044 FA68     		ldr	r2, [r7, #12]
 1208 0046 0243     		orrs	r2, r2, r0
 1209 0048 0A43     		orrs	r2, r2, r1
 1210 004a 9A60     		str	r2, [r3, #8]
 670:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1211              		.loc 1 671 0
 1212 004c 7B68     		ldr	r3, [r7, #4]
 1213 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1214 0052 012B     		cmp	r3, #1
 1215 0054 19D1     		bne	.L34
 672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 1216              		.loc 1 673 0
 1217 0056 7B68     		ldr	r3, [r7, #4]
 1218 0058 DB69     		ldr	r3, [r3, #28]
 1219 005a 4FF00702 		mov	r2, #7
 1220 005e 1A61     		str	r2, [r3, #16]
 674:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = ((uint32_t)CCU4_GIDLS_SS0I_Pos + (uint32_t)HandlePtr->SecondSlice);
 1221              		.loc 1 674 0
 1222 0060 7B68     		ldr	r3, [r7, #4]
 1223 0062 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1224 0066 3B61     		str	r3, [r7, #16]
 675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = ((uint32_t)0x01 << CCU4_GIDLS_PSIC_Pos);
 1225              		.loc 1 675 0
 1226 0068 4FF40073 		mov	r3, #512
 1227 006c FB60     		str	r3, [r7, #12]
 676:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GIDLS |= (((uint32_t)0x01 << Temp1) | Temp2 );
 1228              		.loc 1 676 0
 1229 006e 7B68     		ldr	r3, [r7, #4]
 1230 0070 5B69     		ldr	r3, [r3, #20]
 1231 0072 7A68     		ldr	r2, [r7, #4]
 1232 0074 5269     		ldr	r2, [r2, #20]
 1233 0076 9168     		ldr	r1, [r2, #8]
 1234 0078 3A69     		ldr	r2, [r7, #16]
 1235 007a 4FF00100 		mov	r0, #1
 1236 007e 00FA02F0 		lsl	r0, r0, r2
 1237 0082 FA68     		ldr	r2, [r7, #12]
 1238 0084 0243     		orrs	r2, r2, r0
 1239 0086 0A43     		orrs	r2, r2, r1
 1240 0088 9A60     		str	r2, [r3, #8]
 1241              	.L34:
 677:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }/*End of  if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
 678:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 679:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->DynamicDataType->StateType = PWMSP001_STOPPED;
 1242              		.loc 1 679 0
 1243 008a 7B68     		ldr	r3, [r7, #4]
 1244 008c DB6B     		ldr	r3, [r3, #60]
 1245 008e 4FF00302 		mov	r2, #3
 1246 0092 1A70     		strb	r2, [r3, #0]
 680:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1247              		.loc 1 680 0
 1248 0094 4FF00003 		mov	r3, #0
 1249 0098 7B61     		str	r3, [r7, #20]
 1250 009a 00E0     		b	.L33
 1251              	.L36:
 662:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       break;
 1252              		.loc 1 662 0
 1253 009c 00BF     		nop
 1254              	.L33:
 681:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 682:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   } while (0);
 683:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 684:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (Status != (uint32_t)DAVEApp_SUCCESS)
 685:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 686:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
 687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 688:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1255              		.loc 1 688 0
 1256 009e 7B69     		ldr	r3, [r7, #20]
 689:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1257              		.loc 1 689 0
 1258 00a0 1846     		mov	r0, r3
 1259 00a2 07F11C07 		add	r7, r7, #28
 1260 00a6 BD46     		mov	sp, r7
 1261 00a8 80BC     		pop	{r7}
 1262 00aa 7047     		bx	lr
 1263              		.cfi_endproc
 1264              	.LFE124:
 1266              		.section	.text.PWMSP001_SetCompare,"ax",%progbits
 1267              		.align	2
 1268              		.global	PWMSP001_SetCompare
 1269              		.thumb
 1270              		.thumb_func
 1272              	PWMSP001_SetCompare:
 1273              	.LFB125:
 690:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 691:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_5>>>*/
 692:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /* This function changes the duty cycle of the PWM by changing the compare register value. */
 693:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetCompare
 694:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 695:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 697:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 698:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1274              		.loc 1 698 0
 1275              		.cfi_startproc
 1276              		@ args = 0, pretend = 0, frame = 16
 1277              		@ frame_needed = 1, uses_anonymous_args = 0
 1278 0000 80B5     		push	{r7, lr}
 1279              	.LCFI15:
 1280              		.cfi_def_cfa_offset 8
 1281              		.cfi_offset 7, -8
 1282              		.cfi_offset 14, -4
 1283 0002 84B0     		sub	sp, sp, #16
 1284              	.LCFI16:
 1285              		.cfi_def_cfa_offset 24
 1286 0004 00AF     		add	r7, sp, #0
 1287              	.LCFI17:
 1288              		.cfi_def_cfa_register 7
 1289 0006 7860     		str	r0, [r7, #4]
 1290 0008 3960     		str	r1, [r7, #0]
 699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1291              		.loc 1 699 0
 1292 000a 4FF00103 		mov	r3, #1
 1293 000e FB60     		str	r3, [r7, #12]
 700:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t period;
 701:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 702:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 1294              		.loc 1 702 0
 1295 0010 7B68     		ldr	r3, [r7, #4]
 1296 0012 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1297 0016 012B     		cmp	r3, #1
 1298 0018 0AD1     		bne	.L38
 703:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)(((uint32_t)HandlePtr->CC4yRegs1Ptr->PRS<<16U)|(uint32_t)HandlePtr->CC4yRegsPtr
 1299              		.loc 1 703 0
 1300 001a 7B68     		ldr	r3, [r7, #4]
 1301 001c DB69     		ldr	r3, [r3, #28]
 1302 001e 5B6B     		ldr	r3, [r3, #52]
 1303 0020 4FEA0342 		lsl	r2, r3, #16
 1304 0024 7B68     		ldr	r3, [r7, #4]
 1305 0026 9B69     		ldr	r3, [r3, #24]
 1306 0028 5B6B     		ldr	r3, [r3, #52]
 1307 002a 1343     		orrs	r3, r3, r2
 1308 002c BB60     		str	r3, [r7, #8]
 1309 002e 03E0     		b	.L39
 1310              	.L38:
 704:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 705:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  period=(uint32_t)HandlePtr->CC4yRegsPtr->PRS;
 1311              		.loc 1 705 0
 1312 0030 7B68     		ldr	r3, [r7, #4]
 1313 0032 9B69     		ldr	r3, [r3, #24]
 1314 0034 5B6B     		ldr	r3, [r3, #52]
 1315 0036 BB60     		str	r3, [r7, #8]
 1316              	.L39:
 706:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 707:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_1>>>*/
 708:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1317              		.loc 1 708 0
 1318 0038 7B68     		ldr	r3, [r7, #4]
 1319 003a DB6B     		ldr	r3, [r3, #60]
 1320 003c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1321 003e 002B     		cmp	r3, #0
 1322 0040 1DD0     		beq	.L40
 709:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1323              		.loc 1 710 0
 1324 0042 7B68     		ldr	r3, [r7, #4]
 1325 0044 DA6A     		ldr	r2, [r3, #44]
 1326 0046 3B68     		ldr	r3, [r7, #0]
 1327 0048 9A42     		cmp	r2, r3
 1328 004a 08D2     		bcs	.L41
 711:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         (HandlePtr->kTimerConcatenation == (uint8_t)RESET))
 1329              		.loc 1 711 0 discriminator 1
 1330 004c 7B68     		ldr	r3, [r7, #4]
 1331 004e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 710:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if ((Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 1332              		.loc 1 710 0 discriminator 1
 1333 0052 002B     		cmp	r3, #0
 1334 0054 03D1     		bne	.L41
 712:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 713:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1335              		.loc 1 713 0
 1336 0056 4FF00203 		mov	r3, #2
 1337 005a FB60     		str	r3, [r7, #12]
 1338 005c 0FE0     		b	.L40
 1339              	.L41:
 714:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 715:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 716:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 717:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*if compare value is greater or equal to the period value, output should be with 0% dutycycl
 718:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  Since setting exact period value will create the spikes,we are adding 1 and setting to the regis
 719:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  if (Compare >= (uint32_t)period)
 1340              		.loc 1 719 0
 1341 005e 3A68     		ldr	r2, [r7, #0]
 1342 0060 BB68     		ldr	r3, [r7, #8]
 1343 0062 9A42     		cmp	r2, r3
 1344 0064 03D3     		bcc	.L42
 720:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
 721:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  Compare = (uint32_t)period + 1U;
 1345              		.loc 1 721 0
 1346 0066 BB68     		ldr	r3, [r7, #8]
 1347 0068 03F10103 		add	r3, r3, #1
 1348 006c 3B60     		str	r3, [r7, #0]
 1349              	.L42:
 722:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
 723:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* Call function as per the configured mode */
 724:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 1350              		.loc 1 724 0
 1351 006e 7B68     		ldr	r3, [r7, #4]
 1352 0070 1B6C     		ldr	r3, [r3, #64]
 1353 0072 7868     		ldr	r0, [r7, #4]
 1354 0074 3968     		ldr	r1, [r7, #0]
 1355 0076 9847     		blx	r3
 725:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1356              		.loc 1 725 0
 1357 0078 4FF00003 		mov	r3, #0
 1358 007c FB60     		str	r3, [r7, #12]
 1359              	.L40:
 726:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 727:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 728:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 1360              		.loc 1 728 0
 1361 007e FB68     		ldr	r3, [r7, #12]
 729:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1362              		.loc 1 729 0
 1363 0080 1846     		mov	r0, r3
 1364 0082 07F11007 		add	r7, r7, #16
 1365 0086 BD46     		mov	sp, r7
 1366 0088 80BD     		pop	{r7, pc}
 1367              		.cfi_endproc
 1368              	.LFE125:
 1370 008a 00BF     		.section	.text.PWMSP001_lSetCompareEdgeAlign,"ax",%progbits
 1371              		.align	2
 1372              		.global	PWMSP001_lSetCompareEdgeAlign
 1373              		.thumb
 1374              		.thumb_func
 1376              	PWMSP001_lSetCompareEdgeAlign:
 1377              	.LFB126:
 730:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 731:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 732:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 733:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode.
 734:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 735:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlign
 736:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 737:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 738:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 739:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 740:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1378              		.loc 1 740 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 24
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 1383 0000 80B4     		push	{r7}
 1384              	.LCFI18:
 1385              		.cfi_def_cfa_offset 4
 1386              		.cfi_offset 7, -4
 1387 0002 87B0     		sub	sp, sp, #28
 1388              	.LCFI19:
 1389              		.cfi_def_cfa_offset 32
 1390 0004 00AF     		add	r7, sp, #0
 1391              	.LCFI20:
 1392              		.cfi_def_cfa_register 7
 1393 0006 7860     		str	r0, [r7, #4]
 1394 0008 3960     		str	r1, [r7, #0]
 741:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 742:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 743:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1395              		.loc 1 743 0
 1396 000a 7B68     		ldr	r3, [r7, #4]
 1397 000c 7B61     		str	r3, [r7, #20]
 744:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1398              		.loc 1 744 0
 1399 000e 7B69     		ldr	r3, [r7, #20]
 1400 0010 9A69     		ldr	r2, [r3, #24]
 1401 0012 3B68     		ldr	r3, [r7, #0]
 1402 0014 4FEA0343 		lsl	r3, r3, #16
 1403 0018 4FEA1343 		lsr	r3, r3, #16
 1404 001c D363     		str	r3, [r2, #60]
 745:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 746:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 747:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = (4U*(uint32_t)HandlePtr->FirstSlice);
 1405              		.loc 1 747 0
 1406 001e 7B69     		ldr	r3, [r7, #20]
 1407 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1408 0024 4FEA8303 		lsl	r3, r3, #2
 1409 0028 3B61     		str	r3, [r7, #16]
 748:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + Temp2;
 1410              		.loc 1 748 0
 1411 002a 3B69     		ldr	r3, [r7, #16]
 1412 002c FB60     		str	r3, [r7, #12]
 749:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1413              		.loc 1 749 0
 1414 002e 7B69     		ldr	r3, [r7, #20]
 1415 0030 5B69     		ldr	r3, [r3, #20]
 1416 0032 7A69     		ldr	r2, [r7, #20]
 1417 0034 5269     		ldr	r2, [r2, #20]
 1418 0036 1169     		ldr	r1, [r2, #16]
 1419 0038 FA68     		ldr	r2, [r7, #12]
 1420 003a 4FF00100 		mov	r0, #1
 1421 003e 00FA02F2 		lsl	r2, r0, r2
 1422 0042 0A43     		orrs	r2, r2, r1
 1423 0044 1A61     		str	r2, [r3, #16]
 750:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1424              		.loc 1 750 0
 1425 0046 07F11C07 		add	r7, r7, #28
 1426 004a BD46     		mov	sp, r7
 1427 004c 80BC     		pop	{r7}
 1428 004e 7047     		bx	lr
 1429              		.cfi_endproc
 1430              	.LFE126:
 1432              		.section	.text.PWMSP001_lSetCompareEdgeAlignTimerConcat,"ax",%progbits
 1433              		.align	2
 1434              		.global	PWMSP001_lSetCompareEdgeAlignTimerConcat
 1435              		.thumb
 1436              		.thumb_func
 1438              	PWMSP001_lSetCompareEdgeAlignTimerConcat:
 1439              	.LFB127:
 751:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 752:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 753:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 754:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode.
 755:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 756:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareEdgeAlignTimerConcat
 757:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 758:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 759:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 760:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 761:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1440              		.loc 1 761 0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 32
 1443              		@ frame_needed = 1, uses_anonymous_args = 0
 1444              		@ link register save eliminated.
 1445 0000 90B4     		push	{r4, r7}
 1446              	.LCFI21:
 1447              		.cfi_def_cfa_offset 8
 1448              		.cfi_offset 4, -8
 1449              		.cfi_offset 7, -4
 1450 0002 88B0     		sub	sp, sp, #32
 1451              	.LCFI22:
 1452              		.cfi_def_cfa_offset 40
 1453 0004 00AF     		add	r7, sp, #0
 1454              	.LCFI23:
 1455              		.cfi_def_cfa_register 7
 1456 0006 7860     		str	r0, [r7, #4]
 1457 0008 3960     		str	r1, [r7, #0]
 762:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = 0x00U;
 1458              		.loc 1 762 0
 1459 000a 4FF00003 		mov	r3, #0
 1460 000e FB61     		str	r3, [r7, #28]
 763:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = 0x00U;
 1461              		.loc 1 763 0
 1462 0010 4FF00003 		mov	r3, #0
 1463 0014 BB61     		str	r3, [r7, #24]
 764:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 765:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 766:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1464              		.loc 1 766 0
 1465 0016 7B68     		ldr	r3, [r7, #4]
 1466 0018 7B61     		str	r3, [r7, #20]
 767:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /**
 768:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * In case of timer concatenation, compare register value is divided by
 769:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * period register value of the first slice. Remainder is written in
 770:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * compare register of first slice and quotient is written in compare
 771:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * register of second slice.
 772:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * This is done to achieve compare register value of first slice
 773:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    * to be less than period register value.
 774:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    */
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 776:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1467              		.loc 1 776 0
 1468 001a 7B69     		ldr	r3, [r7, #20]
 1469 001c 9B69     		ldr	r3, [r3, #24]
 1470 001e 5B6B     		ldr	r3, [r3, #52]
 1471 0020 9BB2     		uxth	r3, r3
 775:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)Compare % \
 1472              		.loc 1 775 0
 1473 0022 1A46     		mov	r2, r3
 1474 0024 3B68     		ldr	r3, [r7, #0]
 1475 0026 B3FBF2F1 		udiv	r1, r3, r2
 1476 002a 02FB01F2 		mul	r2, r2, r1
 1477 002e 9B1A     		subs	r3, r3, r2
 1478 0030 FB61     		str	r3, [r7, #28]
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 778:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint16_t)HandlePtr->CC4yRegsPtr->PRS;
 1479              		.loc 1 778 0
 1480 0032 7B69     		ldr	r3, [r7, #20]
 1481 0034 9B69     		ldr	r3, [r3, #24]
 1482 0036 5B6B     		ldr	r3, [r3, #52]
 1483 0038 9BB2     		uxth	r3, r3
 777:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)Compare /
 1484              		.loc 1 777 0
 1485 003a 3A68     		ldr	r2, [r7, #0]
 1486 003c B2FBF3F3 		udiv	r3, r2, r3
 1487 0040 BB61     		str	r3, [r7, #24]
 779:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 780:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (FirstSliceCompareVal & 0xFFFFU);
 1488              		.loc 1 780 0
 1489 0042 7B69     		ldr	r3, [r7, #20]
 1490 0044 9A69     		ldr	r2, [r3, #24]
 1491 0046 FB69     		ldr	r3, [r7, #28]
 1492 0048 4FEA0343 		lsl	r3, r3, #16
 1493 004c 4FEA1343 		lsr	r3, r3, #16
 1494 0050 D363     		str	r3, [r2, #60]
 781:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (SecondSliceCompareVal & 0xFFFFU);
 1495              		.loc 1 781 0
 1496 0052 7B69     		ldr	r3, [r7, #20]
 1497 0054 DA69     		ldr	r2, [r3, #28]
 1498 0056 BB69     		ldr	r3, [r7, #24]
 1499 0058 4FEA0343 		lsl	r3, r3, #16
 1500 005c 4FEA1343 		lsr	r3, r3, #16
 1501 0060 D363     		str	r3, [r2, #60]
 782:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 783:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1502              		.loc 1 783 0
 1503 0062 7B69     		ldr	r3, [r7, #20]
 1504 0064 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1505 0068 4FEA8303 		lsl	r3, r3, #2
 1506 006c 3B61     		str	r3, [r7, #16]
 784:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1507              		.loc 1 784 0
 1508 006e 7B69     		ldr	r3, [r7, #20]
 1509 0070 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1510 0074 4FEA8303 		lsl	r3, r3, #2
 1511 0078 FB60     		str	r3, [r7, #12]
 785:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 << Temp2 ) | ((uint32_t)0x01 << Te
 1512              		.loc 1 785 0
 1513 007a 7B69     		ldr	r3, [r7, #20]
 1514 007c 5B69     		ldr	r3, [r3, #20]
 1515 007e 7A69     		ldr	r2, [r7, #20]
 1516 0080 5269     		ldr	r2, [r2, #20]
 1517 0082 1169     		ldr	r1, [r2, #16]
 1518 0084 FA68     		ldr	r2, [r7, #12]
 1519 0086 4FF00100 		mov	r0, #1
 1520 008a 00FA02F0 		lsl	r0, r0, r2
 1521 008e 3A69     		ldr	r2, [r7, #16]
 1522 0090 4FF00104 		mov	r4, #1
 1523 0094 04FA02F2 		lsl	r2, r4, r2
 1524 0098 0243     		orrs	r2, r2, r0
 1525 009a 0A43     		orrs	r2, r2, r1
 1526 009c 1A61     		str	r2, [r3, #16]
 786:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1527              		.loc 1 786 0
 1528 009e 07F12007 		add	r7, r7, #32
 1529 00a2 BD46     		mov	sp, r7
 1530 00a4 90BC     		pop	{r4, r7}
 1531 00a6 7047     		bx	lr
 1532              		.cfi_endproc
 1533              	.LFE127:
 1535              		.section	.text.PWMSP001_lSetCompareCenterAlign,"ax",%progbits
 1536              		.align	2
 1537              		.global	PWMSP001_lSetCompareCenterAlign
 1538              		.thumb
 1539              		.thumb_func
 1541              	PWMSP001_lSetCompareCenterAlign:
 1542              	.LFB128:
 787:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 788:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 789:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the compare register value 
 790:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode.
 791:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 792:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetCompareCenterAlign
 793:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 794:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 795:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 796:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 797:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1543              		.loc 1 797 0
 1544              		.cfi_startproc
 1545              		@ args = 0, pretend = 0, frame = 16
 1546              		@ frame_needed = 1, uses_anonymous_args = 0
 1547              		@ link register save eliminated.
 1548 0000 80B4     		push	{r7}
 1549              	.LCFI24:
 1550              		.cfi_def_cfa_offset 4
 1551              		.cfi_offset 7, -4
 1552 0002 85B0     		sub	sp, sp, #20
 1553              	.LCFI25:
 1554              		.cfi_def_cfa_offset 24
 1555 0004 00AF     		add	r7, sp, #0
 1556              	.LCFI26:
 1557              		.cfi_def_cfa_register 7
 1558 0006 7860     		str	r0, [r7, #4]
 1559 0008 3960     		str	r1, [r7, #0]
 798:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 799:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_5_3>>>*/
 800:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1560              		.loc 1 800 0
 1561 000a 7B68     		ldr	r3, [r7, #4]
 1562 000c FB60     		str	r3, [r7, #12]
 801:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (Compare & 0xFFFFU);
 1563              		.loc 1 801 0
 1564 000e FB68     		ldr	r3, [r7, #12]
 1565 0010 9A69     		ldr	r2, [r3, #24]
 1566 0012 3B68     		ldr	r3, [r7, #0]
 1567 0014 4FEA0343 		lsl	r3, r3, #16
 1568 0018 4FEA1343 		lsr	r3, r3, #16
 1569 001c D363     		str	r3, [r2, #60]
 802:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 803:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Request shadow transfer */
 804:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U*(uint32_t)HandlePtr->FirstSlice));
 1570              		.loc 1 804 0
 1571 001e FB68     		ldr	r3, [r7, #12]
 1572 0020 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1573 0024 4FEA8303 		lsl	r3, r3, #2
 1574 0028 BB60     		str	r3, [r7, #8]
 805:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 1575              		.loc 1 805 0
 1576 002a FB68     		ldr	r3, [r7, #12]
 1577 002c 5B69     		ldr	r3, [r3, #20]
 1578 002e FA68     		ldr	r2, [r7, #12]
 1579 0030 5269     		ldr	r2, [r2, #20]
 1580 0032 1169     		ldr	r1, [r2, #16]
 1581 0034 BA68     		ldr	r2, [r7, #8]
 1582 0036 4FF00100 		mov	r0, #1
 1583 003a 00FA02F2 		lsl	r2, r0, r2
 1584 003e 0A43     		orrs	r2, r2, r1
 1585 0040 1A61     		str	r2, [r3, #16]
 806:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1586              		.loc 1 806 0
 1587 0042 07F11407 		add	r7, r7, #20
 1588 0046 BD46     		mov	sp, r7
 1589 0048 80BC     		pop	{r7}
 1590 004a 7047     		bx	lr
 1591              		.cfi_endproc
 1592              	.LFE128:
 1594              		.section	.text.PWMSP001_SetDutyCycle,"ax",%progbits
 1595              		.align	2
 1596              		.global	PWMSP001_SetDutyCycle
 1597              		.thumb
 1598              		.thumb_func
 1600              	PWMSP001_SetDutyCycle:
 1601              	.LFB129:
 807:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 808:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 809:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 810:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 811:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 812:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
 813:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetDutyCycle
 814:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 815:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 816:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 817:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 818:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1602              		.loc 1 818 0
 1603              		.cfi_startproc
 1604              		@ args = 0, pretend = 0, frame = 16
 1605              		@ frame_needed = 1, uses_anonymous_args = 0
 1606 0000 80B5     		push	{r7, lr}
 1607              	.LCFI27:
 1608              		.cfi_def_cfa_offset 8
 1609              		.cfi_offset 7, -8
 1610              		.cfi_offset 14, -4
 1611 0002 84B0     		sub	sp, sp, #16
 1612              	.LCFI28:
 1613              		.cfi_def_cfa_offset 24
 1614 0004 00AF     		add	r7, sp, #0
 1615              	.LCFI29:
 1616              		.cfi_def_cfa_register 7
 1617 0006 7860     		str	r0, [r7, #4]
 1618 0008 3960     		str	r1, [r7, #0]	@ float
 819:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 1619              		.loc 1 819 0
 1620 000a 4FF00103 		mov	r3, #1
 1621 000e FB60     		str	r3, [r7, #12]
 820:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 821:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ( HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED)
 1622              		.loc 1 821 0
 1623 0010 7B68     		ldr	r3, [r7, #4]
 1624 0012 DB6B     		ldr	r3, [r3, #60]
 1625 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1626 0016 002B     		cmp	r3, #0
 1627 0018 1BD0     		beq	.L48
 822:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 823:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((Duty > (float)100) || ((float)Duty < (float)0))
 1628              		.loc 1 823 0
 1629 001a 97ED007A 		flds	s14, [r7, #0]
 1630 001e DFED107A 		flds	s15, .L54
 1631 0022 B4EEE77A 		fcmpes	s14, s15
 1632 0026 F1EE10FA 		fmstat
 1633 002a 06DC     		bgt	.L49
 1634              		.loc 1 823 0 is_stmt 0 discriminator 1
 1635 002c D7ED007A 		flds	s15, [r7, #0]
 1636 0030 F5EEC07A 		fcmpezs	s15
 1637 0034 F1EE10FA 		fmstat
 1638 0038 03D5     		bpl	.L53
 1639              	.L49:
 824:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 825:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 1640              		.loc 1 825 0 is_stmt 1
 1641 003a 4FF00203 		mov	r3, #2
 1642 003e FB60     		str	r3, [r7, #12]
 1643 0040 07E0     		b	.L48
 1644              	.L53:
 826:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 827:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
 828:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 829:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /* Call the function as per configured mode */
 830:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 1645              		.loc 1 830 0
 1646 0042 7B68     		ldr	r3, [r7, #4]
 1647 0044 5B6C     		ldr	r3, [r3, #68]
 1648 0046 7868     		ldr	r0, [r7, #4]
 1649 0048 3968     		ldr	r1, [r7, #0]	@ float
 1650 004a 9847     		blx	r3
 831:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1651              		.loc 1 831 0
 1652 004c 4FF00003 		mov	r3, #0
 1653 0050 FB60     		str	r3, [r7, #12]
 1654              	.L48:
 832:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 833:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 834:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 1655              		.loc 1 834 0
 1656 0052 FB68     		ldr	r3, [r7, #12]
 835:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1657              		.loc 1 835 0
 1658 0054 1846     		mov	r0, r3
 1659 0056 07F11007 		add	r7, r7, #16
 1660 005a BD46     		mov	sp, r7
 1661 005c 80BD     		pop	{r7, pc}
 1662              	.L55:
 1663 005e 00BF     		.align	2
 1664              	.L54:
 1665 0060 0000C842 		.word	1120403456
 1666              		.cfi_endproc
 1667              	.LFE129:
 1669              		.section	.text.PWMSP001_lSetDutyEdgeAlign,"ax",%progbits
 1670              		.align	2
 1671              		.global	PWMSP001_lSetDutyEdgeAlign
 1672              		.thumb
 1673              		.thumb_func
 1675              	PWMSP001_lSetDutyEdgeAlign:
 1676              	.LFB130:
 836:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 837:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 838:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 839:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned mode
 840:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 841:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlign
 842:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 843:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 844:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 845:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 846:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1677              		.loc 1 846 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 32
 1680              		@ frame_needed = 1, uses_anonymous_args = 0
 1681              		@ link register save eliminated.
 1682 0000 80B4     		push	{r7}
 1683              	.LCFI30:
 1684              		.cfi_def_cfa_offset 4
 1685              		.cfi_offset 7, -4
 1686 0002 89B0     		sub	sp, sp, #36
 1687              	.LCFI31:
 1688              		.cfi_def_cfa_offset 40
 1689 0004 00AF     		add	r7, sp, #0
 1690              	.LCFI32:
 1691              		.cfi_def_cfa_register 7
 1692 0006 7860     		str	r0, [r7, #4]
 1693 0008 3960     		str	r1, [r7, #0]	@ float
 847:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1694              		.loc 1 847 0
 1695 000a 4FF00003 		mov	r3, #0
 1696 000e FB61     		str	r3, [r7, #28]
 848:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 849:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 850:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1697              		.loc 1 850 0
 1698 0010 7B68     		ldr	r3, [r7, #4]
 1699 0012 BB61     		str	r3, [r7, #24]
 851:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1700              		.loc 1 851 0
 1701 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1702 0016 7B61     		str	r3, [r7, #20]	@ float
 852:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 853:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_3>>>*/
 854:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 855:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1703              		.loc 1 855 0
 1704 0018 9FED1F7A 		flds	s14, .L57
 1705 001c D7ED057A 		flds	s15, [r7, #20]
 1706 0020 37EE677A 		fsubs	s14, s14, s15
 1707 0024 DFED1C7A 		flds	s15, .L57
 1708 0028 C7EE277A 		fdivs	s15, s14, s15
 1709 002c C7ED057A 		fsts	s15, [r7, #20]
 856:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)((uint32_t)HandlePtr->CC4yRegsPtr->PRS + 1U);
 1710              		.loc 1 856 0
 1711 0030 BB69     		ldr	r3, [r7, #24]
 1712 0032 9B69     		ldr	r3, [r3, #24]
 1713 0034 5B6B     		ldr	r3, [r3, #52]
 1714 0036 03F10103 		add	r3, r3, #1
 1715 003a 07EE103A 		fmsr	s14, r3	@ int
 1716 003e F8EE477A 		fuitos	s15, s14
 1717 0042 C7ED047A 		fsts	s15, [r7, #16]
 857:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1718              		.loc 1 857 0
 1719 0046 97ED047A 		flds	s14, [r7, #16]
 1720 004a D7ED057A 		flds	s15, [r7, #20]
 1721 004e 67EE277A 		fmuls	s15, s14, s15
 1722 0052 FCEEE77A 		ftouizs	s15, s15
 1723 0056 C7ED077A 		fsts	s15, [r7, #28]	@ int
 858:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = FirstSliceCompareVal  & 0xFFFFU;
 1724              		.loc 1 858 0
 1725 005a BB69     		ldr	r3, [r7, #24]
 1726 005c 9A69     		ldr	r2, [r3, #24]
 1727 005e FB69     		ldr	r3, [r7, #28]
 1728 0060 4FEA0343 		lsl	r3, r3, #16
 1729 0064 4FEA1343 		lsr	r3, r3, #16
 1730 0068 D363     		str	r3, [r2, #60]
 859:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 860:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Shadow transfer */
 861:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 =  ((uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 *(uint32_t)HandlePtr->FirstSlice));
 1731              		.loc 1 861 0
 1732 006a BB69     		ldr	r3, [r7, #24]
 1733 006c 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1734 0070 4FEA8303 		lsl	r3, r3, #2
 1735 0074 FB60     		str	r3, [r7, #12]
 862:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1736              		.loc 1 862 0
 1737 0076 BB69     		ldr	r3, [r7, #24]
 1738 0078 5B69     		ldr	r3, [r3, #20]
 1739 007a BA69     		ldr	r2, [r7, #24]
 1740 007c 5269     		ldr	r2, [r2, #20]
 1741 007e 1169     		ldr	r1, [r2, #16]
 1742 0080 FA68     		ldr	r2, [r7, #12]
 1743 0082 4FF00100 		mov	r0, #1
 1744 0086 00FA02F2 		lsl	r2, r0, r2
 1745 008a 0A43     		orrs	r2, r2, r1
 1746 008c 1A61     		str	r2, [r3, #16]
 863:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Update dynamic handle */
 864:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1747              		.loc 1 864 0
 1748 008e 07F12407 		add	r7, r7, #36
 1749 0092 BD46     		mov	sp, r7
 1750 0094 80BC     		pop	{r7}
 1751 0096 7047     		bx	lr
 1752              	.L58:
 1753              		.align	2
 1754              	.L57:
 1755 0098 0000C842 		.word	1120403456
 1756              		.cfi_endproc
 1757              	.LFE130:
 1759              		.section	.text.PWMSP001_lSetDutyEdgeAlignTimerConcat,"ax",%progbits
 1760              		.align	2
 1761              		.global	PWMSP001_lSetDutyEdgeAlignTimerConcat
 1762              		.thumb
 1763              		.thumb_func
 1765              	PWMSP001_lSetDutyEdgeAlignTimerConcat:
 1766              	.LFB131:
 865:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 866:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 867:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 868:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in edge-aligned timer concatenation mode
 869:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 870:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyEdgeAlignTimerConcat
 871:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 872:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 873:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 874:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 875:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1767              		.loc 1 875 0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 40
 1770              		@ frame_needed = 1, uses_anonymous_args = 0
 1771              		@ link register save eliminated.
 1772 0000 90B4     		push	{r4, r7}
 1773              	.LCFI33:
 1774              		.cfi_def_cfa_offset 8
 1775              		.cfi_offset 4, -8
 1776              		.cfi_offset 7, -4
 1777 0002 8AB0     		sub	sp, sp, #40
 1778              	.LCFI34:
 1779              		.cfi_def_cfa_offset 48
 1780 0004 00AF     		add	r7, sp, #0
 1781              	.LCFI35:
 1782              		.cfi_def_cfa_register 7
 1783 0006 7860     		str	r0, [r7, #4]
 1784 0008 3960     		str	r1, [r7, #0]	@ float
 876:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Compare = (uint32_t)0;
 1785              		.loc 1 876 0
 1786 000a 4FF00003 		mov	r3, #0
 1787 000e 7B62     		str	r3, [r7, #36]
 877:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0;
 1788              		.loc 1 877 0
 1789 0010 4FF00003 		mov	r3, #0
 1790 0014 3B62     		str	r3, [r7, #32]
 878:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondSliceCompareVal = (uint32_t)0;
 1791              		.loc 1 878 0
 1792 0016 4FF00003 		mov	r3, #0
 1793 001a FB61     		str	r3, [r7, #28]
 879:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
 880:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
 881:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 882:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1794              		.loc 1 882 0
 1795 001c 7B68     		ldr	r3, [r7, #4]
 1796 001e BB61     		str	r3, [r7, #24]
 883:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 884:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1797              		.loc 1 884 0
 1798 0020 3B68     		ldr	r3, [r7, #0]	@ float
 1799 0022 7B61     		str	r3, [r7, #20]	@ float
 885:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_4>>>*/
 886:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /* Find the compare register value from the duty cycle and period register value */
 887:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare =(uint32_t)HandlePtr->CC4yRegs1Ptr->PRS + 1U;
 1800              		.loc 1 887 0
 1801 0024 BB69     		ldr	r3, [r7, #24]
 1802 0026 DB69     		ldr	r3, [r3, #28]
 1803 0028 5B6B     		ldr	r3, [r3, #52]
 1804 002a 03F10103 		add	r3, r3, #1
 1805 002e 7B62     		str	r3, [r7, #36]
 888:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare *= ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U); 
 1806              		.loc 1 888 0
 1807 0030 BB69     		ldr	r3, [r7, #24]
 1808 0032 9B69     		ldr	r3, [r3, #24]
 1809 0034 5B6B     		ldr	r3, [r3, #52]
 1810 0036 4FEA0343 		lsl	r3, r3, #16
 1811 003a 4FEA1343 		lsr	r3, r3, #16
 1812 003e 03F10102 		add	r2, r3, #1
 1813 0042 7B6A     		ldr	r3, [r7, #36]
 1814 0044 02FB03F3 		mul	r3, r2, r3
 1815 0048 7B62     		str	r3, [r7, #36]
 889:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare +=  (uint32_t)1;
 1816              		.loc 1 889 0
 1817 004a 7B6A     		ldr	r3, [r7, #36]
 1818 004c 03F10103 		add	r3, r3, #1
 1819 0050 7B62     		str	r3, [r7, #36]
 890:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 891:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = ((float)100.00 - (float)fDuty)/(float)100.00;
 1820              		.loc 1 891 0
 1821 0052 9FED347A 		flds	s14, .L60
 1822 0056 D7ED057A 		flds	s15, [r7, #20]
 1823 005a 37EE677A 		fsubs	s14, s14, s15
 1824 005e DFED317A 		flds	s15, .L60
 1825 0062 C7EE277A 		fdivs	s15, s14, s15
 1826 0066 C7ED057A 		fsts	s15, [r7, #20]
 892:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)(Compare);
 1827              		.loc 1 892 0
 1828 006a D7ED097A 		flds	s15, [r7, #36]	@ int
 1829 006e F8EE677A 		fuitos	s15, s15
 1830 0072 C7ED047A 		fsts	s15, [r7, #16]
 893:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Compare = (uint32_t)( fPRS * fDuty);
 1831              		.loc 1 893 0
 1832 0076 97ED047A 		flds	s14, [r7, #16]
 1833 007a D7ED057A 		flds	s15, [r7, #20]
 1834 007e 67EE277A 		fmuls	s15, s14, s15
 1835 0082 FCEEE77A 		ftouizs	s15, s15
 1836 0086 C7ED097A 		fsts	s15, [r7, #36]	@ int
 894:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 896:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare % ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1837              		.loc 1 896 0
 1838 008a BB69     		ldr	r3, [r7, #24]
 1839 008c 9B69     		ldr	r3, [r3, #24]
 1840 008e 5B6B     		ldr	r3, [r3, #52]
 1841 0090 4FEA0343 		lsl	r3, r3, #16
 1842 0094 4FEA1343 		lsr	r3, r3, #16
 895:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal =(uint32_t)
 1843              		.loc 1 895 0
 1844 0098 7A6A     		ldr	r2, [r7, #36]
 1845 009a B2FBF3F1 		udiv	r1, r2, r3
 1846 009e 03FB01F3 		mul	r3, r3, r1
 1847 00a2 D31A     		subs	r3, r2, r3
 1848 00a4 3B62     		str	r3, [r7, #32]
 897:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1849              		.loc 1 897 0
 1850 00a6 BB69     		ldr	r3, [r7, #24]
 1851 00a8 9A69     		ldr	r2, [r3, #24]
 1852 00aa 3B6A     		ldr	r3, [r7, #32]
 1853 00ac 4FEA0343 		lsl	r3, r3, #16
 1854 00b0 4FEA1343 		lsr	r3, r3, #16
 1855 00b4 D363     		str	r3, [r2, #60]
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 899:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     ((uint32_t)Compare / ((uint32_t)((uint32_t)HandlePtr->CC4yRegsPtr->PRS & 0xFFFF
 1856              		.loc 1 899 0
 1857 00b6 BB69     		ldr	r3, [r7, #24]
 1858 00b8 9B69     		ldr	r3, [r3, #24]
 1859 00ba 5B6B     		ldr	r3, [r3, #52]
 1860 00bc 4FEA0343 		lsl	r3, r3, #16
 1861 00c0 4FEA1343 		lsr	r3, r3, #16
 898:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   SecondSliceCompareVal = (uint32_t)
 1862              		.loc 1 898 0
 1863 00c4 7A6A     		ldr	r2, [r7, #36]
 1864 00c6 B2FBF3F3 		udiv	r3, r2, r3
 1865 00ca FB61     		str	r3, [r7, #28]
 900:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS = (uint32_t)SecondSliceCompareVal  & 0xFFFFU;
 1866              		.loc 1 900 0
 1867 00cc BB69     		ldr	r3, [r7, #24]
 1868 00ce DA69     		ldr	r2, [r3, #28]
 1869 00d0 FB69     		ldr	r3, [r7, #28]
 1870 00d2 4FEA0343 		lsl	r3, r3, #16
 1871 00d6 4FEA1343 		lsr	r3, r3, #16
 1872 00da D363     		str	r3, [r2, #60]
 901:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 902:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /** shadow transfer */
 903:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp2 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1873              		.loc 1 903 0
 1874 00dc BB69     		ldr	r3, [r7, #24]
 1875 00de 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1876 00e2 4FEA8303 		lsl	r3, r3, #2
 1877 00e6 FB60     		str	r3, [r7, #12]
 904:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp3 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice));
 1878              		.loc 1 904 0
 1879 00e8 BB69     		ldr	r3, [r7, #24]
 1880 00ea 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 1881 00ee 4FEA8303 		lsl	r3, r3, #2
 1882 00f2 BB60     		str	r3, [r7, #8]
 905:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)1 << (uint32_t)Temp2 ) | ((uint32_t)1 <
 1883              		.loc 1 905 0
 1884 00f4 BB69     		ldr	r3, [r7, #24]
 1885 00f6 5B69     		ldr	r3, [r3, #20]
 1886 00f8 BA69     		ldr	r2, [r7, #24]
 1887 00fa 5269     		ldr	r2, [r2, #20]
 1888 00fc 1169     		ldr	r1, [r2, #16]
 1889 00fe FA68     		ldr	r2, [r7, #12]
 1890 0100 4FF00100 		mov	r0, #1
 1891 0104 00FA02F0 		lsl	r0, r0, r2
 1892 0108 BA68     		ldr	r2, [r7, #8]
 1893 010a 4FF00104 		mov	r4, #1
 1894 010e 04FA02F2 		lsl	r2, r4, r2
 1895 0112 0243     		orrs	r2, r2, r0
 1896 0114 0A43     		orrs	r2, r2, r1
 1897 0116 1A61     		str	r2, [r3, #16]
 906:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1898              		.loc 1 906 0
 1899 0118 07F12807 		add	r7, r7, #40
 1900 011c BD46     		mov	sp, r7
 1901 011e 90BC     		pop	{r4, r7}
 1902 0120 7047     		bx	lr
 1903              	.L61:
 1904 0122 00BF     		.align	2
 1905              	.L60:
 1906 0124 0000C842 		.word	1120403456
 1907              		.cfi_endproc
 1908              	.LFE131:
 1910              		.section	.text.PWMSP001_lSetDutyCenterAlign,"ax",%progbits
 1911              		.align	2
 1912              		.global	PWMSP001_lSetDutyCenterAlign
 1913              		.thumb
 1914              		.thumb_func
 1916              	PWMSP001_lSetDutyCenterAlign:
 1917              	.LFB132:
 907:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 908:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 909:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to change the duty cycle of the PWM waveform
 910:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * in center-aligned mode
 911:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 912:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lSetDutyCenterAlign
 913:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 914:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     void* Handle,
 915:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
 916:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 917:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 1918              		.loc 1 917 0
 1919              		.cfi_startproc
 1920              		@ args = 0, pretend = 0, frame = 32
 1921              		@ frame_needed = 1, uses_anonymous_args = 0
 1922              		@ link register save eliminated.
 1923 0000 80B4     		push	{r7}
 1924              	.LCFI36:
 1925              		.cfi_def_cfa_offset 4
 1926              		.cfi_offset 7, -4
 1927 0002 89B0     		sub	sp, sp, #36
 1928              	.LCFI37:
 1929              		.cfi_def_cfa_offset 40
 1930 0004 00AF     		add	r7, sp, #0
 1931              	.LCFI38:
 1932              		.cfi_def_cfa_register 7
 1933 0006 7860     		str	r0, [r7, #4]
 1934 0008 3960     		str	r1, [r7, #0]	@ float
 918:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_5>>>*/
 919:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t FirstSliceCompareVal = (uint32_t)0x00;
 1935              		.loc 1 919 0
 1936 000a 4FF00003 		mov	r3, #0
 1937 000e FB61     		str	r3, [r7, #28]
 920:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 921:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fDuty, fPRS ;
 922:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   PWMSP001_HandleType* HandlePtr = (PWMSP001_HandleType*)Handle;
 1938              		.loc 1 922 0
 1939 0010 7B68     		ldr	r3, [r7, #4]
 1940 0012 BB61     		str	r3, [r7, #24]
 923:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = Duty;
 1941              		.loc 1 923 0
 1942 0014 3B68     		ldr	r3, [r7, #0]	@ float
 1943 0016 7B61     		str	r3, [r7, #20]	@ float
 924:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 925:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fDuty = (float)((float)100.00 - (float)fDuty)/(float)100.00;
 1944              		.loc 1 925 0
 1945 0018 9FED1E7A 		flds	s14, .L63
 1946 001c D7ED057A 		flds	s15, [r7, #20]
 1947 0020 37EE677A 		fsubs	s14, s14, s15
 1948 0024 DFED1B7A 		flds	s15, .L63
 1949 0028 C7EE277A 		fdivs	s15, s14, s15
 1950 002c C7ED057A 		fsts	s15, [r7, #20]
 926:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   fPRS = (float)HandlePtr->CC4yRegsPtr->PRS;
 1951              		.loc 1 926 0
 1952 0030 BB69     		ldr	r3, [r7, #24]
 1953 0032 9B69     		ldr	r3, [r3, #24]
 1954 0034 D3ED0D7A 		flds	s15, [r3, #52]	@ int
 1955 0038 F8EE677A 		fuitos	s15, s15
 1956 003c C7ED047A 		fsts	s15, [r7, #16]
 927:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   FirstSliceCompareVal = (uint32_t)( fPRS * fDuty);
 1957              		.loc 1 927 0
 1958 0040 97ED047A 		flds	s14, [r7, #16]
 1959 0044 D7ED057A 		flds	s15, [r7, #20]
 1960 0048 67EE277A 		fmuls	s15, s14, s15
 1961 004c FCEEE77A 		ftouizs	s15, s15
 1962 0050 C7ED077A 		fsts	s15, [r7, #28]	@ int
 928:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegsPtr->CRS = (uint32_t)FirstSliceCompareVal  & 0xFFFFU;
 1963              		.loc 1 928 0
 1964 0054 BB69     		ldr	r3, [r7, #24]
 1965 0056 9A69     		ldr	r2, [r3, #24]
 1966 0058 FB69     		ldr	r3, [r7, #28]
 1967 005a 4FEA0343 		lsl	r3, r3, #16
 1968 005e 4FEA1343 		lsr	r3, r3, #16
 1969 0062 D363     		str	r3, [r2, #60]
 929:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 930:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*shadow transfer */
 931:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   Temp1 = ((uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice));
 1970              		.loc 1 931 0
 1971 0064 BB69     		ldr	r3, [r7, #24]
 1972 0066 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 1973 006a 4FEA8303 		lsl	r3, r3, #2
 1974 006e FB60     		str	r3, [r7, #12]
 932:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)((uint32_t)0x01 << (uint32_t)Temp1);
 1975              		.loc 1 932 0
 1976 0070 BB69     		ldr	r3, [r7, #24]
 1977 0072 5B69     		ldr	r3, [r3, #20]
 1978 0074 BA69     		ldr	r2, [r7, #24]
 1979 0076 5269     		ldr	r2, [r2, #20]
 1980 0078 1169     		ldr	r1, [r2, #16]
 1981 007a FA68     		ldr	r2, [r7, #12]
 1982 007c 4FF00100 		mov	r0, #1
 1983 0080 00FA02F2 		lsl	r2, r0, r2
 1984 0084 0A43     		orrs	r2, r2, r1
 1985 0086 1A61     		str	r2, [r3, #16]
 933:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 1986              		.loc 1 933 0
 1987 0088 07F12407 		add	r7, r7, #36
 1988 008c BD46     		mov	sp, r7
 1989 008e 80BC     		pop	{r7}
 1990 0090 7047     		bx	lr
 1991              	.L64:
 1992 0092 00BF     		.align	2
 1993              	.L63:
 1994 0094 0000C842 		.word	1120403456
 1995              		.cfi_endproc
 1996              	.LFE132:
 1998              		.section	.text.PWMSP001_SetPeriodAndCompare,"ax",%progbits
 1999              		.align	2
 2000              		.global	PWMSP001_SetPeriodAndCompare
 2001              		.thumb
 2002              		.thumb_func
 2004              	PWMSP001_SetPeriodAndCompare:
 2005              	.LFB133:
 934:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 935:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 936:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 937:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
 938:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of period and compare register
 939:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 940:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriodAndCompare
 941:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 942:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 943:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period,
 944:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Compare
 945:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 946:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2006              		.loc 1 946 0
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 24
 2009              		@ frame_needed = 1, uses_anonymous_args = 0
 2010 0000 80B5     		push	{r7, lr}
 2011              	.LCFI39:
 2012              		.cfi_def_cfa_offset 8
 2013              		.cfi_offset 7, -8
 2014              		.cfi_offset 14, -4
 2015 0002 86B0     		sub	sp, sp, #24
 2016              	.LCFI40:
 2017              		.cfi_def_cfa_offset 32
 2018 0004 00AF     		add	r7, sp, #0
 2019              	.LCFI41:
 2020              		.cfi_def_cfa_register 7
 2021 0006 F860     		str	r0, [r7, #12]
 2022 0008 B960     		str	r1, [r7, #8]
 2023 000a 7A60     		str	r2, [r7, #4]
 947:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2024              		.loc 1 947 0
 2025 000c 4FF00103 		mov	r3, #1
 2026 0010 7B61     		str	r3, [r7, #20]
 948:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0UL;
 2027              		.loc 1 948 0
 2028 0012 4FF00003 		mov	r3, #0
 2029 0016 3B61     		str	r3, [r7, #16]
 949:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 950:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2030              		.loc 1 950 0
 2031 0018 FB68     		ldr	r3, [r7, #12]
 2032 001a DB6B     		ldr	r3, [r3, #60]
 2033 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2034 001e 002B     		cmp	r3, #0
 2035 0020 3BD0     		beq	.L66
 951:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 2036              		.loc 1 952 0
 2037 0022 BB68     		ldr	r3, [r7, #8]
 2038 0024 002B     		cmp	r3, #0
 2039 0026 09D0     		beq	.L67
 2040              		.loc 1 952 0 is_stmt 0 discriminator 1
 2041 0028 FB68     		ldr	r3, [r7, #12]
 2042 002a DA6A     		ldr	r2, [r3, #44]
 2043 002c 7B68     		ldr	r3, [r7, #4]
 2044 002e 9A42     		cmp	r2, r3
 2045 0030 08D2     		bcs	.L68
 953:../Dave/Generated/src/PWMSP001/PWMSP001.c ****        (HandlePtr->kTimerConcatenation == (uint8_t)RESET)))
 2046              		.loc 1 953 0 is_stmt 1 discriminator 1
 2047 0032 FB68     		ldr	r3, [r7, #12]
 2048 0034 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 952:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if((Period == (uint32_t)0) || (((uint32_t)Compare > (uint32_t)HandlePtr->kMaxPeriodVal) &&
 2049              		.loc 1 952 0 discriminator 1
 2050 0038 002B     		cmp	r3, #0
 2051 003a 03D1     		bne	.L68
 2052              	.L67:
 954:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 955:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2053              		.loc 1 955 0
 2054 003c 4FF00203 		mov	r3, #2
 2055 0040 7B61     		str	r3, [r7, #20]
 2056 0042 2AE0     		b	.L66
 2057              	.L68:
 956:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 957:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
 958:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2058              		.loc 1 959 0
 2059 0044 FB68     		ldr	r3, [r7, #12]
 2060 0046 DA6A     		ldr	r2, [r3, #44]
 2061 0048 BB68     		ldr	r3, [r7, #8]
 2062 004a 9A42     		cmp	r2, r3
 2063 004c 08D2     		bcs	.L69
 960:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           ((HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2064              		.loc 1 960 0 discriminator 1
 2065 004e FB68     		ldr	r3, [r7, #12]
 2066 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 959:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if ((Period > (uint32_t)HandlePtr->kMaxPeriodVal)&&\
 2067              		.loc 1 959 0 discriminator 1
 2068 0054 012B     		cmp	r3, #1
 2069 0056 03D0     		beq	.L69
 961:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           )
 962:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 963:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2070              		.loc 1 963 0
 2071 0058 4FF00203 		mov	r3, #2
 2072 005c 7B61     		str	r3, [r7, #20]
 2073 005e 1CE0     		b	.L66
 2074              	.L69:
 964:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 965:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
 966:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
 967:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2075              		.loc 1 967 0
 2076 0060 BB68     		ldr	r3, [r7, #8]
 2077 0062 3B61     		str	r3, [r7, #16]
 968:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2078              		.loc 1 968 0
 2079 0064 FB68     		ldr	r3, [r7, #12]
 2080 0066 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2081 006a 012B     		cmp	r3, #1
 2082 006c 05D1     		bne	.L70
 969:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
 970:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2083              		.loc 1 970 0
 2084 006e FB68     		ldr	r3, [r7, #12]
 2085 0070 DB69     		ldr	r3, [r3, #28]
 2086 0072 3A69     		ldr	r2, [r7, #16]
 2087 0074 4FEA1242 		lsr	r2, r2, #16
 2088 0078 5A63     		str	r2, [r3, #52]
 2089              	.L70:
 971:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
 972:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*<<<DD_PWMSP001_API_6_3>>>*/
 973:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2090              		.loc 1 973 0
 2091 007a FB68     		ldr	r3, [r7, #12]
 2092 007c 9A69     		ldr	r2, [r3, #24]
 2093 007e 3B69     		ldr	r3, [r7, #16]
 2094 0080 4FEA0343 		lsl	r3, r3, #16
 2095 0084 4FEA1343 		lsr	r3, r3, #16
 2096 0088 5363     		str	r3, [r2, #52]
 974:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /* Call function as per the configured mode */
 975:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->SetCompareFuncPtr((const void*)HandlePtr, Compare);
 2097              		.loc 1 975 0
 2098 008a FB68     		ldr	r3, [r7, #12]
 2099 008c 1B6C     		ldr	r3, [r3, #64]
 2100 008e F868     		ldr	r0, [r7, #12]
 2101 0090 7968     		ldr	r1, [r7, #4]
 2102 0092 9847     		blx	r3
 976:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2103              		.loc 1 976 0
 2104 0094 4FF00003 		mov	r3, #0
 2105 0098 7B61     		str	r3, [r7, #20]
 2106              	.L66:
 977:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
 978:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
 979:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
 980:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2107              		.loc 1 980 0
 2108 009a 7B69     		ldr	r3, [r7, #20]
 981:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2109              		.loc 1 981 0
 2110 009c 1846     		mov	r0, r3
 2111 009e 07F11807 		add	r7, r7, #24
 2112 00a2 BD46     		mov	sp, r7
 2113 00a4 80BD     		pop	{r7, pc}
 2114              		.cfi_endproc
 2115              	.LFE133:
 2117 00a6 00BF     		.section	.text.PWMSP001_SetPeriod,"ax",%progbits
 2118              		.align	2
 2119              		.global	PWMSP001_SetPeriod
 2120              		.thumb
 2121              		.thumb_func
 2123              	PWMSP001_SetPeriod:
 2124              	.LFB134:
 982:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
 983:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_6>>>*/
 984:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
 985:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the period register value
 986:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
 987:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPeriod
 988:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
 989:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
 990:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t Period
 991:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
 992:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2125              		.loc 1 992 0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 24
 2128              		@ frame_needed = 1, uses_anonymous_args = 0
 2129              		@ link register save eliminated.
 2130 0000 80B4     		push	{r7}
 2131              	.LCFI42:
 2132              		.cfi_def_cfa_offset 4
 2133              		.cfi_offset 7, -4
 2134 0002 87B0     		sub	sp, sp, #28
 2135              	.LCFI43:
 2136              		.cfi_def_cfa_offset 32
 2137 0004 00AF     		add	r7, sp, #0
 2138              	.LCFI44:
 2139              		.cfi_def_cfa_register 7
 2140 0006 7860     		str	r0, [r7, #4]
 2141 0008 3960     		str	r1, [r7, #0]
 993:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2142              		.loc 1 993 0
 2143 000a 4FF00103 		mov	r3, #1
 2144 000e 7B61     		str	r3, [r7, #20]
 994:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = 0X00U;
 2145              		.loc 1 994 0
 2146 0010 4FF00003 		mov	r3, #0
 2147 0014 3B61     		str	r3, [r7, #16]
 995:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
 996:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
 997:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_6_1>>>*/
 998:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2148              		.loc 1 998 0
 2149 0016 7B68     		ldr	r3, [r7, #4]
 2150 0018 DB6B     		ldr	r3, [r3, #60]
 2151 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2152 001c 002B     		cmp	r3, #0
 2153 001e 55D0     		beq	.L73
 999:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1000:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Period == (uint32_t)0)
 2154              		.loc 1 1000 0
 2155 0020 3B68     		ldr	r3, [r7, #0]
 2156 0022 002B     		cmp	r3, #0
 2157 0024 03D1     		bne	.L74
1001:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1002:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2158              		.loc 1 1002 0
 2159 0026 4FF00203 		mov	r3, #2
 2160 002a 7B61     		str	r3, [r7, #20]
 2161 002c 4EE0     		b	.L73
 2162              	.L74:
1003:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1004:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1005:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2163              		.loc 1 1006 0
 2164 002e 7B68     		ldr	r3, [r7, #4]
 2165 0030 DA6A     		ldr	r2, [r3, #44]
 2166 0032 3B68     		ldr	r3, [r7, #0]
 2167 0034 9A42     		cmp	r2, r3
 2168 0036 08D2     		bcs	.L75
1007:../Dave/Generated/src/PWMSP001/PWMSP001.c ****          (HandlePtr->kTimerConcatenation != (uint8_t)SET))
 2169              		.loc 1 1007 0 discriminator 1
 2170 0038 7B68     		ldr	r3, [r7, #4]
 2171 003a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
1006:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if((Period > (uint32_t)HandlePtr->kMaxPeriodVal) &&\
 2172              		.loc 1 1006 0 discriminator 1
 2173 003e 012B     		cmp	r3, #1
 2174 0040 03D0     		beq	.L75
1008:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1009:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2175              		.loc 1 1009 0
 2176 0042 4FF00203 		mov	r3, #2
 2177 0046 7B61     		str	r3, [r7, #20]
 2178 0048 40E0     		b	.L73
 2179              	.L75:
1010:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1011:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1012:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1013:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = Period;
 2180              		.loc 1 1013 0
 2181 004a 3B68     		ldr	r3, [r7, #0]
 2182 004c 3B61     		str	r3, [r7, #16]
1014:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2183              		.loc 1 1014 0
 2184 004e 7B68     		ldr	r3, [r7, #4]
 2185 0050 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2186 0054 012B     		cmp	r3, #1
 2187 0056 05D1     		bne	.L76
1015:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1016:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegs1Ptr->PRS = ((PeriodVal & 0xFFFF0000U) >> 16U);
 2188              		.loc 1 1016 0
 2189 0058 7B68     		ldr	r3, [r7, #4]
 2190 005a DB69     		ldr	r3, [r3, #28]
 2191 005c 3A69     		ldr	r2, [r7, #16]
 2192 005e 4FEA1242 		lsr	r2, r2, #16
 2193 0062 5A63     		str	r2, [r3, #52]
 2194              	.L76:
1017:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1018:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yRegsPtr->PRS = (PeriodVal & 0xFFFFU);
 2195              		.loc 1 1018 0
 2196 0064 7B68     		ldr	r3, [r7, #4]
 2197 0066 9A69     		ldr	r2, [r3, #24]
 2198 0068 3B69     		ldr	r3, [r7, #16]
 2199 006a 4FEA0343 		lsl	r3, r3, #16
 2200 006e 4FEA1343 		lsr	r3, r3, #16
 2201 0072 5363     		str	r3, [r2, #52]
1019:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /*Request shadow transfer for the First slice*/
1020:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 2202              		.loc 1 1020 0
 2203 0074 7B68     		ldr	r3, [r7, #4]
 2204 0076 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2205 007a 4FEA8303 		lsl	r3, r3, #2
 2206 007e FB60     		str	r3, [r7, #12]
1021:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |=	((uint32_t)0x01 << Temp1);
 2207              		.loc 1 1021 0
 2208 0080 7B68     		ldr	r3, [r7, #4]
 2209 0082 5B69     		ldr	r3, [r3, #20]
 2210 0084 7A68     		ldr	r2, [r7, #4]
 2211 0086 5269     		ldr	r2, [r2, #20]
 2212 0088 1169     		ldr	r1, [r2, #16]
 2213 008a FA68     		ldr	r2, [r7, #12]
 2214 008c 4FF00100 		mov	r0, #1
 2215 0090 00FA02F2 		lsl	r2, r0, r2
 2216 0094 0A43     		orrs	r2, r2, r1
 2217 0096 1A61     		str	r2, [r3, #16]
1022:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2218              		.loc 1 1022 0
 2219 0098 7B68     		ldr	r3, [r7, #4]
 2220 009a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2221 009e 012B     		cmp	r3, #1
 2222 00a0 11D1     		bne	.L77
1023:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1024:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           /*Request shadow transfer for the First slice*/
1025:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2223              		.loc 1 1025 0
 2224 00a2 7B68     		ldr	r3, [r7, #4]
 2225 00a4 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2226 00a8 4FEA8303 		lsl	r3, r3, #2
 2227 00ac FB60     		str	r3, [r7, #12]
1026:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1);
 2228              		.loc 1 1026 0
 2229 00ae 7B68     		ldr	r3, [r7, #4]
 2230 00b0 5B69     		ldr	r3, [r3, #20]
 2231 00b2 7A68     		ldr	r2, [r7, #4]
 2232 00b4 5269     		ldr	r2, [r2, #20]
 2233 00b6 1169     		ldr	r1, [r2, #16]
 2234 00b8 FA68     		ldr	r2, [r7, #12]
 2235 00ba 4FF00100 		mov	r0, #1
 2236 00be 00FA02F2 		lsl	r2, r0, r2
 2237 00c2 0A43     		orrs	r2, r2, r1
 2238 00c4 1A61     		str	r2, [r3, #16]
 2239              	.L77:
1027:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }/*End Of if (HandlePtr->kTimerConcatenation == (uint8_t)SET)*/
1028:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2240              		.loc 1 1028 0
 2241 00c6 4FF00003 		mov	r3, #0
 2242 00ca 7B61     		str	r3, [r7, #20]
 2243              	.L73:
1029:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1030:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1031:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1032:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2244              		.loc 1 1032 0
 2245 00cc 7B69     		ldr	r3, [r7, #20]
1033:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2246              		.loc 1 1033 0
 2247 00ce 1846     		mov	r0, r3
 2248 00d0 07F11C07 		add	r7, r7, #28
 2249 00d4 BD46     		mov	sp, r7
 2250 00d6 80BC     		pop	{r7}
 2251 00d8 7047     		bx	lr
 2252              		.cfi_endproc
 2253              	.LFE134:
 2255 00da 00BF     		.section	.text.PWMSP001_SetPwmFreqAndDutyCycle,"ax",%progbits
 2256              		.align	2
 2257              		.global	PWMSP001_SetPwmFreqAndDutyCycle
 2258              		.thumb
 2259              		.thumb_func
 2261              	PWMSP001_SetPwmFreqAndDutyCycle:
 2262              	.LFB135:
1034:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1035:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1036:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1037:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency and duty cycle. 
1038:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * Input parameters are in terms of the frequency in hertz and duty in %.
1039:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1040:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreqAndDutyCycle
1041:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1042:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1043:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq,
1044:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float Duty
1045:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1046:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2263              		.loc 1 1046 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 32
 2266              		@ frame_needed = 1, uses_anonymous_args = 0
 2267 0000 80B5     		push	{r7, lr}
 2268              	.LCFI45:
 2269              		.cfi_def_cfa_offset 8
 2270              		.cfi_offset 7, -8
 2271              		.cfi_offset 14, -4
 2272 0002 88B0     		sub	sp, sp, #32
 2273              	.LCFI46:
 2274              		.cfi_def_cfa_offset 40
 2275 0004 00AF     		add	r7, sp, #0
 2276              	.LCFI47:
 2277              		.cfi_def_cfa_register 7
 2278 0006 F860     		str	r0, [r7, #12]
 2279 0008 B960     		str	r1, [r7, #8]	@ float
 2280 000a 7A60     		str	r2, [r7, #4]	@ float
1047:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2281              		.loc 1 1047 0
 2282 000c 4FF00103 		mov	r3, #1
 2283 0010 FB61     		str	r3, [r7, #28]
1048:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0UL;
 2284              		.loc 1 1048 0
 2285 0012 4FF00003 		mov	r3, #0
 2286 0016 BB61     		str	r3, [r7, #24]
1049:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1050:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_16_1>>>*/
1051:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2287              		.loc 1 1051 0
 2288 0018 FB68     		ldr	r3, [r7, #12]
 2289 001a DB6B     		ldr	r3, [r3, #60]
 2290 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2291 001e 002B     		cmp	r3, #0
 2292 0020 70D0     		beq	.L80
1052:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1053:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if((PwmFreq == (float)0) || (Duty > (float)100) || (Duty < (float)0))
 2293              		.loc 1 1053 0
 2294 0022 D7ED027A 		flds	s15, [r7, #8]
 2295 0026 F5EE407A 		fcmpzs	s15
 2296 002a F1EE10FA 		fmstat
 2297 002e 0FD0     		beq	.L81
 2298              		.loc 1 1053 0 is_stmt 0 discriminator 1
 2299 0030 97ED017A 		flds	s14, [r7, #4]
 2300 0034 DFED367A 		flds	s15, .L92
 2301 0038 B4EEE77A 		fcmpes	s14, s15
 2302 003c F1EE10FA 		fmstat
 2303 0040 06DC     		bgt	.L81
 2304 0042 D7ED017A 		flds	s15, [r7, #4]
 2305 0046 F5EEC07A 		fcmpezs	s15
 2306 004a F1EE10FA 		fmstat
 2307 004e 03D5     		bpl	.L91
 2308              	.L81:
1054:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1055:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2309              		.loc 1 1055 0 is_stmt 1
 2310 0050 4FF00203 		mov	r3, #2
 2311 0054 FB61     		str	r3, [r7, #28]
 2312 0056 55E0     		b	.L80
 2313              	.L91:
1056:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1057:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1058:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1059:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       fPwmFreq=(float)HandlePtr->kResolution;
 2314              		.loc 1 1059 0
 2315 0058 FB68     		ldr	r3, [r7, #12]
 2316 005a 5B68     		ldr	r3, [r3, #4]	@ float
 2317 005c 7B61     		str	r3, [r7, #20]	@ float
1060:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2318              		.loc 1 1060 0
 2319 005e 97ED057A 		flds	s14, [r7, #20]
 2320 0062 D7ED027A 		flds	s15, [r7, #8]
 2321 0066 67EE277A 		fmuls	s15, s14, s15
 2322 006a C7ED057A 		fsts	s15, [r7, #20]
1061:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2323              		.loc 1 1061 0
 2324 006e 9FED297A 		flds	s14, .L92+4
 2325 0072 D7ED057A 		flds	s15, [r7, #20]
 2326 0076 C7EE277A 		fdivs	s15, s14, s15
 2327 007a FCEEE77A 		ftouizs	s15, s15
 2328 007e C7ED067A 		fsts	s15, [r7, #24]	@ int
1062:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1063:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2329              		.loc 1 1063 0
 2330 0082 FB68     		ldr	r3, [r7, #12]
 2331 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2332 0088 002B     		cmp	r3, #0
 2333 008a 20D1     		bne	.L84
1064:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1065:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2334              		.loc 1 1065 0
 2335 008c BA69     		ldr	r2, [r7, #24]
 2336 008e 4FF6FF73 		movw	r3, #65535
 2337 0092 9A42     		cmp	r2, r3
 2338 0094 03D9     		bls	.L85
1066:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1067:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2339              		.loc 1 1067 0
 2340 0096 4FF00203 		mov	r3, #2
 2341 009a FB61     		str	r3, [r7, #28]
 2342 009c 2AE0     		b	.L86
 2343              	.L85:
1068:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1069:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1070:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1071:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2344              		.loc 1 1071 0
 2345 009e FB68     		ldr	r3, [r7, #12]
 2346 00a0 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2347 00a4 002B     		cmp	r3, #0
 2348 00a6 06D1     		bne	.L87
1072:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1073:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2349              		.loc 1 1073 0
 2350 00a8 FB68     		ldr	r3, [r7, #12]
 2351 00aa 9B69     		ldr	r3, [r3, #24]
 2352 00ac BA69     		ldr	r2, [r7, #24]
 2353 00ae 02F1FF32 		add	r2, r2, #-1
 2354 00b2 5A63     		str	r2, [r3, #52]
 2355 00b4 07E0     		b	.L88
 2356              	.L87:
1074:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1075:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1076:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1077:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2357              		.loc 1 1077 0
 2358 00b6 FB68     		ldr	r3, [r7, #12]
 2359 00b8 9B69     		ldr	r3, [r3, #24]
 2360 00ba BA69     		ldr	r2, [r7, #24]
 2361 00bc 02F1FF32 		add	r2, r2, #-1
 2362 00c0 4FEA5202 		lsr	r2, r2, #1
 2363 00c4 5A63     		str	r2, [r3, #52]
 2364              	.L88:
1078:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1079:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2365              		.loc 1 1079 0
 2366 00c6 4FF00003 		mov	r3, #0
 2367 00ca FB61     		str	r3, [r7, #28]
 2368 00cc 12E0     		b	.L86
 2369              	.L84:
1080:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1081:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1082:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else if((HandlePtr->kTimerConcatenation == (uint8_t)SET) &&\
 2370              		.loc 1 1082 0
 2371 00ce FB68     		ldr	r3, [r7, #12]
 2372 00d0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2373 00d4 012B     		cmp	r3, #1
 2374 00d6 08D1     		bne	.L89
 2375              		.loc 1 1082 0 is_stmt 0 discriminator 1
 2376 00d8 BA69     		ldr	r2, [r7, #24]
 2377 00da 4FF6FF73 		movw	r3, #65535
 2378 00de 9A42     		cmp	r2, r3
 2379 00e0 03D8     		bhi	.L89
1083:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     		                                   (PwmTime <= PWMSP001_MAX_VALUE))
1084:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1085:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     	Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2380              		.loc 1 1085 0 is_stmt 1
 2381 00e2 4FF00203 		mov	r3, #2
 2382 00e6 FB61     		str	r3, [r7, #28]
 2383 00e8 04E0     		b	.L86
 2384              	.L89:
1086:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1087:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1088:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1089:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1090:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2385              		.loc 1 1090 0
 2386 00ea F868     		ldr	r0, [r7, #12]
 2387 00ec B969     		ldr	r1, [r7, #24]
 2388 00ee FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2389 00f2 F861     		str	r0, [r7, #28]
 2390              	.L86:
1091:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1092:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(Status == (uint32_t)DAVEApp_SUCCESS)
 2391              		.loc 1 1092 0
 2392 00f4 FB69     		ldr	r3, [r7, #28]
 2393 00f6 002B     		cmp	r3, #0
 2394 00f8 04D1     		bne	.L80
1093:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1094:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      /* Call the function as per configured mode */
1095:../Dave/Generated/src/PWMSP001/PWMSP001.c ****      HandlePtr->SetDutyFuncPtr((const void*)HandlePtr, Duty);
 2395              		.loc 1 1095 0
 2396 00fa FB68     		ldr	r3, [r7, #12]
 2397 00fc 5B6C     		ldr	r3, [r3, #68]
 2398 00fe F868     		ldr	r0, [r7, #12]
 2399 0100 7968     		ldr	r1, [r7, #4]	@ float
 2400 0102 9847     		blx	r3
 2401              	.L80:
1096:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1097:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    }
1098:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1099:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2402              		.loc 1 1099 0
 2403 0104 FB69     		ldr	r3, [r7, #28]
1100:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2404              		.loc 1 1100 0
 2405 0106 1846     		mov	r0, r3
 2406 0108 07F12007 		add	r7, r7, #32
 2407 010c BD46     		mov	sp, r7
 2408 010e 80BD     		pop	{r7, pc}
 2409              	.L93:
 2410              		.align	2
 2411              	.L92:
 2412 0110 0000C842 		.word	1120403456
 2413 0114 286B6E4E 		.word	1315859240
 2414              		.cfi_endproc
 2415              	.LFE135:
 2417              		.section	.text.PWMSP001_SetPwmFreq,"ax",%progbits
 2418              		.align	2
 2419              		.global	PWMSP001_SetPwmFreq
 2420              		.thumb
 2421              		.thumb_func
 2423              	PWMSP001_SetPwmFreq:
 2424              	.LFB136:
1101:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1102:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1103:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_16>>>*/
1104:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1105:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function changes the PWM frequency. Input parameter is the frequency value
1106:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1107:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPwmFreq
1108:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1109:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1110:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     float PwmFreq
1111:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1112:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2425              		.loc 1 1112 0
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 32
 2428              		@ frame_needed = 1, uses_anonymous_args = 0
 2429 0000 90B5     		push	{r4, r7, lr}
 2430              	.LCFI48:
 2431              		.cfi_def_cfa_offset 12
 2432              		.cfi_offset 4, -12
 2433              		.cfi_offset 7, -8
 2434              		.cfi_offset 14, -4
 2435 0002 89B0     		sub	sp, sp, #36
 2436              	.LCFI49:
 2437              		.cfi_def_cfa_offset 48
 2438 0004 00AF     		add	r7, sp, #0
 2439              	.LCFI50:
 2440              		.cfi_def_cfa_register 7
 2441 0006 7860     		str	r0, [r7, #4]
 2442 0008 3960     		str	r1, [r7, #0]	@ float
1113:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2443              		.loc 1 1113 0
 2444 000a 4FF00103 		mov	r3, #1
 2445 000e FB61     		str	r3, [r7, #28]
1114:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PwmTime = 0x00U;
 2446              		.loc 1 1114 0
 2447 0010 4FF00003 		mov	r3, #0
 2448 0014 BB61     		str	r3, [r7, #24]
1115:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1116:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1117:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1118:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   float fPwmFreq ;
1119:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_UNINITIALIZED))
 2449              		.loc 1 1119 0
 2450 0016 7B68     		ldr	r3, [r7, #4]
 2451 0018 DB6B     		ldr	r3, [r3, #60]
 2452 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2453 001c 002B     		cmp	r3, #0
 2454 001e 7DD0     		beq	.L95
1120:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1121:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmFreq == (float)0)
 2455              		.loc 1 1121 0
 2456 0020 D7ED007A 		flds	s15, [r7, #0]
 2457 0024 F5EE407A 		fcmpzs	s15
 2458 0028 F1EE10FA 		fmstat
 2459 002c 03D1     		bne	.L96
1122:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1123:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2460              		.loc 1 1123 0
 2461 002e 4FF00203 		mov	r3, #2
 2462 0032 FB61     		str	r3, [r7, #28]
 2463 0034 72E0     		b	.L95
 2464              	.L96:
1124:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1125:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1126:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1127:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)HandlePtr->kResolution;
 2465              		.loc 1 1127 0
 2466 0036 7B68     		ldr	r3, [r7, #4]
 2467 0038 5B68     		ldr	r3, [r3, #4]	@ float
 2468 003a 7B61     		str	r3, [r7, #20]	@ float
1128:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  fPwmFreq=(float)fPwmFreq*PwmFreq;
 2469              		.loc 1 1128 0
 2470 003c 97ED057A 		flds	s14, [r7, #20]
 2471 0040 D7ED007A 		flds	s15, [r7, #0]
 2472 0044 67EE277A 		fmuls	s15, s14, s15
 2473 0048 C7ED057A 		fsts	s15, [r7, #20]
1129:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  PwmTime = (uint32_t)((float)1000000000.00 / fPwmFreq);
 2474              		.loc 1 1129 0
 2475 004c 9FED367A 		flds	s14, .L102
 2476 0050 D7ED057A 		flds	s15, [r7, #20]
 2477 0054 C7EE277A 		fdivs	s15, s14, s15
 2478 0058 FCEEE77A 		ftouizs	s15, s15
 2479 005c C7ED067A 		fsts	s15, [r7, #24]	@ int
1130:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_2>>>*/
1131:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)RESET)
 2480              		.loc 1 1131 0
 2481 0060 7B68     		ldr	r3, [r7, #4]
 2482 0062 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2483 0066 002B     		cmp	r3, #0
 2484 0068 32D1     		bne	.L97
1132:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1133:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(PwmTime > PWMSP001_MAX_VALUE)
 2485              		.loc 1 1133 0
 2486 006a BA69     		ldr	r2, [r7, #24]
 2487 006c 4FF6FF73 		movw	r3, #65535
 2488 0070 9A42     		cmp	r2, r3
 2489 0072 03D9     		bls	.L98
1134:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1135:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2490              		.loc 1 1135 0
 2491 0074 4FF00203 		mov	r3, #2
 2492 0078 FB61     		str	r3, [r7, #28]
 2493 007a 4FE0     		b	.L95
 2494              	.L98:
1136:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1137:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1138:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1139:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         if(HandlePtr->CountingModeType == PWMSP001_EDGE_ALIGNED)
 2495              		.loc 1 1139 0
 2496 007c 7B68     		ldr	r3, [r7, #4]
 2497 007e 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2498 0082 002B     		cmp	r3, #0
 2499 0084 06D1     		bne	.L99
1140:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1141:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = PwmTime -(uint32_t)1;
 2500              		.loc 1 1141 0
 2501 0086 7B68     		ldr	r3, [r7, #4]
 2502 0088 9B69     		ldr	r3, [r3, #24]
 2503 008a BA69     		ldr	r2, [r7, #24]
 2504 008c 02F1FF32 		add	r2, r2, #-1
 2505 0090 5A63     		str	r2, [r3, #52]
 2506 0092 07E0     		b	.L100
 2507              	.L99:
1142:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1143:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         else
1144:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         {
1145:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           HandlePtr->CC4yRegsPtr->PRS = (PwmTime - (uint32_t)1) >> (uint32_t)1;
 2508              		.loc 1 1145 0
 2509 0094 7B68     		ldr	r3, [r7, #4]
 2510 0096 9B69     		ldr	r3, [r3, #24]
 2511 0098 BA69     		ldr	r2, [r7, #24]
 2512 009a 02F1FF32 		add	r2, r2, #-1
 2513 009e 4FEA5202 		lsr	r2, r2, #1
 2514 00a2 5A63     		str	r2, [r3, #52]
 2515              	.L100:
1146:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         }
1147:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         /** Update dynamic handle*/
1148:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->FirstSlice); 
 2516              		.loc 1 1148 0
 2517 00a4 7B68     		ldr	r3, [r7, #4]
 2518 00a6 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2519 00aa 4FEA8303 		lsl	r3, r3, #2
 2520 00ae 3B61     		str	r3, [r7, #16]
1149:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp1 );
 2521              		.loc 1 1149 0
 2522 00b0 7B68     		ldr	r3, [r7, #4]
 2523 00b2 5B69     		ldr	r3, [r3, #20]
 2524 00b4 7A68     		ldr	r2, [r7, #4]
 2525 00b6 5269     		ldr	r2, [r2, #20]
 2526 00b8 1169     		ldr	r1, [r2, #16]
 2527 00ba 3A69     		ldr	r2, [r7, #16]
 2528 00bc 4FF00100 		mov	r0, #1
 2529 00c0 00FA02F2 		lsl	r2, r0, r2
 2530 00c4 0A43     		orrs	r2, r2, r1
 2531 00c6 1A61     		str	r2, [r3, #16]
1150:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 2532              		.loc 1 1150 0
 2533 00c8 4FF00003 		mov	r3, #0
 2534 00cc FB61     		str	r3, [r7, #28]
 2535 00ce 25E0     		b	.L95
 2536              	.L97:
1151:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1152:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1153:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_3>>>*/
1154:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1155:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1156:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Status = PWMSP001_lSetPwmFreqTimerConcat(HandlePtr, PwmTime);
 2537              		.loc 1 1156 0
 2538 00d0 7868     		ldr	r0, [r7, #4]
 2539 00d2 B969     		ldr	r1, [r7, #24]
 2540 00d4 FFF7FEFF 		bl	PWMSP001_lSetPwmFreqTimerConcat
 2541 00d8 F861     		str	r0, [r7, #28]
1157:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(Status == (uint32_t)DAVEApp_SUCCESS)
 2542              		.loc 1 1157 0
 2543 00da FB69     		ldr	r3, [r7, #28]
 2544 00dc 002B     		cmp	r3, #0
 2545 00de 1DD1     		bne	.L95
1158:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1159:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 2546              		.loc 1 1159 0
 2547 00e0 7B68     		ldr	r3, [r7, #4]
 2548 00e2 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 2549 00e6 4FEA8303 		lsl	r3, r3, #2
 2550 00ea FB60     		str	r3, [r7, #12]
1160:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Temp3 = (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->SecondSlice);
 2551              		.loc 1 1160 0
 2552 00ec 7B68     		ldr	r3, [r7, #4]
 2553 00ee 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2554 00f2 4FEA8303 		lsl	r3, r3, #2
 2555 00f6 BB60     		str	r3, [r7, #8]
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2556              		.loc 1 1161 0
 2557 00f8 7B68     		ldr	r3, [r7, #4]
 2558 00fa 5B69     		ldr	r3, [r3, #20]
 2559 00fc 7A68     		ldr	r2, [r7, #4]
 2560 00fe 5269     		ldr	r2, [r2, #20]
 2561 0100 1169     		ldr	r1, [r2, #16]
 2562 0102 FA68     		ldr	r2, [r7, #12]
 2563 0104 4FF00100 		mov	r0, #1
 2564 0108 00FA02F0 		lsl	r0, r0, r2
1162:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((uint32_t)0x01 << Temp3));
 2565              		.loc 1 1162 0
 2566 010c BA68     		ldr	r2, [r7, #8]
 2567 010e 4FF00104 		mov	r4, #1
 2568 0112 04FA02F2 		lsl	r2, r4, r2
1161:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         HandlePtr->CC4yKernRegsPtr->GCSS |= (((uint32_t)0x01 << Temp2) | \
 2569              		.loc 1 1161 0
 2570 0116 0243     		orrs	r2, r2, r0
 2571 0118 0A43     		orrs	r2, r2, r1
 2572 011a 1A61     		str	r2, [r3, #16]
 2573              	.L95:
1163:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1164:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1165:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1166:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  }
1167:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2574              		.loc 1 1167 0
 2575 011c FB69     		ldr	r3, [r7, #28]
1168:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2576              		.loc 1 1168 0
 2577 011e 1846     		mov	r0, r3
 2578 0120 07F12407 		add	r7, r7, #36
 2579 0124 BD46     		mov	sp, r7
 2580 0126 90BD     		pop	{r4, r7, pc}
 2581              	.L103:
 2582              		.align	2
 2583              	.L102:
 2584 0128 286B6E4E 		.word	1315859240
 2585              		.cfi_endproc
 2586              	.LFE136:
 2588              		.section	.text.PWMSP001_lSetPwmFreqTimerConcat,"ax",%progbits
 2589              		.align	2
 2590              		.global	PWMSP001_lSetPwmFreqTimerConcat
 2591              		.thumb
 2592              		.thumb_func
 2594              	PWMSP001_lSetPwmFreqTimerConcat:
 2595              	.LFB137:
1169:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1170:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1171:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function is used to set the PWM frequency in case of timer concatenation mode.
1172:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1173:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_lSetPwmFreqTimerConcat
1174:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1175:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1176:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t PwmTime
1177:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1178:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2596              		.loc 1 1178 0
 2597              		.cfi_startproc
 2598              		@ args = 0, pretend = 0, frame = 32
 2599              		@ frame_needed = 1, uses_anonymous_args = 0
 2600              		@ link register save eliminated.
 2601 0000 80B4     		push	{r7}
 2602              	.LCFI51:
 2603              		.cfi_def_cfa_offset 4
 2604              		.cfi_offset 7, -4
 2605 0002 89B0     		sub	sp, sp, #36
 2606              	.LCFI52:
 2607              		.cfi_def_cfa_offset 40
 2608 0004 00AF     		add	r7, sp, #0
 2609              	.LCFI53:
 2610              		.cfi_def_cfa_register 7
 2611 0006 7860     		str	r0, [r7, #4]
 2612 0008 3960     		str	r1, [r7, #0]
1179:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t PeriodVal = PwmTime;
 2613              		.loc 1 1179 0
 2614 000a 3B68     		ldr	r3, [r7, #0]
 2615 000c FB61     		str	r3, [r7, #28]
1180:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t MsbPeriodVal, LsbPeriodVal;
1181:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint8_t Count = 0x00U;
 2616              		.loc 1 1181 0
 2617 000e 4FF00003 		mov	r3, #0
 2618 0012 FB74     		strb	r3, [r7, #19]
1182:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2619              		.loc 1 1182 0
 2620 0014 4FF00103 		mov	r3, #1
 2621 0018 FB60     		str	r3, [r7, #12]
1183:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1184:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if(PwmTime >= PWMSP001_TC_MAX_VALUE)
 2622              		.loc 1 1184 0
 2623 001a 3B68     		ldr	r3, [r7, #0]
 2624 001c B3F1FF3F 		cmp	r3, #-1
 2625 0020 03D1     		bne	.L105
1185:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1186:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_INVALID_PARAM_ERROR;
 2626              		.loc 1 1186 0
 2627 0022 4FF00203 		mov	r3, #2
 2628 0026 FB60     		str	r3, [r7, #12]
 2629 0028 41E0     		b	.L106
 2630              	.L105:
1187:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1188:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1189:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1190:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1191:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1192:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(PwmTime > PWMSP001_MAX_VALUE)
 2631              		.loc 1 1192 0
 2632 002a 3A68     		ldr	r2, [r7, #0]
 2633 002c 4FF6FF73 		movw	r3, #65535
 2634 0030 9A42     		cmp	r2, r3
 2635 0032 17D9     		bls	.L107
 2636              	.L108:
1193:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1194:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       do
1195:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1196:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         PeriodVal = PeriodVal >> 1;
 2637              		.loc 1 1196 0 discriminator 1
 2638 0034 FB69     		ldr	r3, [r7, #28]
 2639 0036 4FEA5303 		lsr	r3, r3, #1
 2640 003a FB61     		str	r3, [r7, #28]
1197:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         Count++;
 2641              		.loc 1 1197 0 discriminator 1
 2642 003c FB7C     		ldrb	r3, [r7, #19]
 2643 003e 03F10103 		add	r3, r3, #1
 2644 0042 FB74     		strb	r3, [r7, #19]
1198:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }while(PeriodVal >= PWMSP001_MAX_VALUE);
 2645              		.loc 1 1198 0 discriminator 1
 2646 0044 FA69     		ldr	r2, [r7, #28]
 2647 0046 4FF6FE73 		movw	r3, #65534
 2648 004a 9A42     		cmp	r2, r3
 2649 004c F2D8     		bhi	.L108
1199:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1200:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = ((uint32_t)1 << Count) -(uint32_t)1;
 2650              		.loc 1 1200 0
 2651 004e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2652 0050 4FF00102 		mov	r2, #1
 2653 0054 02FA03F3 		lsl	r3, r2, r3
 2654 0058 03F1FF33 		add	r3, r3, #-1
 2655 005c BB61     		str	r3, [r7, #24]
1201:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PeriodVal;
 2656              		.loc 1 1201 0
 2657 005e FB69     		ldr	r3, [r7, #28]
 2658 0060 7B61     		str	r3, [r7, #20]
 2659 0062 04E0     		b	.L109
 2660              	.L107:
1202:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1203:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1204:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1205:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = PwmTime;
 2661              		.loc 1 1205 0
 2662 0064 3B68     		ldr	r3, [r7, #0]
 2663 0066 7B61     		str	r3, [r7, #20]
1206:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = (uint32_t)0x00;
 2664              		.loc 1 1206 0
 2665 0068 4FF00003 		mov	r3, #0
 2666 006c BB61     		str	r3, [r7, #24]
 2667              	.L109:
1207:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1208:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1209:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_4>>>*/
1210:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->CountingModeType == PWMSP001_CENTER_ALIGNED)
 2668              		.loc 1 1210 0
 2669 006e 7B68     		ldr	r3, [r7, #4]
 2670 0070 93F83630 		ldrb	r3, [r3, #54]	@ zero_extendqisi2
 2671 0074 012B     		cmp	r3, #1
 2672 0076 07D1     		bne	.L110
1211:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1212:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       MsbPeriodVal = MsbPeriodVal >> (uint32_t)1;
 2673              		.loc 1 1212 0
 2674 0078 BB69     		ldr	r3, [r7, #24]
 2675 007a 4FEA5303 		lsr	r3, r3, #1
 2676 007e BB61     		str	r3, [r7, #24]
1213:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       LsbPeriodVal = LsbPeriodVal >> (uint32_t)1;
 2677              		.loc 1 1213 0
 2678 0080 7B69     		ldr	r3, [r7, #20]
 2679 0082 4FEA5303 		lsr	r3, r3, #1
 2680 0086 7B61     		str	r3, [r7, #20]
 2681              	.L110:
1214:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1215:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1216:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->PRS = LsbPeriodVal & 0xFFFFU;
 2682              		.loc 1 1216 0
 2683 0088 7B68     		ldr	r3, [r7, #4]
 2684 008a 9A69     		ldr	r2, [r3, #24]
 2685 008c 7B69     		ldr	r3, [r7, #20]
 2686 008e 4FEA0343 		lsl	r3, r3, #16
 2687 0092 4FEA1343 		lsr	r3, r3, #16
 2688 0096 5363     		str	r3, [r2, #52]
1217:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->PRS =MsbPeriodVal & 0xFFFFU;
 2689              		.loc 1 1217 0
 2690 0098 7B68     		ldr	r3, [r7, #4]
 2691 009a DA69     		ldr	r2, [r3, #28]
 2692 009c BB69     		ldr	r3, [r7, #24]
 2693 009e 4FEA0343 		lsl	r3, r3, #16
 2694 00a2 4FEA1343 		lsr	r3, r3, #16
 2695 00a6 5363     		str	r3, [r2, #52]
1218:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1219:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*<<<DD_PWMSP001_API_16_5>>>*/
1220:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2696              		.loc 1 1220 0
 2697 00a8 4FF00003 		mov	r3, #0
 2698 00ac FB60     		str	r3, [r7, #12]
 2699              	.L106:
1221:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1222:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 2700              		.loc 1 1222 0
 2701 00ae FB68     		ldr	r3, [r7, #12]
1223:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2702              		.loc 1 1223 0
 2703 00b0 1846     		mov	r0, r3
 2704 00b2 07F12407 		add	r7, r7, #36
 2705 00b6 BD46     		mov	sp, r7
 2706 00b8 80BC     		pop	{r7}
 2707 00ba 7047     		bx	lr
 2708              		.cfi_endproc
 2709              	.LFE137:
 2711              		.section	.text.PWMSP001_SetTimerVal,"ax",%progbits
 2712              		.align	2
 2713              		.global	PWMSP001_SetTimerVal
 2714              		.thumb
 2715              		.thumb_func
 2717              	PWMSP001_SetTimerVal:
 2718              	.LFB138:
1224:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1225:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1226:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1227:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_7>>>*/
1228:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1229:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the timer value.
1230:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1231:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetTimerVal
1232:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1233:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1234:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t TimerVal
1235:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1236:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2719              		.loc 1 1236 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 16
 2722              		@ frame_needed = 1, uses_anonymous_args = 0
 2723              		@ link register save eliminated.
 2724 0000 80B4     		push	{r7}
 2725              	.LCFI54:
 2726              		.cfi_def_cfa_offset 4
 2727              		.cfi_offset 7, -4
 2728 0002 85B0     		sub	sp, sp, #20
 2729              	.LCFI55:
 2730              		.cfi_def_cfa_offset 24
 2731 0004 00AF     		add	r7, sp, #0
 2732              	.LCFI56:
 2733              		.cfi_def_cfa_register 7
 2734 0006 7860     		str	r0, [r7, #4]
 2735 0008 3960     		str	r1, [r7, #0]
1237:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2736              		.loc 1 1237 0
 2737 000a 4FF00103 		mov	r3, #1
 2738 000e FB60     		str	r3, [r7, #12]
1238:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2739              		.loc 1 1239 0
 2740 0010 7B68     		ldr	r3, [r7, #4]
 2741 0012 DB6B     		ldr	r3, [r3, #60]
 2742 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2743 0016 012B     		cmp	r3, #1
 2744 0018 04D0     		beq	.L113
1240:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (HandlePtr->DynamicDataType->StateType != PWMSP001_STOPPED))
 2745              		.loc 1 1240 0 discriminator 1
 2746 001a 7B68     		ldr	r3, [r7, #4]
 2747 001c DB6B     		ldr	r3, [r3, #60]
 2748 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1239:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if ((HandlePtr->DynamicDataType->StateType != PWMSP001_INITIALIZED) &&
 2749              		.loc 1 1239 0 discriminator 1
 2750 0020 032B     		cmp	r3, #3
 2751 0022 15D1     		bne	.L114
 2752              	.L113:
1241:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1242:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1243:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1244:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_7_1>>>*/
1245:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1246:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1247:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegsPtr->TIMER = (uint32_t)TimerVal&0xFFFFU;
 2753              		.loc 1 1247 0
 2754 0024 7B68     		ldr	r3, [r7, #4]
 2755 0026 9A69     		ldr	r2, [r3, #24]
 2756 0028 3B68     		ldr	r3, [r7, #0]
 2757 002a 4FEA0343 		lsl	r3, r3, #16
 2758 002e 4FEA1343 		lsr	r3, r3, #16
 2759 0032 1367     		str	r3, [r2, #112]
1248:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2760              		.loc 1 1248 0
 2761 0034 7B68     		ldr	r3, [r7, #4]
 2762 0036 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2763 003a 012B     		cmp	r3, #1
 2764 003c 05D1     		bne	.L115
1249:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1250:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yRegs1Ptr->TIMER = (uint32_t)((uint32_t)TimerVal>>16U)&0xFFFFU;
 2765              		.loc 1 1250 0
 2766 003e 7B68     		ldr	r3, [r7, #4]
 2767 0040 DB69     		ldr	r3, [r3, #28]
 2768 0042 3A68     		ldr	r2, [r7, #0]
 2769 0044 4FEA1242 		lsr	r2, r2, #16
 2770 0048 1A67     		str	r2, [r3, #112]
 2771              	.L115:
1251:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1252:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2772              		.loc 1 1252 0
 2773 004a 4FF00003 		mov	r3, #0
 2774 004e FB60     		str	r3, [r7, #12]
 2775              	.L114:
1253:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1254:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 2776              		.loc 1 1254 0
 2777 0050 FB68     		ldr	r3, [r7, #12]
1255:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2778              		.loc 1 1255 0
 2779 0052 1846     		mov	r0, r3
 2780 0054 07F11407 		add	r7, r7, #20
 2781 0058 BD46     		mov	sp, r7
 2782 005a 80BC     		pop	{r7}
 2783 005c 7047     		bx	lr
 2784              		.cfi_endproc
 2785              	.LFE138:
 2787 005e 00BF     		.section	.text.PWMSP001_GetTimerStatus,"ax",%progbits
 2788              		.align	2
 2789              		.global	PWMSP001_GetTimerStatus
 2790              		.thumb
 2791              		.thumb_func
 2793              	PWMSP001_GetTimerStatus:
 2794              	.LFB139:
1256:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1257:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_8>>>*/
1258:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1259:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer status - Running or Idle
1260:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1261:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerStatus
1262:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1263:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1264:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* TimerStatus
1265:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1266:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2795              		.loc 1 1266 0
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 16
 2798              		@ frame_needed = 1, uses_anonymous_args = 0
 2799              		@ link register save eliminated.
 2800 0000 80B4     		push	{r7}
 2801              	.LCFI57:
 2802              		.cfi_def_cfa_offset 4
 2803              		.cfi_offset 7, -4
 2804 0002 85B0     		sub	sp, sp, #20
 2805              	.LCFI58:
 2806              		.cfi_def_cfa_offset 24
 2807 0004 00AF     		add	r7, sp, #0
 2808              	.LCFI59:
 2809              		.cfi_def_cfa_register 7
 2810 0006 7860     		str	r0, [r7, #4]
 2811 0008 3960     		str	r1, [r7, #0]
1267:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2812              		.loc 1 1267 0
 2813 000a 4FF00103 		mov	r3, #1
 2814 000e FB60     		str	r3, [r7, #12]
1268:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t SecondTimerStatus = (uint32_t)0;
 2815              		.loc 1 1268 0
 2816 0010 4FF00003 		mov	r3, #0
 2817 0014 BB60     		str	r3, [r7, #8]
1269:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_1>>>*/
1270:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2818              		.loc 1 1270 0
 2819 0016 7B68     		ldr	r3, [r7, #4]
 2820 0018 DB6B     		ldr	r3, [r3, #60]
 2821 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2822 001c 002B     		cmp	r3, #0
 2823 001e 1ED0     		beq	.L118
1271:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1272:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1273:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1274:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_8_2>>>*/
1275:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1276:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1277:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2824              		.loc 1 1277 0
 2825 0020 7B68     		ldr	r3, [r7, #4]
 2826 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2827 0026 012B     		cmp	r3, #1
 2828 0028 0FD1     		bne	.L119
1278:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1279:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SecondTimerStatus = (uint32_t)(RD_REG(HandlePtr->CC4yRegs1Ptr->TCST,
 2829              		.loc 1 1279 0
 2830 002a 7B68     		ldr	r3, [r7, #4]
 2831 002c DB69     		ldr	r3, [r3, #28]
 2832 002e 9B68     		ldr	r3, [r3, #8]
 2833 0030 03F00103 		and	r3, r3, #1
 2834 0034 BB60     		str	r3, [r7, #8]
1280:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos));
1281:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t)((RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2835              		.loc 1 1281 0
 2836 0036 7B68     		ldr	r3, [r7, #4]
 2837 0038 9B69     		ldr	r3, [r3, #24]
 2838 003a 9A68     		ldr	r2, [r3, #8]
 2839 003c BB68     		ldr	r3, [r7, #8]
 2840 003e 1340     		ands	r3, r3, r2
 2841 0040 03F00102 		and	r2, r3, #1
 2842 0044 3B68     		ldr	r3, [r7, #0]
 2843 0046 1A60     		str	r2, [r3, #0]
 2844 0048 06E0     		b	.L120
 2845              	.L119:
1282:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos)) &
1283:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           SecondTimerStatus
1284:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       );
1285:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1286:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1287:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1288:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *TimerStatus = (uint32_t) RD_REG(HandlePtr->CC4yRegsPtr->TCST,
 2846              		.loc 1 1288 0
 2847 004a 7B68     		ldr	r3, [r7, #4]
 2848 004c 9B69     		ldr	r3, [r3, #24]
 2849 004e 9B68     		ldr	r3, [r3, #8]
 2850 0050 03F00102 		and	r2, r3, #1
 2851 0054 3B68     		ldr	r3, [r7, #0]
 2852 0056 1A60     		str	r2, [r3, #0]
 2853              	.L120:
1289:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TCST_TRB_Msk, CCU4_CC4_TCST_TRB_Pos);
1290:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1291:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 2854              		.loc 1 1291 0
 2855 0058 4FF00003 		mov	r3, #0
 2856 005c FB60     		str	r3, [r7, #12]
 2857              	.L118:
1292:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1293:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status; 
 2858              		.loc 1 1293 0
 2859 005e FB68     		ldr	r3, [r7, #12]
1294:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 2860              		.loc 1 1294 0
 2861 0060 1846     		mov	r0, r3
 2862 0062 07F11407 		add	r7, r7, #20
 2863 0066 BD46     		mov	sp, r7
 2864 0068 80BC     		pop	{r7}
 2865 006a 7047     		bx	lr
 2866              		.cfi_endproc
 2867              	.LFE139:
 2869              		.section	.text.PWMSP001_GetTimerRegsVal,"ax",%progbits
 2870              		.align	2
 2871              		.global	PWMSP001_GetTimerRegsVal
 2872              		.thumb
 2873              		.thumb_func
 2875              	PWMSP001_GetTimerRegsVal:
 2876              	.LFB140:
1295:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1296:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_9>>>*/
1297:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1298:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the timer registers.
1299:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1300:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetTimerRegsVal
1301:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1302:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1303:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     PWMSP001_TimerRegsType* TimerRegs
1304:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1305:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 2877              		.loc 1 1305 0
 2878              		.cfi_startproc
 2879              		@ args = 0, pretend = 0, frame = 16
 2880              		@ frame_needed = 1, uses_anonymous_args = 0
 2881              		@ link register save eliminated.
 2882 0000 80B4     		push	{r7}
 2883              	.LCFI60:
 2884              		.cfi_def_cfa_offset 4
 2885              		.cfi_offset 7, -4
 2886 0002 85B0     		sub	sp, sp, #20
 2887              	.LCFI61:
 2888              		.cfi_def_cfa_offset 24
 2889 0004 00AF     		add	r7, sp, #0
 2890              	.LCFI62:
 2891              		.cfi_def_cfa_register 7
 2892 0006 7860     		str	r0, [r7, #4]
 2893 0008 3960     		str	r1, [r7, #0]
1306:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 2894              		.loc 1 1306 0
 2895 000a 4FF00103 		mov	r3, #1
 2896 000e FB60     		str	r3, [r7, #12]
1307:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t ScndSlTMRVal = 0UL;
 2897              		.loc 1 1307 0
 2898 0010 4FF00003 		mov	r3, #0
 2899 0014 BB60     		str	r3, [r7, #8]
1308:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1309:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_1>>>*/
1310:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 2900              		.loc 1 1310 0
 2901 0016 7B68     		ldr	r3, [r7, #4]
 2902 0018 DB6B     		ldr	r3, [r3, #60]
 2903 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2904 001c 002B     		cmp	r3, #0
 2905 001e 5ED0     		beq	.L123
1311:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1312:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1313:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1314:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_9_2>>>*/
1315:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1316:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1317:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 2906              		.loc 1 1317 0
 2907 0020 7B68     		ldr	r3, [r7, #4]
 2908 0022 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2909 0026 012B     		cmp	r3, #1
 2910 0028 43D1     		bne	.L124
1318:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1319:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ScndSlTMRVal = (RD_REG(HandlePtr->CC4yRegs1Ptr->TIMER,
 2911              		.loc 1 1319 0
 2912 002a 7B68     		ldr	r3, [r7, #4]
 2913 002c DB69     		ldr	r3, [r3, #28]
 2914 002e 1B6F     		ldr	r3, [r3, #112]
 2915 0030 4FEA0343 		lsl	r3, r3, #16
 2916 0034 BB60     		str	r3, [r7, #8]
1320:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos) << 16UL);
1321:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
1323:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2917              		.loc 1 1323 0
 2918 0036 7B68     		ldr	r3, [r7, #4]
 2919 0038 9B69     		ldr	r3, [r3, #24]
 2920 003a 1B6F     		ldr	r3, [r3, #112]
 2921 003c 4FEA0343 		lsl	r3, r3, #16
 2922 0040 4FEA1343 		lsr	r3, r3, #16
1322:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)(ScndSlTMRVal |
 2923              		.loc 1 1322 0
 2924 0044 BA68     		ldr	r2, [r7, #8]
 2925 0046 1A43     		orrs	r2, r2, r3
 2926 0048 3B68     		ldr	r3, [r7, #0]
 2927 004a 9A60     		str	r2, [r3, #8]
1324:../Dave/Generated/src/PWMSP001/PWMSP001.c ****               CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos)));
1325:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1326:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegs1Ptr->CRS; 
 2928              		.loc 1 1326 0
 2929 004c 7B68     		ldr	r3, [r7, #4]
 2930 004e DB69     		ldr	r3, [r3, #28]
 2931 0050 DA6B     		ldr	r2, [r3, #60]
 2932 0052 3B68     		ldr	r3, [r7, #0]
 2933 0054 1A60     		str	r2, [r3, #0]
1327:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg*= HandlePtr->CC4yRegsPtr->PRS;
 2934              		.loc 1 1327 0
 2935 0056 3B68     		ldr	r3, [r7, #0]
 2936 0058 1B68     		ldr	r3, [r3, #0]
 2937 005a 7A68     		ldr	r2, [r7, #4]
 2938 005c 9269     		ldr	r2, [r2, #24]
 2939 005e 526B     		ldr	r2, [r2, #52]
 2940 0060 02FB03F2 		mul	r2, r2, r3
 2941 0064 3B68     		ldr	r3, [r7, #0]
 2942 0066 1A60     		str	r2, [r3, #0]
1328:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg += HandlePtr->CC4yRegsPtr->CRS;
 2943              		.loc 1 1328 0
 2944 0068 3B68     		ldr	r3, [r7, #0]
 2945 006a 1A68     		ldr	r2, [r3, #0]
 2946 006c 7B68     		ldr	r3, [r7, #4]
 2947 006e 9B69     		ldr	r3, [r3, #24]
 2948 0070 DB6B     		ldr	r3, [r3, #60]
 2949 0072 D218     		adds	r2, r2, r3
 2950 0074 3B68     		ldr	r3, [r7, #0]
 2951 0076 1A60     		str	r2, [r3, #0]
1329:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegs1Ptr->PRS+ 1U;
 2952              		.loc 1 1329 0
 2953 0078 7B68     		ldr	r3, [r7, #4]
 2954 007a DB69     		ldr	r3, [r3, #28]
 2955 007c 5B6B     		ldr	r3, [r3, #52]
 2956 007e 03F10102 		add	r2, r3, #1
 2957 0082 3B68     		ldr	r3, [r7, #0]
 2958 0084 5A60     		str	r2, [r3, #4]
1330:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg *= (uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 2959              		.loc 1 1330 0
 2960 0086 3B68     		ldr	r3, [r7, #0]
 2961 0088 5A68     		ldr	r2, [r3, #4]
 2962 008a 7B68     		ldr	r3, [r7, #4]
 2963 008c 9B69     		ldr	r3, [r3, #24]
 2964 008e 5B6B     		ldr	r3, [r3, #52]
 2965 0090 4FEA0343 		lsl	r3, r3, #16
 2966 0094 4FEA1343 		lsr	r3, r3, #16
 2967 0098 03F10103 		add	r3, r3, #1
 2968 009c 03FB02F2 		mul	r2, r3, r2
 2969 00a0 3B68     		ldr	r3, [r7, #0]
 2970 00a2 5A60     		str	r2, [r3, #4]
1331:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg += 1U ;
 2971              		.loc 1 1331 0
 2972 00a4 3B68     		ldr	r3, [r7, #0]
 2973 00a6 5B68     		ldr	r3, [r3, #4]
 2974 00a8 03F10102 		add	r2, r3, #1
 2975 00ac 3B68     		ldr	r3, [r7, #0]
 2976 00ae 5A60     		str	r2, [r3, #4]
 2977 00b0 12E0     		b	.L125
 2978              	.L124:
1332:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1333:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1334:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1335:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1336:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->TimerReg = (uint32_t)RD_REG(HandlePtr->CC4yRegsPtr->TIMER,
 2979              		.loc 1 1336 0
 2980 00b2 7B68     		ldr	r3, [r7, #4]
 2981 00b4 9B69     		ldr	r3, [r3, #24]
 2982 00b6 1B6F     		ldr	r3, [r3, #112]
 2983 00b8 4FEA0343 		lsl	r3, r3, #16
 2984 00bc 4FEA1343 		lsr	r3, r3, #16
 2985 00c0 3A68     		ldr	r2, [r7, #0]
 2986 00c2 9360     		str	r3, [r2, #8]
1337:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           CCU4_CC4_TIMER_TVAL_Msk, CCU4_CC4_TIMER_TVAL_Pos);
1338:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1339:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->CompReg = HandlePtr->CC4yRegsPtr->CRS;
 2987              		.loc 1 1339 0
 2988 00c4 7B68     		ldr	r3, [r7, #4]
 2989 00c6 9B69     		ldr	r3, [r3, #24]
 2990 00c8 DA6B     		ldr	r2, [r3, #60]
 2991 00ca 3B68     		ldr	r3, [r7, #0]
 2992 00cc 1A60     		str	r2, [r3, #0]
1340:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       TimerRegs->PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 2993              		.loc 1 1340 0
 2994 00ce 7B68     		ldr	r3, [r7, #4]
 2995 00d0 9B69     		ldr	r3, [r3, #24]
 2996 00d2 5A6B     		ldr	r2, [r3, #52]
 2997 00d4 3B68     		ldr	r3, [r7, #0]
 2998 00d6 5A60     		str	r2, [r3, #4]
 2999              	.L125:
1341:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1342:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1343:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3000              		.loc 1 1343 0
 3001 00d8 4FF00003 		mov	r3, #0
 3002 00dc FB60     		str	r3, [r7, #12]
 3003              	.L123:
1344:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1345:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3004              		.loc 1 1345 0
 3005 00de FB68     		ldr	r3, [r7, #12]
1346:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3006              		.loc 1 1346 0
 3007 00e0 1846     		mov	r0, r3
 3008 00e2 07F11407 		add	r7, r7, #20
 3009 00e6 BD46     		mov	sp, r7
 3010 00e8 80BC     		pop	{r7}
 3011 00ea 7047     		bx	lr
 3012              		.cfi_endproc
 3013              	.LFE140:
 3015              		.section	.text.PWMSP001_GetPeriodReg,"ax",%progbits
 3016              		.align	2
 3017              		.global	PWMSP001_GetPeriodReg
 3018              		.thumb
 3019              		.thumb_func
 3021              	PWMSP001_GetPeriodReg:
 3022              	.LFB141:
1347:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1348:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_15>>>*/
1349:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1350:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function returns the period register value
1351:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1352:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPeriodReg
1353:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1354:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr,
1355:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint32_t* PeriodReg
1356:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1357:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3023              		.loc 1 1357 0
 3024              		.cfi_startproc
 3025              		@ args = 0, pretend = 0, frame = 16
 3026              		@ frame_needed = 1, uses_anonymous_args = 0
 3027              		@ link register save eliminated.
 3028 0000 80B4     		push	{r7}
 3029              	.LCFI63:
 3030              		.cfi_def_cfa_offset 4
 3031              		.cfi_offset 7, -4
 3032 0002 85B0     		sub	sp, sp, #20
 3033              	.LCFI64:
 3034              		.cfi_def_cfa_offset 24
 3035 0004 00AF     		add	r7, sp, #0
 3036              	.LCFI65:
 3037              		.cfi_def_cfa_register 7
 3038 0006 7860     		str	r0, [r7, #4]
 3039 0008 3960     		str	r1, [r7, #0]
1358:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3040              		.loc 1 1358 0
 3041 000a 4FF00103 		mov	r3, #1
 3042 000e FB60     		str	r3, [r7, #12]
1359:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1360:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_15_1>>>*/
1361:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3043              		.loc 1 1361 0
 3044 0010 7B68     		ldr	r3, [r7, #4]
 3045 0012 DB6B     		ldr	r3, [r3, #60]
 3046 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3047 0016 002B     		cmp	r3, #0
 3048 0018 29D0     		beq	.L128
1362:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1363:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1364:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1365:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1366:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1367:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3049              		.loc 1 1367 0
 3050 001a 7B68     		ldr	r3, [r7, #4]
 3051 001c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3052 0020 012B     		cmp	r3, #1
 3053 0022 1CD1     		bne	.L129
1368:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1369:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = (HandlePtr->CC4yRegs1Ptr->PRS + 1U);
 3054              		.loc 1 1369 0
 3055 0024 7B68     		ldr	r3, [r7, #4]
 3056 0026 DB69     		ldr	r3, [r3, #28]
 3057 0028 5B6B     		ldr	r3, [r3, #52]
 3058 002a 03F10102 		add	r2, r3, #1
 3059 002e 3B68     		ldr	r3, [r7, #0]
 3060 0030 1A60     		str	r2, [r3, #0]
1370:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  *=(uint32_t)((HandlePtr->CC4yRegsPtr->PRS & 0xFFFFU) +1U);
 3061              		.loc 1 1370 0
 3062 0032 3B68     		ldr	r3, [r7, #0]
 3063 0034 1A68     		ldr	r2, [r3, #0]
 3064 0036 7B68     		ldr	r3, [r7, #4]
 3065 0038 9B69     		ldr	r3, [r3, #24]
 3066 003a 5B6B     		ldr	r3, [r3, #52]
 3067 003c 4FEA0343 		lsl	r3, r3, #16
 3068 0040 4FEA1343 		lsr	r3, r3, #16
 3069 0044 03F10103 		add	r3, r3, #1
 3070 0048 03FB02F2 		mul	r2, r3, r2
 3071 004c 3B68     		ldr	r3, [r7, #0]
 3072 004e 1A60     		str	r2, [r3, #0]
1371:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg  += 1U;
 3073              		.loc 1 1371 0
 3074 0050 3B68     		ldr	r3, [r7, #0]
 3075 0052 1B68     		ldr	r3, [r3, #0]
 3076 0054 03F10102 		add	r2, r3, #1
 3077 0058 3B68     		ldr	r3, [r7, #0]
 3078 005a 1A60     		str	r2, [r3, #0]
 3079 005c 04E0     		b	.L130
 3080              	.L129:
1372:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1373:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1374:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1375:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       *PeriodReg = HandlePtr->CC4yRegsPtr->PRS;
 3081              		.loc 1 1375 0
 3082 005e 7B68     		ldr	r3, [r7, #4]
 3083 0060 9B69     		ldr	r3, [r3, #24]
 3084 0062 5A6B     		ldr	r2, [r3, #52]
 3085 0064 3B68     		ldr	r3, [r7, #0]
 3086 0066 1A60     		str	r2, [r3, #0]
 3087              	.L130:
1376:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1377:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3088              		.loc 1 1377 0
 3089 0068 4FF00003 		mov	r3, #0
 3090 006c FB60     		str	r3, [r7, #12]
 3091              	.L128:
1378:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1379:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3092              		.loc 1 1379 0
 3093 006e FB68     		ldr	r3, [r7, #12]
1380:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3094              		.loc 1 1380 0
 3095 0070 1846     		mov	r0, r3
 3096 0072 07F11407 		add	r7, r7, #20
 3097 0076 BD46     		mov	sp, r7
 3098 0078 80BC     		pop	{r7}
 3099 007a 7047     		bx	lr
 3100              		.cfi_endproc
 3101              	.LFE141:
 3103              		.section	.text.PWMSP001_SWRequestShadowTransfer,"ax",%progbits
 3104              		.align	2
 3105              		.global	PWMSP001_SWRequestShadowTransfer
 3106              		.thumb
 3107              		.thumb_func
 3109              	PWMSP001_SWRequestShadowTransfer:
 3110              	.LFB142:
1381:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1382:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_10>>>*/
1383:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1384:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This functions enables the shadow transfer of compare and period register values
1385:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1386:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SWRequestShadowTransfer
1387:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1388:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType* HandlePtr
1389:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1390:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3111              		.loc 1 1390 0
 3112              		.cfi_startproc
 3113              		@ args = 0, pretend = 0, frame = 24
 3114              		@ frame_needed = 1, uses_anonymous_args = 0
 3115              		@ link register save eliminated.
 3116 0000 90B4     		push	{r4, r7}
 3117              	.LCFI66:
 3118              		.cfi_def_cfa_offset 8
 3119              		.cfi_offset 4, -8
 3120              		.cfi_offset 7, -4
 3121 0002 86B0     		sub	sp, sp, #24
 3122              	.LCFI67:
 3123              		.cfi_def_cfa_offset 32
 3124 0004 00AF     		add	r7, sp, #0
 3125              	.LCFI68:
 3126              		.cfi_def_cfa_register 7
 3127 0006 7860     		str	r0, [r7, #4]
1391:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3128              		.loc 1 1391 0
 3129 0008 4FF00103 		mov	r3, #1
 3130 000c 7B61     		str	r3, [r7, #20]
1392:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp1;
1393:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp2;
1394:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   uint32_t Temp3;
1395:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1396:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_1>>>*/
1397:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3131              		.loc 1 1397 0
 3132 000e 7B68     		ldr	r3, [r7, #4]
 3133 0010 DB6B     		ldr	r3, [r3, #60]
 3134 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3135 0014 002B     		cmp	r3, #0
 3136 0016 38D0     		beq	.L133
1398:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1399:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_ERROR(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1400:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1401:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_10_2>>>*/
1402:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1403:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1404:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     /*Request shadow transfer for the First Slice*/
1405:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3137              		.loc 1 1405 0
 3138 0018 7B68     		ldr	r3, [r7, #4]
 3139 001a 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3140 001e 012B     		cmp	r3, #1
 3141 0020 1ED1     		bne	.L134
1406:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1407:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /*Request shadow transfer for the Second Slice*/
1408:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp1 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4 * (uint32_t)HandlePtr->FirstSlice);
 3142              		.loc 1 1408 0
 3143 0022 7B68     		ldr	r3, [r7, #4]
 3144 0024 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3145 0028 4FEA8303 		lsl	r3, r3, #2
 3146 002c 3B61     		str	r3, [r7, #16]
1409:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp2 = (uint32_t)CCU4_GCSS_S0SE_Pos + ((uint32_t)4*(uint32_t)HandlePtr->SecondSlice);
 3147              		.loc 1 1409 0
 3148 002e 7B68     		ldr	r3, [r7, #4]
 3149 0030 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 3150 0034 4FEA8303 		lsl	r3, r3, #2
 3151 0038 FB60     		str	r3, [r7, #12]
1410:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |=  ((uint32_t)0x01 << Temp1) | ((uint32_t)0x01 << Temp2);
 3152              		.loc 1 1410 0
 3153 003a 7B68     		ldr	r3, [r7, #4]
 3154 003c 5B69     		ldr	r3, [r3, #20]
 3155 003e 7A68     		ldr	r2, [r7, #4]
 3156 0040 5269     		ldr	r2, [r2, #20]
 3157 0042 1169     		ldr	r1, [r2, #16]
 3158 0044 3A69     		ldr	r2, [r7, #16]
 3159 0046 4FF00100 		mov	r0, #1
 3160 004a 00FA02F0 		lsl	r0, r0, r2
 3161 004e FA68     		ldr	r2, [r7, #12]
 3162 0050 4FF00104 		mov	r4, #1
 3163 0054 04FA02F2 		lsl	r2, r4, r2
 3164 0058 0243     		orrs	r2, r2, r0
 3165 005a 0A43     		orrs	r2, r2, r1
 3166 005c 1A61     		str	r2, [r3, #16]
 3167 005e 11E0     		b	.L135
 3168              	.L134:
1411:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1412:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1413:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1414:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       Temp3 =  (uint32_t)CCU4_GCSS_S0SE_Pos + (4U * (uint32_t)HandlePtr->FirstSlice);
 3169              		.loc 1 1414 0
 3170 0060 7B68     		ldr	r3, [r7, #4]
 3171 0062 93F83730 		ldrb	r3, [r3, #55]	@ zero_extendqisi2
 3172 0066 4FEA8303 		lsl	r3, r3, #2
 3173 006a BB60     		str	r3, [r7, #8]
1415:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       HandlePtr->CC4yKernRegsPtr->GCSS |= ((uint32_t)0x01 << Temp3);
 3174              		.loc 1 1415 0
 3175 006c 7B68     		ldr	r3, [r7, #4]
 3176 006e 5B69     		ldr	r3, [r3, #20]
 3177 0070 7A68     		ldr	r2, [r7, #4]
 3178 0072 5269     		ldr	r2, [r2, #20]
 3179 0074 1169     		ldr	r1, [r2, #16]
 3180 0076 BA68     		ldr	r2, [r7, #8]
 3181 0078 4FF00100 		mov	r0, #1
 3182 007c 00FA02F2 		lsl	r2, r0, r2
 3183 0080 0A43     		orrs	r2, r2, r1
 3184 0082 1A61     		str	r2, [r3, #16]
 3185              	.L135:
1416:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1417:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3186              		.loc 1 1417 0
 3187 0084 4FF00003 		mov	r3, #0
 3188 0088 7B61     		str	r3, [r7, #20]
 3189              	.L133:
1418:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1419:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return Status;
 3190              		.loc 1 1419 0
 3191 008a 7B69     		ldr	r3, [r7, #20]
1420:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3192              		.loc 1 1420 0
 3193 008c 1846     		mov	r0, r3
 3194 008e 07F11807 		add	r7, r7, #24
 3195 0092 BD46     		mov	sp, r7
 3196 0094 90BC     		pop	{r4, r7}
 3197 0096 7047     		bx	lr
 3198              		.cfi_endproc
 3199              	.LFE142:
 3201              		.section	.text.PWMSP001_ResetTrapFlag,"ax",%progbits
 3202              		.align	2
 3203              		.global	PWMSP001_ResetTrapFlag
 3204              		.thumb
 3205              		.thumb_func
 3207              	PWMSP001_ResetTrapFlag:
 3208              	.LFB143:
1421:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1422:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_API_13>>>*/
1423:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1424:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function resets the trap flag if trap condition is inactive
1425:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1426:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_ResetTrapFlag(const PWMSP001_HandleType* HandlePtr)
1427:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3209              		.loc 1 1427 0
 3210              		.cfi_startproc
 3211              		@ args = 0, pretend = 0, frame = 8
 3212              		@ frame_needed = 1, uses_anonymous_args = 0
 3213              		@ link register save eliminated.
 3214 0000 80B4     		push	{r7}
 3215              	.LCFI69:
 3216              		.cfi_def_cfa_offset 4
 3217              		.cfi_offset 7, -4
 3218 0002 83B0     		sub	sp, sp, #12
 3219              	.LCFI70:
 3220              		.cfi_def_cfa_offset 16
 3221 0004 00AF     		add	r7, sp, #0
 3222              	.LCFI71:
 3223              		.cfi_def_cfa_register 7
 3224 0006 7860     		str	r0, [r7, #4]
1428:../Dave/Generated/src/PWMSP001/PWMSP001.c ****    if (HandlePtr->kTrapExitControl == (uint8_t)SET)
 3225              		.loc 1 1428 0
 3226 0008 7B68     		ldr	r3, [r7, #4]
 3227 000a DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 3228 000c 012B     		cmp	r3, #1
 3229 000e 18D1     		bne	.L138
1429:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1430:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3230              		.loc 1 1430 0
 3231 0010 7B68     		ldr	r3, [r7, #4]
 3232 0012 9B69     		ldr	r3, [r3, #24]
 3233 0014 7A68     		ldr	r2, [r7, #4]
 3234 0016 9269     		ldr	r2, [r2, #24]
 3235 0018 D2F8B020 		ldr	r2, [r2, #176]
 3236 001c 42F48062 		orr	r2, r2, #1024
 3237 0020 C3F8B020 		str	r2, [r3, #176]
1431:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3238              		.loc 1 1431 0
 3239 0024 7B68     		ldr	r3, [r7, #4]
 3240 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3241 002a 012B     		cmp	r3, #1
 3242 002c 09D1     		bne	.L138
1432:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1433:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_EVENT2_INTERRUPT);
 3243              		.loc 1 1433 0
 3244 002e 7B68     		ldr	r3, [r7, #4]
 3245 0030 DB69     		ldr	r3, [r3, #28]
 3246 0032 7A68     		ldr	r2, [r7, #4]
 3247 0034 D269     		ldr	r2, [r2, #28]
 3248 0036 D2F8B020 		ldr	r2, [r2, #176]
 3249 003a 42F48062 		orr	r2, r2, #1024
 3250 003e C3F8B020 		str	r2, [r3, #176]
 3251              	.L138:
1434:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1435:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1436:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     SET_BIT(HandlePtr->CC4yRegsPtr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3252              		.loc 1 1436 0
 3253 0042 7B68     		ldr	r3, [r7, #4]
 3254 0044 9B69     		ldr	r3, [r3, #24]
 3255 0046 7A68     		ldr	r2, [r7, #4]
 3256 0048 9269     		ldr	r2, [r2, #24]
 3257 004a D2F8B020 		ldr	r2, [r2, #176]
 3258 004e 42F40062 		orr	r2, r2, #2048
 3259 0052 C3F8B020 		str	r2, [r3, #176]
1437:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if (HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3260              		.loc 1 1437 0
 3261 0056 7B68     		ldr	r3, [r7, #4]
 3262 0058 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3263 005c 012B     		cmp	r3, #1
 3264 005e 09D1     		bne	.L137
1438:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1439:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR, PWMSP001_TRAP_FLAG_CLEAR);
 3265              		.loc 1 1439 0
 3266 0060 7B68     		ldr	r3, [r7, #4]
 3267 0062 DB69     		ldr	r3, [r3, #28]
 3268 0064 7A68     		ldr	r2, [r7, #4]
 3269 0066 D269     		ldr	r2, [r2, #28]
 3270 0068 D2F8B020 		ldr	r2, [r2, #176]
 3271 006c 42F40062 		orr	r2, r2, #2048
 3272 0070 C3F8B020 		str	r2, [r3, #176]
 3273              	.L137:
1440:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1441:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3274              		.loc 1 1441 0
 3275 0074 07F10C07 		add	r7, r7, #12
 3276 0078 BD46     		mov	sp, r7
 3277 007a 80BC     		pop	{r7}
 3278 007c 7047     		bx	lr
 3279              		.cfi_endproc
 3280              	.LFE143:
 3282 007e 00BF     		.section	.text.PWMSP001_lConfigureSecondSlice,"ax",%progbits
 3283              		.align	2
 3284              		.global	PWMSP001_lConfigureSecondSlice
 3285              		.thumb
 3286              		.thumb_func
 3288              	PWMSP001_lConfigureSecondSlice:
 3289              	.LFB144:
1442:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1443:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*<<<DD_PWMSP001_nonAPI_1>>>*/
1444:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /*
1445:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function configures second slice.
1446:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1447:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1448:../Dave/Generated/src/PWMSP001/PWMSP001.c **** void PWMSP001_lConfigureSecondSlice(const PWMSP001_HandleType* HandlePtr)
1449:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3290              		.loc 1 1449 0
 3291              		.cfi_startproc
 3292              		@ args = 0, pretend = 0, frame = 8
 3293              		@ frame_needed = 1, uses_anonymous_args = 0
 3294              		@ link register save eliminated.
 3295 0000 90B4     		push	{r4, r7}
 3296              	.LCFI72:
 3297              		.cfi_def_cfa_offset 8
 3298              		.cfi_offset 4, -8
 3299              		.cfi_offset 7, -4
 3300 0002 82B0     		sub	sp, sp, #8
 3301              	.LCFI73:
 3302              		.cfi_def_cfa_offset 16
 3303 0004 00AF     		add	r7, sp, #0
 3304              	.LCFI74:
 3305              		.cfi_def_cfa_register 7
 3306 0006 7860     		str	r0, [r7, #4]
1450:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TCCLR = PWMSP001_SLICE_CLEAR;
 3307              		.loc 1 1450 0
 3308 0008 7B68     		ldr	r3, [r7, #4]
 3309 000a DB69     		ldr	r3, [r3, #28]
 3310 000c 4FF00702 		mov	r2, #7
 3311 0010 1A61     		str	r2, [r3, #16]
1451:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1452:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*Set period and compare values for second slice*/
1453:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PRS = (uint32_t)((HandlePtr->kPeriodVal & 0xFFFF0000U)
 3312              		.loc 1 1453 0
 3313 0012 7B68     		ldr	r3, [r7, #4]
 3314 0014 DB69     		ldr	r3, [r3, #28]
 3315 0016 7A68     		ldr	r2, [r7, #4]
 3316 0018 926A     		ldr	r2, [r2, #40]
 3317 001a 4FEA1242 		lsr	r2, r2, #16
 3318 001e 5A63     		str	r2, [r3, #52]
1454:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1455:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CRS =(uint32_t)((HandlePtr->kCompareValue & 0xFFFF0000U)
 3319              		.loc 1 1455 0
 3320 0020 7B68     		ldr	r3, [r7, #4]
 3321 0022 DB69     		ldr	r3, [r3, #28]
 3322 0024 7A68     		ldr	r2, [r7, #4]
 3323 0026 9268     		ldr	r2, [r2, #8]
 3324 0028 4FEA1242 		lsr	r2, r2, #16
 3325 002c DA63     		str	r2, [r3, #60]
1456:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       >> 16U);
1457:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1458:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TCE_Pos);
 3326              		.loc 1 1458 0
 3327 002e 7B68     		ldr	r3, [r7, #4]
 3328 0030 DB69     		ldr	r3, [r3, #28]
 3329 0032 7A68     		ldr	r2, [r7, #4]
 3330 0034 D269     		ldr	r2, [r2, #28]
 3331 0036 5268     		ldr	r2, [r2, #4]
 3332 0038 42F48012 		orr	r2, r2, #1048576
 3333 003c 5A60     		str	r2, [r3, #4]
1459:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1460:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_3>>>*/
1461:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kExtStopTrig == (uint8_t)SET)
 3334              		.loc 1 1461 0
 3335 003e 7B68     		ldr	r3, [r7, #4]
 3336 0040 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 3337 0042 012B     		cmp	r3, #1
 3338 0044 27D1     		bne	.L141
1462:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1463:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS &=(uint32_t) ~(CCU4_CC4_INS_EV1EM_Msk | (uint32_t)CCU4_CC4_INS_LPF
 3339              		.loc 1 1463 0
 3340 0046 7B68     		ldr	r3, [r7, #4]
 3341 0048 DA69     		ldr	r2, [r3, #28]
 3342 004a 7B68     		ldr	r3, [r7, #4]
 3343 004c DB69     		ldr	r3, [r3, #28]
 3344 004e 1B68     		ldr	r3, [r3, #0]
 3345 0050 23F0C053 		bic	r3, r3, #402653184
 3346 0054 23F44023 		bic	r3, r3, #786432
 3347 0058 1360     		str	r3, [r2, #0]
1464:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &=(uint32_t) ~(CCU4_CC4_CMC_ENDS_Msk);
 3348              		.loc 1 1464 0
 3349 005a 7B68     		ldr	r3, [r7, #4]
 3350 005c DB69     		ldr	r3, [r3, #28]
 3351 005e 7A68     		ldr	r2, [r7, #4]
 3352 0060 D269     		ldr	r2, [r2, #28]
 3353 0062 5268     		ldr	r2, [r2, #4]
 3354 0064 22F00C02 		bic	r2, r2, #12
 3355 0068 5A60     		str	r2, [r3, #4]
1465:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->INS |=(uint32_t)((((uint32_t)HandlePtr->kStopEdge  <<   \
 3356              		.loc 1 1465 0
 3357 006a 7B68     		ldr	r3, [r7, #4]
 3358 006c DB69     		ldr	r3, [r3, #28]
 3359 006e 7A68     		ldr	r2, [r7, #4]
 3360 0070 D269     		ldr	r2, [r2, #28]
 3361 0072 1168     		ldr	r1, [r2, #0]
 3362 0074 7A68     		ldr	r2, [r7, #4]
 3363 0076 92F82420 		ldrb	r2, [r2, #36]	@ zero_extendqisi2
 3364 007a 4FEA8242 		lsl	r2, r2, #18
 3365 007e 02F44022 		and	r2, r2, #786432
 3366 0082 0A43     		orrs	r2, r2, r1
 3367 0084 1A60     		str	r2, [r3, #0]
1466:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_INS_EV1EM_Pos)& (uint32_t)CCU4_CC4_INS_EV1EM_Msk) | \
1467:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (((uint32_t)PWMSP001_LPF << (uint32_t)CCU4_CC4_INS_LPF1M_Pos)& \
1468:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_INS_LPF1M_Msk));
1469:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= (((uint32_t)PWMSP001_EVENT_1  <<  \
 3368              		.loc 1 1469 0
 3369 0086 7B68     		ldr	r3, [r7, #4]
 3370 0088 DB69     		ldr	r3, [r3, #28]
 3371 008a 7A68     		ldr	r2, [r7, #4]
 3372 008c D269     		ldr	r2, [r2, #28]
 3373 008e 5268     		ldr	r2, [r2, #4]
 3374 0090 42F00802 		orr	r2, r2, #8
 3375 0094 5A60     		str	r2, [r3, #4]
 3376              	.L141:
1470:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_CMC_ENDS_Pos)& (uint32_t)CCU4_CC4_CMC_ENDS_Msk);
1471:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kExtStopTrig == SET)*/
1472:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1473:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_nonAPI_1_4>>>*/
1474:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->kTrapEnable == (uint8_t)SET)
 3377              		.loc 1 1474 0
 3378 0096 7B68     		ldr	r3, [r7, #4]
 3379 0098 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 3380 009a 012B     		cmp	r3, #1
 3381 009c 26D1     		bne	.L142
1475:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1476:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS &=(uint32_t) ~(CCU4_CC4_INS_EV2EM_Msk | CCU4_CC4_INS_EV2LM_Msk 
 3382              		.loc 1 1476 0
 3383 009e 7B68     		ldr	r3, [r7, #4]
 3384 00a0 DA69     		ldr	r2, [r3, #28]
 3385 00a2 7B68     		ldr	r3, [r7, #4]
 3386 00a4 DB69     		ldr	r3, [r3, #28]
 3387 00a6 1B68     		ldr	r3, [r3, #0]
 3388 00a8 23F0C243 		bic	r3, r3, #1627389952
 3389 00ac 23F44013 		bic	r3, r3, #3145728
 3390 00b0 1360     		str	r3, [r2, #0]
1477:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         | CCU4_CC4_INS_LPF2M_Msk);
1478:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC &= (uint32_t)~(CCU4_CC4_CMC_TS_Msk);
 3391              		.loc 1 1478 0
 3392 00b2 7B68     		ldr	r3, [r7, #4]
 3393 00b4 DB69     		ldr	r3, [r3, #28]
 3394 00b6 7A68     		ldr	r2, [r7, #4]
 3395 00b8 D269     		ldr	r2, [r2, #28]
 3396 00ba 5268     		ldr	r2, [r2, #4]
 3397 00bc 22F40032 		bic	r2, r2, #131072
 3398 00c0 5A60     		str	r2, [r3, #4]
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3399              		.loc 1 1479 0
 3400 00c2 7B68     		ldr	r3, [r7, #4]
 3401 00c4 DB69     		ldr	r3, [r3, #28]
 3402 00c6 7A68     		ldr	r2, [r7, #4]
 3403 00c8 D269     		ldr	r2, [r2, #28]
 3404 00ca 1168     		ldr	r1, [r2, #0]
1480:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         ((((uint32_t)0x00 << CCU4_CC4_INS_EV2EM_Pos)& (uint32_t)CCU4_CC4_INS_EV2EM_Msk) | \
1481:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             ((((uint32_t)HandlePtr->kTrapLevel  <<	\
 3405              		.loc 1 1481 0
 3406 00cc 7A68     		ldr	r2, [r7, #4]
 3407 00ce 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 3408 00d0 4FEA0262 		lsl	r2, r2, #24
1479:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr -> INS |= (uint32_t) \
 3409              		.loc 1 1479 0
 3410 00d4 02F08072 		and	r2, r2, #16777216
 3411 00d8 0A43     		orrs	r2, r2, r1
 3412 00da 1A60     		str	r2, [r3, #0]
1482:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 CCU4_CC4_INS_EV2LM_Pos)& (uint32_t)CCU4_CC4_INS_EV2LM_Msk) | (((uint32_t)0x00  << \
1483:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                     CCU4_CC4_INS_LPF2M_Pos)& (uint32_t)CCU4_CC4_INS_LPF2M_Msk)));
1484:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     HandlePtr->CC4yRegs1Ptr->CMC |= ((uint32_t)0x01 << (uint32_t)CCU4_CC4_CMC_TS_Pos);
 3413              		.loc 1 1484 0
 3414 00dc 7B68     		ldr	r3, [r7, #4]
 3415 00de DB69     		ldr	r3, [r3, #28]
 3416 00e0 7A68     		ldr	r2, [r7, #4]
 3417 00e2 D269     		ldr	r2, [r2, #28]
 3418 00e4 5268     		ldr	r2, [r2, #4]
 3419 00e6 42F40032 		orr	r2, r2, #131072
 3420 00ea 5A60     		str	r2, [r3, #4]
 3421              	.L142:
1485:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }/*End of if (HandlePtr->kTrapEnable == SET)*/
1486:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1487:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC &=(uint32_t) ~(CCU4_CC4_TC_TCM_Msk | CCU4_CC4_TC_TSSM_Msk
 3422              		.loc 1 1487 0
 3423 00ec 7B68     		ldr	r3, [r7, #4]
 3424 00ee DA69     		ldr	r2, [r3, #28]
 3425 00f0 7B68     		ldr	r3, [r7, #4]
 3426 00f2 DB69     		ldr	r3, [r3, #28]
 3427 00f4 5B69     		ldr	r3, [r3, #20]
 3428 00f6 23F4CE43 		bic	r3, r3, #26368
 3429 00fa 23F00B03 		bic	r3, r3, #11
 3430 00fe 5361     		str	r3, [r2, #20]
1488:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_CMOD_Msk | CCU4_CC4_TC_STRM_Msk | CCU4_CC4_TC_ENDM_Msk
1489:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       | CCU4_CC4_TC_DITHE_Msk);
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3431              		.loc 1 1490 0
 3432 0100 7B68     		ldr	r3, [r7, #4]
 3433 0102 DB69     		ldr	r3, [r3, #28]
 3434 0104 7A68     		ldr	r2, [r7, #4]
 3435 0106 92F83620 		ldrb	r2, [r2, #54]	@ zero_extendqisi2
1491:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_TC_TCM_Pos)& (uint32_t)CCU4_CC4_TC_TCM_Msk)|	\
 3436              		.loc 1 1491 0
 3437 010a 02F00101 		and	r1, r2, #1
1492:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (((uint32_t)HandlePtr->kTimerMode  << (uint32_t)CCU4_CC4_TC_TSSM_Pos)& \
 3438              		.loc 1 1492 0
 3439 010e 7A68     		ldr	r2, [r7, #4]
 3440 0110 127B     		ldrb	r2, [r2, #12]	@ zero_extendqisi2
 3441 0112 4FEA4202 		lsl	r2, r2, #1
 3442 0116 02F00202 		and	r2, r2, #2
1493:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)CCU4_CC4_TC_TSSM_Msk)|(((uint32_t)PWMSP001_COMPARE_MODE  << \
 3443              		.loc 1 1493 0
 3444 011a 1143     		orrs	r1, r1, r2
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
1495:../Dave/Generated/src/PWMSP001/PWMSP001.c ****             (((uint32_t)HandlePtr->ExtStartConfigType << (uint32_t)CCU4_CC4_TC_STRM_Pos)\
 3445              		.loc 1 1495 0
 3446 011c 7A68     		ldr	r2, [r7, #4]
 3447 011e 92F83420 		ldrb	r2, [r2, #52]	@ zero_extendqisi2
 3448 0122 4FEA8222 		lsl	r2, r2, #10
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3449              		.loc 1 1496 0
 3450 0126 02F48062 		and	r2, r2, #1024
1494:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		  (uint32_t)CCU4_CC4_TC_CMOD_Pos)& (uint32_t)CCU4_CC4_TC_CMOD_Msk)| \
 3451              		.loc 1 1494 0
 3452 012a 1143     		orrs	r1, r1, r2
 3453              		.loc 1 1496 0
 3454 012c 7A68     		ldr	r2, [r7, #4]
 3455 012e 92F83520 		ldrb	r2, [r2, #53]	@ zero_extendqisi2
 3456 0132 4FEA0222 		lsl	r2, r2, #8
1497:../Dave/Generated/src/PWMSP001/PWMSP001.c ****                 (uint32_t)CCU4_CC4_TC_ENDM_Pos)& (uint32_t)CCU4_CC4_TC_ENDM_Msk);
 3457              		.loc 1 1497 0
 3458 0136 02F44072 		and	r2, r2, #768
1496:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 			  &(uint32_t)CCU4_CC4_TC_STRM_Msk)| (((uint32_t)HandlePtr->ExtStopConfigType <<	\
 3459              		.loc 1 1496 0
 3460 013a 0A43     		orrs	r2, r2, r1
1490:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC =	(((uint32_t)HandlePtr->CountingModeType  << \
 3461              		.loc 1 1490 0
 3462 013c 5A61     		str	r2, [r3, #20]
1498:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1499:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_5>>>*/
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3463              		.loc 1 1500 0
 3464 013e 7B68     		ldr	r3, [r7, #4]
 3465 0140 DB69     		ldr	r3, [r3, #28]
 3466 0142 7A68     		ldr	r2, [r7, #4]
 3467 0144 D269     		ldr	r2, [r2, #28]
 3468 0146 5169     		ldr	r1, [r2, #20]
 3469 0148 7A68     		ldr	r2, [r7, #4]
 3470 014a 92F82120 		ldrb	r2, [r2, #33]	@ zero_extendqisi2
 3471 014e 4FEA4232 		lsl	r2, r2, #13
1501:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     &(uint32_t)CCU4_CC4_TC_DITHE_Msk;
 3472              		.loc 1 1501 0
 3473 0152 02F4C042 		and	r2, r2, #24576
1500:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->TC |= ((uint32_t)HandlePtr->kDitherSetting << (uint32_t)CCU4_CC4_TC_DITH
 3474              		.loc 1 1500 0
 3475 0156 0A43     		orrs	r2, r2, r1
 3476 0158 5A61     		str	r2, [r3, #20]
1502:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->DITS, (uint32_t)CCU4_CC4_DITS_DCVS_Msk, \
 3477              		.loc 1 1502 0
 3478 015a 7B68     		ldr	r3, [r7, #4]
 3479 015c DB69     		ldr	r3, [r3, #28]
 3480 015e 7A68     		ldr	r2, [r7, #4]
 3481 0160 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 3482 0162 02F00F01 		and	r1, r2, #15
 3483 0166 7A68     		ldr	r2, [r7, #4]
 3484 0168 D269     		ldr	r2, [r2, #28]
 3485 016a 126A     		ldr	r2, [r2, #32]
 3486 016c 22F00F02 		bic	r2, r2, #15
 3487 0170 0A43     		orrs	r2, r2, r1
 3488 0172 1A62     		str	r2, [r3, #32]
1503:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     (uint32_t)CCU4_CC4_DITS_DCVS_Pos, HandlePtr->kDitherCompare);
1504:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1505:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   /*<<<DD_PWMSP001_API_non1_6>>>*/
1506:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSE_Msk,
 3489              		.loc 1 1506 0
 3490 0174 7B68     		ldr	r3, [r7, #4]
 3491 0176 DB69     		ldr	r3, [r3, #28]
 3492 0178 7A68     		ldr	r2, [r7, #4]
 3493 017a 927C     		ldrb	r2, [r2, #18]	@ zero_extendqisi2
 3494 017c 4FEA4252 		lsl	r2, r2, #21
 3495 0180 02F40011 		and	r1, r2, #2097152
 3496 0184 7A68     		ldr	r2, [r7, #4]
 3497 0186 D269     		ldr	r2, [r2, #28]
 3498 0188 5269     		ldr	r2, [r2, #20]
 3499 018a 22F40012 		bic	r2, r2, #2097152
 3500 018e 0A43     		orrs	r2, r2, r1
 3501 0190 5A61     		str	r2, [r3, #20]
1507:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSE_Pos, HandlePtr->kTrapSync);
1508:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1509:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRPSW_Msk,
 3502              		.loc 1 1509 0
 3503 0192 7B68     		ldr	r3, [r7, #4]
 3504 0194 DB69     		ldr	r3, [r3, #28]
 3505 0196 7A68     		ldr	r2, [r7, #4]
 3506 0198 D27C     		ldrb	r2, [r2, #19]	@ zero_extendqisi2
 3507 019a 4FEA8252 		lsl	r2, r2, #22
 3508 019e 02F48001 		and	r1, r2, #4194304
 3509 01a2 7A68     		ldr	r2, [r7, #4]
 3510 01a4 D269     		ldr	r2, [r2, #28]
 3511 01a6 5269     		ldr	r2, [r2, #20]
 3512 01a8 22F48002 		bic	r2, r2, #4194304
 3513 01ac 0A43     		orrs	r2, r2, r1
 3514 01ae 5A61     		str	r2, [r3, #20]
1510:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_TC_TRPSW_Pos, HandlePtr->kTrapExitControl);
1511:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1512:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->TC, (uint32_t)CCU4_CC4_TC_TRAPE_Msk,\
 3515              		.loc 1 1512 0
 3516 01b0 7B68     		ldr	r3, [r7, #4]
 3517 01b2 DB69     		ldr	r3, [r3, #28]
 3518 01b4 7A68     		ldr	r2, [r7, #4]
 3519 01b6 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3520 01b8 4FEA4242 		lsl	r2, r2, #17
 3521 01bc 02F40031 		and	r1, r2, #131072
 3522 01c0 7A68     		ldr	r2, [r7, #4]
 3523 01c2 D269     		ldr	r2, [r2, #28]
 3524 01c4 5269     		ldr	r2, [r2, #20]
 3525 01c6 22F40032 		bic	r2, r2, #131072
 3526 01ca 0A43     		orrs	r2, r2, r1
 3527 01cc 5A61     		str	r2, [r3, #20]
1513:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  (uint32_t)CCU4_CC4_TC_TRAPE_Pos, HandlePtr->kTrapEnable);
1514:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   
1515:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   WR_REG(HandlePtr->CC4yRegs1Ptr->PSC, (uint32_t)CCU4_CC4_PSC_PSIV_Msk, 
 3528              		.loc 1 1515 0
 3529 01ce 7B68     		ldr	r3, [r7, #4]
 3530 01d0 DB69     		ldr	r3, [r3, #28]
 3531 01d2 7A68     		ldr	r2, [r7, #4]
 3532 01d4 92F82220 		ldrb	r2, [r2, #34]	@ zero_extendqisi2
 3533 01d8 02F00F01 		and	r1, r2, #15
 3534 01dc 7A68     		ldr	r2, [r7, #4]
 3535 01de D269     		ldr	r2, [r2, #28]
 3536 01e0 526A     		ldr	r2, [r2, #36]
 3537 01e2 22F00F02 		bic	r2, r2, #15
 3538 01e6 0A43     		orrs	r2, r2, r1
 3539 01e8 5A62     		str	r2, [r3, #36]
1516:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       (uint32_t)CCU4_CC4_PSC_PSIV_Pos, HandlePtr->kCCUPrescalar);
1517:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1518:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yRegs1Ptr->PSL = HandlePtr->kPassiveLevel;
 3540              		.loc 1 1518 0
 3541 01ea 7B68     		ldr	r3, [r7, #4]
 3542 01ec DB69     		ldr	r3, [r3, #28]
 3543 01ee 7A68     		ldr	r2, [r7, #4]
 3544 01f0 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 3545 01f2 9A61     		str	r2, [r3, #24]
1519:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3546              		.loc 1 1520 0
 3547 01f4 7B68     		ldr	r3, [r7, #4]
 3548 01f6 5B69     		ldr	r3, [r3, #20]
 3549 01f8 7A68     		ldr	r2, [r7, #4]
 3550 01fa 5269     		ldr	r2, [r2, #20]
 3551 01fc 1169     		ldr	r1, [r2, #16]
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3552              		.loc 1 1521 0
 3553 01fe 7A68     		ldr	r2, [r7, #4]
 3554 0200 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 3555 0204 4FEA8202 		lsl	r2, r2, #2
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3556              		.loc 1 1520 0
 3557 0208 4FF00100 		mov	r0, #1
 3558 020c 00FA02F0 		lsl	r0, r0, r2
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
1523:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)1)) |\
 3559              		.loc 1 1523 0
 3560 0210 7A68     		ldr	r2, [r7, #4]
 3561 0212 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3562              		.loc 1 1522 0
 3563 0216 4FEA8202 		lsl	r2, r2, #2
 3564              		.loc 1 1523 0
 3565 021a 02F10102 		add	r2, r2, #1
1522:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)0x01 << (((uint32_t)4 * \
 3566              		.loc 1 1522 0
 3567 021e 4FF00104 		mov	r4, #1
 3568 0222 04FA02F2 		lsl	r2, r4, r2
1521:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       ((uint32_t)4 * (uint32_t)HandlePtr->SecondSlice)) |	\
 3569              		.loc 1 1521 0
 3570 0226 1043     		orrs	r0, r0, r2
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
1525:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 		    (uint32_t)HandlePtr->SecondSlice) + (uint32_t)2)));
 3571              		.loc 1 1525 0
 3572 0228 7A68     		ldr	r2, [r7, #4]
 3573 022a 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3574              		.loc 1 1524 0
 3575 022e 4FEA8202 		lsl	r2, r2, #2
 3576              		.loc 1 1525 0
 3577 0232 02F10202 		add	r2, r2, #2
1524:../Dave/Generated/src/PWMSP001/PWMSP001.c ****           (uint32_t)((uint32_t)0x01 << (((uint32_t)4 * \
 3578              		.loc 1 1524 0
 3579 0236 4FF00104 		mov	r4, #1
 3580 023a 04FA02F2 		lsl	r2, r4, r2
1520:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   HandlePtr->CC4yKernRegsPtr->GCSS |= (uint32_t)(((uint32_t)0x01 <<	\
 3581              		.loc 1 1520 0
 3582 023e 0243     		orrs	r2, r2, r0
 3583 0240 0A43     		orrs	r2, r2, r1
 3584 0242 1A61     		str	r2, [r3, #16]
1526:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3585              		.loc 1 1526 0
 3586 0244 07F10807 		add	r7, r7, #8
 3587 0248 BD46     		mov	sp, r7
 3588 024a 90BC     		pop	{r4, r7}
 3589 024c 7047     		bx	lr
 3590              		.cfi_endproc
 3591              	.LFE144:
 3593 024e 00BF     		.section	.text.PWMSP001_EnableEvent,"ax",%progbits
 3594              		.align	2
 3595              		.global	PWMSP001_EnableEvent
 3596              		.thumb
 3597              		.thumb_func
 3599              	PWMSP001_EnableEvent:
 3600              	.LFB145:
1527:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1528:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1529:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the enable event bit for the event given in the argument.
1530:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1531:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_EnableEvent
1532:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1533:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1534:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1535:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1536:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3601              		.loc 1 1536 0
 3602              		.cfi_startproc
 3603              		@ args = 0, pretend = 0, frame = 16
 3604              		@ frame_needed = 1, uses_anonymous_args = 0
 3605              		@ link register save eliminated.
 3606 0000 80B4     		push	{r7}
 3607              	.LCFI75:
 3608              		.cfi_def_cfa_offset 4
 3609              		.cfi_offset 7, -4
 3610 0002 85B0     		sub	sp, sp, #20
 3611              	.LCFI76:
 3612              		.cfi_def_cfa_offset 24
 3613 0004 00AF     		add	r7, sp, #0
 3614              	.LCFI77:
 3615              		.cfi_def_cfa_register 7
 3616 0006 7860     		str	r0, [r7, #4]
 3617 0008 0B46     		mov	r3, r1
 3618 000a FB70     		strb	r3, [r7, #3]
1537:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3619              		.loc 1 1537 0
 3620 000c 4FF00103 		mov	r3, #1
 3621 0010 FB60     		str	r3, [r7, #12]
1538:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1539:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3622              		.loc 1 1539 0
 3623 0012 7B68     		ldr	r3, [r7, #4]
 3624 0014 DB6B     		ldr	r3, [r3, #60]
 3625 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3626 0018 002B     		cmp	r3, #0
 3627 001a 03D1     		bne	.L144
1540:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1541:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3628              		.loc 1 1541 0
 3629 001c 4FF00103 		mov	r3, #1
 3630 0020 FB60     		str	r3, [r7, #12]
 3631 0022 24E0     		b	.L145
 3632              	.L144:
1542:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1543:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1544:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1545:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1546:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3633              		.loc 1 1546 0
 3634 0024 7B68     		ldr	r3, [r7, #4]
 3635 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3636 002a 012B     		cmp	r3, #1
 3637 002c 0ED1     		bne	.L146
1547:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1548:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3638              		.loc 1 1548 0
 3639 002e 7B68     		ldr	r3, [r7, #4]
 3640 0030 DB69     		ldr	r3, [r3, #28]
 3641 0032 7A68     		ldr	r2, [r7, #4]
 3642 0034 D269     		ldr	r2, [r2, #28]
 3643 0036 D2F8A410 		ldr	r1, [r2, #164]
 3644 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3645 003c 4FF00100 		mov	r0, #1
 3646 0040 00FA02F2 		lsl	r2, r0, r2
 3647 0044 0A43     		orrs	r2, r2, r1
 3648 0046 C3F8A420 		str	r2, [r3, #164]
 3649 004a 0DE0     		b	.L147
 3650              	.L146:
1549:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1550:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1551:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1552:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3651              		.loc 1 1552 0
 3652 004c 7B68     		ldr	r3, [r7, #4]
 3653 004e 9B69     		ldr	r3, [r3, #24]
 3654 0050 7A68     		ldr	r2, [r7, #4]
 3655 0052 9269     		ldr	r2, [r2, #24]
 3656 0054 D2F8A410 		ldr	r1, [r2, #164]
 3657 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3658 005a 4FF00100 		mov	r0, #1
 3659 005e 00FA02F2 		lsl	r2, r0, r2
 3660 0062 0A43     		orrs	r2, r2, r1
 3661 0064 C3F8A420 		str	r2, [r3, #164]
 3662              	.L147:
1553:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1554:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3663              		.loc 1 1554 0
 3664 0068 4FF00003 		mov	r3, #0
 3665 006c FB60     		str	r3, [r7, #12]
 3666              	.L145:
1555:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1556:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3667              		.loc 1 1556 0
 3668 006e FB68     		ldr	r3, [r7, #12]
1557:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3669              		.loc 1 1557 0
 3670 0070 1846     		mov	r0, r3
 3671 0072 07F11407 		add	r7, r7, #20
 3672 0076 BD46     		mov	sp, r7
 3673 0078 80BC     		pop	{r7}
 3674 007a 7047     		bx	lr
 3675              		.cfi_endproc
 3676              	.LFE145:
 3678              		.section	.text.PWMSP001_DisableEvent,"ax",%progbits
 3679              		.align	2
 3680              		.global	PWMSP001_DisableEvent
 3681              		.thumb
 3682              		.thumb_func
 3684              	PWMSP001_DisableEvent:
 3685              	.LFB146:
1558:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1559:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1560:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the enable event bit for the event given in the argument.
1561:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1562:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_DisableEvent
1563:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1564:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1565:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1566:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1567:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3686              		.loc 1 1567 0
 3687              		.cfi_startproc
 3688              		@ args = 0, pretend = 0, frame = 16
 3689              		@ frame_needed = 1, uses_anonymous_args = 0
 3690              		@ link register save eliminated.
 3691 0000 80B4     		push	{r7}
 3692              	.LCFI78:
 3693              		.cfi_def_cfa_offset 4
 3694              		.cfi_offset 7, -4
 3695 0002 85B0     		sub	sp, sp, #20
 3696              	.LCFI79:
 3697              		.cfi_def_cfa_offset 24
 3698 0004 00AF     		add	r7, sp, #0
 3699              	.LCFI80:
 3700              		.cfi_def_cfa_register 7
 3701 0006 7860     		str	r0, [r7, #4]
 3702 0008 0B46     		mov	r3, r1
 3703 000a FB70     		strb	r3, [r7, #3]
1568:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3704              		.loc 1 1568 0
 3705 000c 4FF00103 		mov	r3, #1
 3706 0010 FB60     		str	r3, [r7, #12]
1569:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1570:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3707              		.loc 1 1570 0
 3708 0012 7B68     		ldr	r3, [r7, #4]
 3709 0014 DB6B     		ldr	r3, [r3, #60]
 3710 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3711 0018 002B     		cmp	r3, #0
 3712 001a 03D1     		bne	.L150
1571:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1572:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3713              		.loc 1 1572 0
 3714 001c 4FF00103 		mov	r3, #1
 3715 0020 FB60     		str	r3, [r7, #12]
 3716 0022 28E0     		b	.L151
 3717              	.L150:
1573:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1574:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1575:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1576:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1577:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3718              		.loc 1 1577 0
 3719 0024 7B68     		ldr	r3, [r7, #4]
 3720 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3721 002a 012B     		cmp	r3, #1
 3722 002c 10D1     		bne	.L152
1578:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1579:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegs1Ptr->INTE,(uint8_t) Event);
 3723              		.loc 1 1579 0
 3724 002e 7B68     		ldr	r3, [r7, #4]
 3725 0030 DB69     		ldr	r3, [r3, #28]
 3726 0032 7A68     		ldr	r2, [r7, #4]
 3727 0034 D269     		ldr	r2, [r2, #28]
 3728 0036 D2F8A410 		ldr	r1, [r2, #164]
 3729 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3730 003c 4FF00100 		mov	r0, #1
 3731 0040 00FA02F2 		lsl	r2, r0, r2
 3732 0044 6FEA0202 		mvn	r2, r2
 3733 0048 0A40     		ands	r2, r2, r1
 3734 004a C3F8A420 		str	r2, [r3, #164]
 3735 004e 0FE0     		b	.L153
 3736              	.L152:
1580:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1581:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1582:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1583:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       CLR_BIT(HandlePtr->CC4yRegsPtr->INTE,(uint8_t) Event);
 3737              		.loc 1 1583 0
 3738 0050 7B68     		ldr	r3, [r7, #4]
 3739 0052 9B69     		ldr	r3, [r3, #24]
 3740 0054 7A68     		ldr	r2, [r7, #4]
 3741 0056 9269     		ldr	r2, [r2, #24]
 3742 0058 D2F8A410 		ldr	r1, [r2, #164]
 3743 005c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3744 005e 4FF00100 		mov	r0, #1
 3745 0062 00FA02F2 		lsl	r2, r0, r2
 3746 0066 6FEA0202 		mvn	r2, r2
 3747 006a 0A40     		ands	r2, r2, r1
 3748 006c C3F8A420 		str	r2, [r3, #164]
 3749              	.L153:
1584:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1585:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3750              		.loc 1 1585 0
 3751 0070 4FF00003 		mov	r3, #0
 3752 0074 FB60     		str	r3, [r7, #12]
 3753              	.L151:
1586:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1587:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3754              		.loc 1 1587 0
 3755 0076 FB68     		ldr	r3, [r7, #12]
1588:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3756              		.loc 1 1588 0
 3757 0078 1846     		mov	r0, r3
 3758 007a 07F11407 		add	r7, r7, #20
 3759 007e BD46     		mov	sp, r7
 3760 0080 80BC     		pop	{r7}
 3761 0082 7047     		bx	lr
 3762              		.cfi_endproc
 3763              	.LFE146:
 3765              		.section	.text.PWMSP001_ClearPendingEvent,"ax",%progbits
 3766              		.align	2
 3767              		.global	PWMSP001_ClearPendingEvent
 3768              		.thumb
 3769              		.thumb_func
 3771              	PWMSP001_ClearPendingEvent:
 3772              	.LFB147:
1589:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1590:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1591:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function clears the interrupt by software.
1592:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1593:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_ClearPendingEvent
1594:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1595:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1596:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1597:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1598:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3773              		.loc 1 1598 0
 3774              		.cfi_startproc
 3775              		@ args = 0, pretend = 0, frame = 16
 3776              		@ frame_needed = 1, uses_anonymous_args = 0
 3777              		@ link register save eliminated.
 3778 0000 80B4     		push	{r7}
 3779              	.LCFI81:
 3780              		.cfi_def_cfa_offset 4
 3781              		.cfi_offset 7, -4
 3782 0002 85B0     		sub	sp, sp, #20
 3783              	.LCFI82:
 3784              		.cfi_def_cfa_offset 24
 3785 0004 00AF     		add	r7, sp, #0
 3786              	.LCFI83:
 3787              		.cfi_def_cfa_register 7
 3788 0006 7860     		str	r0, [r7, #4]
 3789 0008 0B46     		mov	r3, r1
 3790 000a FB70     		strb	r3, [r7, #3]
1599:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3791              		.loc 1 1599 0
 3792 000c 4FF00103 		mov	r3, #1
 3793 0010 FB60     		str	r3, [r7, #12]
1600:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1601:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3794              		.loc 1 1601 0
 3795 0012 7B68     		ldr	r3, [r7, #4]
 3796 0014 DB6B     		ldr	r3, [r3, #60]
 3797 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3798 0018 002B     		cmp	r3, #0
 3799 001a 03D1     		bne	.L156
1602:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1603:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3800              		.loc 1 1603 0
 3801 001c 4FF00103 		mov	r3, #1
 3802 0020 FB60     		str	r3, [r7, #12]
 3803 0022 24E0     		b	.L157
 3804              	.L156:
1604:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1605:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1606:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1607:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1608:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3805              		.loc 1 1608 0
 3806 0024 7B68     		ldr	r3, [r7, #4]
 3807 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3808 002a 012B     		cmp	r3, #1
 3809 002c 0ED1     		bne	.L158
1609:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1610:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWR,(uint8_t) Event);
 3810              		.loc 1 1610 0
 3811 002e 7B68     		ldr	r3, [r7, #4]
 3812 0030 DB69     		ldr	r3, [r3, #28]
 3813 0032 7A68     		ldr	r2, [r7, #4]
 3814 0034 D269     		ldr	r2, [r2, #28]
 3815 0036 D2F8B010 		ldr	r1, [r2, #176]
 3816 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3817 003c 4FF00100 		mov	r0, #1
 3818 0040 00FA02F2 		lsl	r2, r0, r2
 3819 0044 0A43     		orrs	r2, r2, r1
 3820 0046 C3F8B020 		str	r2, [r3, #176]
 3821 004a 0DE0     		b	.L159
 3822              	.L158:
1611:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1612:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1613:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1614:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWR, (uint8_t)Event);
 3823              		.loc 1 1614 0
 3824 004c 7B68     		ldr	r3, [r7, #4]
 3825 004e 9B69     		ldr	r3, [r3, #24]
 3826 0050 7A68     		ldr	r2, [r7, #4]
 3827 0052 9269     		ldr	r2, [r2, #24]
 3828 0054 D2F8B010 		ldr	r1, [r2, #176]
 3829 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3830 005a 4FF00100 		mov	r0, #1
 3831 005e 00FA02F2 		lsl	r2, r0, r2
 3832 0062 0A43     		orrs	r2, r2, r1
 3833 0064 C3F8B020 		str	r2, [r3, #176]
 3834              	.L159:
1615:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1616:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3835              		.loc 1 1616 0
 3836 0068 4FF00003 		mov	r3, #0
 3837 006c FB60     		str	r3, [r7, #12]
 3838              	.L157:
1617:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1618:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3839              		.loc 1 1618 0
 3840 006e FB68     		ldr	r3, [r7, #12]
1619:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3841              		.loc 1 1619 0
 3842 0070 1846     		mov	r0, r3
 3843 0072 07F11407 		add	r7, r7, #20
 3844 0076 BD46     		mov	sp, r7
 3845 0078 80BC     		pop	{r7}
 3846 007a 7047     		bx	lr
 3847              		.cfi_endproc
 3848              	.LFE147:
 3850              		.section	.text.PWMSP001_SetPendingEvent,"ax",%progbits
 3851              		.align	2
 3852              		.global	PWMSP001_SetPendingEvent
 3853              		.thumb
 3854              		.thumb_func
 3856              	PWMSP001_SetPendingEvent:
 3857              	.LFB148:
1620:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1621:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1622:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function sets the interrupt by software Interrupt pulse is generated
1623:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * if source is enabled.
1624:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1625:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_SetPendingEvent
1626:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1627:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1628:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event
1629:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1630:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3858              		.loc 1 1630 0
 3859              		.cfi_startproc
 3860              		@ args = 0, pretend = 0, frame = 16
 3861              		@ frame_needed = 1, uses_anonymous_args = 0
 3862              		@ link register save eliminated.
 3863 0000 80B4     		push	{r7}
 3864              	.LCFI84:
 3865              		.cfi_def_cfa_offset 4
 3866              		.cfi_offset 7, -4
 3867 0002 85B0     		sub	sp, sp, #20
 3868              	.LCFI85:
 3869              		.cfi_def_cfa_offset 24
 3870 0004 00AF     		add	r7, sp, #0
 3871              	.LCFI86:
 3872              		.cfi_def_cfa_register 7
 3873 0006 7860     		str	r0, [r7, #4]
 3874 0008 0B46     		mov	r3, r1
 3875 000a FB70     		strb	r3, [r7, #3]
1631:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3876              		.loc 1 1631 0
 3877 000c 4FF00103 		mov	r3, #1
 3878 0010 FB60     		str	r3, [r7, #12]
1632:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1633:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3879              		.loc 1 1633 0
 3880 0012 7B68     		ldr	r3, [r7, #4]
 3881 0014 DB6B     		ldr	r3, [r3, #60]
 3882 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3883 0018 002B     		cmp	r3, #0
 3884 001a 03D1     		bne	.L162
1634:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1635:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3885              		.loc 1 1635 0
 3886 001c 4FF00103 		mov	r3, #1
 3887 0020 FB60     		str	r3, [r7, #12]
 3888 0022 24E0     		b	.L163
 3889              	.L162:
1636:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1637:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1638:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1639:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1640:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3890              		.loc 1 1640 0
 3891 0024 7B68     		ldr	r3, [r7, #4]
 3892 0026 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3893 002a 012B     		cmp	r3, #1
 3894 002c 0ED1     		bne	.L164
1641:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1642:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegs1Ptr->SWS,(uint8_t)Event);
 3895              		.loc 1 1642 0
 3896 002e 7B68     		ldr	r3, [r7, #4]
 3897 0030 DB69     		ldr	r3, [r3, #28]
 3898 0032 7A68     		ldr	r2, [r7, #4]
 3899 0034 D269     		ldr	r2, [r2, #28]
 3900 0036 D2F8AC10 		ldr	r1, [r2, #172]
 3901 003a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3902 003c 4FF00100 		mov	r0, #1
 3903 0040 00FA02F2 		lsl	r2, r0, r2
 3904 0044 0A43     		orrs	r2, r2, r1
 3905 0046 C3F8AC20 		str	r2, [r3, #172]
 3906 004a 0DE0     		b	.L165
 3907              	.L164:
1643:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1644:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1645:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1646:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       SET_BIT(HandlePtr->CC4yRegsPtr->SWS, (uint8_t)Event);
 3908              		.loc 1 1646 0
 3909 004c 7B68     		ldr	r3, [r7, #4]
 3910 004e 9B69     		ldr	r3, [r3, #24]
 3911 0050 7A68     		ldr	r2, [r7, #4]
 3912 0052 9269     		ldr	r2, [r2, #24]
 3913 0054 D2F8AC10 		ldr	r1, [r2, #172]
 3914 0058 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 3915 005a 4FF00100 		mov	r0, #1
 3916 005e 00FA02F2 		lsl	r2, r0, r2
 3917 0062 0A43     		orrs	r2, r2, r1
 3918 0064 C3F8AC20 		str	r2, [r3, #172]
 3919              	.L165:
1647:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1648:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 3920              		.loc 1 1648 0
 3921 0068 4FF00003 		mov	r3, #0
 3922 006c FB60     		str	r3, [r7, #12]
 3923              	.L163:
1649:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1650:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 3924              		.loc 1 1650 0
 3925 006e FB68     		ldr	r3, [r7, #12]
1651:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 3926              		.loc 1 1651 0
 3927 0070 1846     		mov	r0, r3
 3928 0072 07F11407 		add	r7, r7, #20
 3929 0076 BD46     		mov	sp, r7
 3930 0078 80BC     		pop	{r7}
 3931 007a 7047     		bx	lr
 3932              		.cfi_endproc
 3933              	.LFE148:
 3935              		.section	.text.PWMSP001_GetPendingEvent,"ax",%progbits
 3936              		.align	2
 3937              		.global	PWMSP001_GetPendingEvent
 3938              		.thumb
 3939              		.thumb_func
 3941              	PWMSP001_GetPendingEvent:
 3942              	.LFB149:
1652:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1653:../Dave/Generated/src/PWMSP001/PWMSP001.c **** /**
1654:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  * This function check whether given interrupt is set
1655:../Dave/Generated/src/PWMSP001/PWMSP001.c ****  */
1656:../Dave/Generated/src/PWMSP001/PWMSP001.c **** status_t PWMSP001_GetPendingEvent
1657:../Dave/Generated/src/PWMSP001/PWMSP001.c **** (
1658:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_HandleType * HandlePtr,
1659:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     const PWMSP001_EventNameType Event,
1660:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     uint8_t*EvtStatus
1661:../Dave/Generated/src/PWMSP001/PWMSP001.c **** )
1662:../Dave/Generated/src/PWMSP001/PWMSP001.c **** {
 3943              		.loc 1 1662 0
 3944              		.cfi_startproc
 3945              		@ args = 0, pretend = 0, frame = 24
 3946              		@ frame_needed = 1, uses_anonymous_args = 0
 3947              		@ link register save eliminated.
 3948 0000 80B4     		push	{r7}
 3949              	.LCFI87:
 3950              		.cfi_def_cfa_offset 4
 3951              		.cfi_offset 7, -4
 3952 0002 87B0     		sub	sp, sp, #28
 3953              	.LCFI88:
 3954              		.cfi_def_cfa_offset 32
 3955 0004 00AF     		add	r7, sp, #0
 3956              	.LCFI89:
 3957              		.cfi_def_cfa_register 7
 3958 0006 F860     		str	r0, [r7, #12]
 3959 0008 0B46     		mov	r3, r1
 3960 000a 7A60     		str	r2, [r7, #4]
 3961 000c FB72     		strb	r3, [r7, #11]
1663:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   status_t Status = (uint32_t)PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3962              		.loc 1 1663 0
 3963 000e 4FF00103 		mov	r3, #1
 3964 0012 7B61     		str	r3, [r7, #20]
1664:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1665:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   if (HandlePtr->DynamicDataType->StateType == PWMSP001_UNINITIALIZED)
 3965              		.loc 1 1665 0
 3966 0014 FB68     		ldr	r3, [r7, #12]
 3967 0016 DB6B     		ldr	r3, [r3, #60]
 3968 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3969 001a 002B     		cmp	r3, #0
 3970 001c 03D1     		bne	.L168
1666:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1667:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status =(uint32_t) PWMSP001_OPER_NOT_ALLOWED_ERROR;
 3971              		.loc 1 1667 0
 3972 001e 4FF00103 		mov	r3, #1
 3973 0022 7B61     		str	r3, [r7, #20]
 3974 0024 38E0     		b	.L169
 3975              	.L168:
1668:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     DBG002_INFO(APP_GID, DBG002_MESSAGEID_LITERAL, PWMSP001_STATUS_LEN, &Status);
1669:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1670:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   else
1671:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   {
1672:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     if(HandlePtr->kTimerConcatenation == (uint8_t)SET)
 3976              		.loc 1 1672 0
 3977 0026 FB68     		ldr	r3, [r7, #12]
 3978 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3979 002c 012B     		cmp	r3, #1
 3980 002e 18D1     		bne	.L170
1673:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1674:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 
1675:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegs1Ptr->INTS, ((uint32_t)0x01 <<(uint32_t)Event), (uint32_t)Event)
 3981              		.loc 1 1675 0
 3982 0030 FB68     		ldr	r3, [r7, #12]
 3983 0032 DB69     		ldr	r3, [r3, #28]
 3984 0034 D3F8A020 		ldr	r2, [r3, #160]
 3985 0038 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3986 003a 4FF00101 		mov	r1, #1
 3987 003e 01FA03F3 		lsl	r3, r1, r3
 3988 0042 1A40     		ands	r2, r2, r3
 3989 0044 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3990 0046 22FA03F3 		lsr	r3, r2, r3
 3991 004a 002B     		cmp	r3, #0
 3992 004c 04D0     		beq	.L171
1676:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1677:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)SET;
 3993              		.loc 1 1677 0
 3994 004e 7B68     		ldr	r3, [r7, #4]
 3995 0050 4FF00102 		mov	r2, #1
 3996 0054 1A70     		strb	r2, [r3, #0]
 3997 0056 1CE0     		b	.L172
 3998              	.L171:
1678:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1679:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  else
1680:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  {
1681:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	      *EvtStatus = (uint8_t)RESET;
 3999              		.loc 1 1681 0
 4000 0058 7B68     		ldr	r3, [r7, #4]
 4001 005a 4FF00002 		mov	r2, #0
 4002 005e 1A70     		strb	r2, [r3, #0]
 4003 0060 17E0     		b	.L172
 4004              	.L170:
1682:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	  }
1683:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1684:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     else
1685:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     {
1686:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       if(RD_REG(HandlePtr->CC4yRegsPtr->INTS, ((uint32_t)0x01 << (uint32_t)Event),(uint32_t)Event))
 4005              		.loc 1 1686 0
 4006 0062 FB68     		ldr	r3, [r7, #12]
 4007 0064 9B69     		ldr	r3, [r3, #24]
 4008 0066 D3F8A020 		ldr	r2, [r3, #160]
 4009 006a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4010 006c 4FF00101 		mov	r1, #1
 4011 0070 01FA03F3 		lsl	r3, r1, r3
 4012 0074 1A40     		ands	r2, r2, r3
 4013 0076 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 4014 0078 22FA03F3 		lsr	r3, r2, r3
 4015 007c 002B     		cmp	r3, #0
 4016 007e 04D0     		beq	.L173
1687:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1688:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)SET;
 4017              		.loc 1 1688 0
 4018 0080 7B68     		ldr	r3, [r7, #4]
 4019 0082 4FF00102 		mov	r2, #1
 4020 0086 1A70     		strb	r2, [r3, #0]
 4021 0088 03E0     		b	.L172
 4022              	.L173:
1689:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1690:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       else
1691:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       {
1692:../Dave/Generated/src/PWMSP001/PWMSP001.c ****         *EvtStatus = (uint8_t)RESET;
 4023              		.loc 1 1692 0
 4024 008a 7B68     		ldr	r3, [r7, #4]
 4025 008c 4FF00002 		mov	r2, #0
 4026 0090 1A70     		strb	r2, [r3, #0]
 4027              	.L172:
1693:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       }
1694:../Dave/Generated/src/PWMSP001/PWMSP001.c ****       /* *EvtStatus = RD_REG(HandlePtr->CC4yRegsPtr->INTS, (0x01 << (uint8_t)Event),(uint8_t) Event
1695:../Dave/Generated/src/PWMSP001/PWMSP001.c **** 	   ? (uint8_t)SET : (uint8_t)RESET;	*/
1696:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     }
1697:../Dave/Generated/src/PWMSP001/PWMSP001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 4028              		.loc 1 1697 0
 4029 0092 4FF00003 		mov	r3, #0
 4030 0096 7B61     		str	r3, [r7, #20]
 4031              	.L169:
1698:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   }
1699:../Dave/Generated/src/PWMSP001/PWMSP001.c ****   return (Status);
 4032              		.loc 1 1699 0
 4033 0098 7B69     		ldr	r3, [r7, #20]
1700:../Dave/Generated/src/PWMSP001/PWMSP001.c **** }
 4034              		.loc 1 1700 0
 4035 009a 1846     		mov	r0, r3
 4036 009c 07F11C07 		add	r7, r7, #28
 4037 00a0 BD46     		mov	sp, r7
 4038 00a2 80BC     		pop	{r7}
 4039 00a4 7047     		bx	lr
 4040              		.cfi_endproc
 4041              	.LFE149:
 4043 00a6 00BF     		.text
 4044              	.Letext0:
 4045              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 4046              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 4047              		.file 4 "E:\\GitHub\\Flying-PCB\\Software\\LARIX Flightcontroller\\CORE_Larix_V1.0\\Dave\\Generate
 4048              		.file 5 "E:\\GitHub\\Flying-PCB\\Software\\LARIX Flightcontroller\\CORE_Larix_V1.0\\Dave\\Generate
 4049              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 4050              		.file 7 "E:\\GitHub\\Flying-PCB\\Software\\LARIX Flightcontroller\\CORE_Larix_V1.0\\Dave\\Generate
DEFINED SYMBOLS
                            *ABS*:00000000 PWMSP001.c
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:20     .text.PWMSP001_Init:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:25     .text.PWMSP001_Init:00000000 PWMSP001_Init
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:316    .text.PWMSP001_lInit:00000000 PWMSP001_lInit
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:926    .text.PWMSP001_Start:00000000 PWMSP001_Start
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:311    .text.PWMSP001_lInit:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3288   .text.PWMSP001_lConfigureSecondSlice:00000000 PWMSP001_lConfigureSecondSlice
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:709    .text.PWMSP001_Deinit:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:714    .text.PWMSP001_Deinit:00000000 PWMSP001_Deinit
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:921    .text.PWMSP001_Start:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1153   .text.PWMSP001_Stop:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1158   .text.PWMSP001_Stop:00000000 PWMSP001_Stop
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1267   .text.PWMSP001_SetCompare:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1272   .text.PWMSP001_SetCompare:00000000 PWMSP001_SetCompare
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1371   .text.PWMSP001_lSetCompareEdgeAlign:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1376   .text.PWMSP001_lSetCompareEdgeAlign:00000000 PWMSP001_lSetCompareEdgeAlign
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1433   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1438   .text.PWMSP001_lSetCompareEdgeAlignTimerConcat:00000000 PWMSP001_lSetCompareEdgeAlignTimerConcat
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1536   .text.PWMSP001_lSetCompareCenterAlign:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1541   .text.PWMSP001_lSetCompareCenterAlign:00000000 PWMSP001_lSetCompareCenterAlign
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1595   .text.PWMSP001_SetDutyCycle:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1600   .text.PWMSP001_SetDutyCycle:00000000 PWMSP001_SetDutyCycle
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1665   .text.PWMSP001_SetDutyCycle:00000060 $d
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1670   .text.PWMSP001_lSetDutyEdgeAlign:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1675   .text.PWMSP001_lSetDutyEdgeAlign:00000000 PWMSP001_lSetDutyEdgeAlign
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1755   .text.PWMSP001_lSetDutyEdgeAlign:00000098 $d
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1760   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1765   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000000 PWMSP001_lSetDutyEdgeAlignTimerConcat
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1906   .text.PWMSP001_lSetDutyEdgeAlignTimerConcat:00000124 $d
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1911   .text.PWMSP001_lSetDutyCenterAlign:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1916   .text.PWMSP001_lSetDutyCenterAlign:00000000 PWMSP001_lSetDutyCenterAlign
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1994   .text.PWMSP001_lSetDutyCenterAlign:00000094 $d
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:1999   .text.PWMSP001_SetPeriodAndCompare:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2004   .text.PWMSP001_SetPeriodAndCompare:00000000 PWMSP001_SetPeriodAndCompare
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2118   .text.PWMSP001_SetPeriod:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2123   .text.PWMSP001_SetPeriod:00000000 PWMSP001_SetPeriod
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2256   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2261   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000000 PWMSP001_SetPwmFreqAndDutyCycle
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2594   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 PWMSP001_lSetPwmFreqTimerConcat
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2412   .text.PWMSP001_SetPwmFreqAndDutyCycle:00000110 $d
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2418   .text.PWMSP001_SetPwmFreq:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2423   .text.PWMSP001_SetPwmFreq:00000000 PWMSP001_SetPwmFreq
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2584   .text.PWMSP001_SetPwmFreq:00000128 $d
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2589   .text.PWMSP001_lSetPwmFreqTimerConcat:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2712   .text.PWMSP001_SetTimerVal:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2717   .text.PWMSP001_SetTimerVal:00000000 PWMSP001_SetTimerVal
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2788   .text.PWMSP001_GetTimerStatus:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2793   .text.PWMSP001_GetTimerStatus:00000000 PWMSP001_GetTimerStatus
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2870   .text.PWMSP001_GetTimerRegsVal:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:2875   .text.PWMSP001_GetTimerRegsVal:00000000 PWMSP001_GetTimerRegsVal
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3016   .text.PWMSP001_GetPeriodReg:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3021   .text.PWMSP001_GetPeriodReg:00000000 PWMSP001_GetPeriodReg
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3104   .text.PWMSP001_SWRequestShadowTransfer:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3109   .text.PWMSP001_SWRequestShadowTransfer:00000000 PWMSP001_SWRequestShadowTransfer
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3202   .text.PWMSP001_ResetTrapFlag:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3207   .text.PWMSP001_ResetTrapFlag:00000000 PWMSP001_ResetTrapFlag
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3283   .text.PWMSP001_lConfigureSecondSlice:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3594   .text.PWMSP001_EnableEvent:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3599   .text.PWMSP001_EnableEvent:00000000 PWMSP001_EnableEvent
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3679   .text.PWMSP001_DisableEvent:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3684   .text.PWMSP001_DisableEvent:00000000 PWMSP001_DisableEvent
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3766   .text.PWMSP001_ClearPendingEvent:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3771   .text.PWMSP001_ClearPendingEvent:00000000 PWMSP001_ClearPendingEvent
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3851   .text.PWMSP001_SetPendingEvent:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3856   .text.PWMSP001_SetPendingEvent:00000000 PWMSP001_SetPendingEvent
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3936   .text.PWMSP001_GetPendingEvent:00000000 $t
C:\Users\Mya\AppData\Local\Temp\ccd24CsC.s:3941   .text.PWMSP001_GetPendingEvent:00000000 PWMSP001_GetPendingEvent
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.84cfd71c6d2dc0bd4021712beaa9efd8
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.60.e75c47576398c648cdcf9000ace5e3d8
                           .group:00000000 wm4.MULTIPLEXER.h.46.4a863fbae1c79f0db26da3ce2dc30d02
                           .group:00000000 wm4.CCU8PWMLIB.h.74.725ec81203769525cc7a424597055f47
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.uc_id.h.35.fa57ecd9f559d2767f56c96da2848c12
                           .group:00000000 wm4.CLK001_Const.h.50.e5e9c2ddc89f4cc9e7b93e9648fa94e4
                           .group:00000000 wm4.CLK001_Conf.h.81.851ac7a1268528f4d6739384c2f248a5
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.RTC001.h.113.715d6fcab1863c6656b238bddd304166
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.reent.h.11.a39e4126dcf3c6afd3054e0622577bae
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.LMM001.h.45.fa2df8bae969f45df5071221ac433ffa
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.104.05371e300b30617373255b3cdb4765a2
                           .group:00000000 wm4.SYSTM001.h.64.6ecb31c49bc3e7691644fdcdfc11b5cd
                           .group:00000000 wm4.stdarg.h.31.fa591a4b1df9e413e9f5b8097f9ae89d
                           .group:00000000 wm4.Type_CM.h.61.3660c940695d7d5fef91de9c4081d0f0
                           .group:00000000 wm4.dwc_os.h.82.db2ca40c41e2f648d146b8942e5157d9
                           .group:00000000 wm4.dwc_otg_core_if.h.95.37e41eee47e9a4502e4044edf60ea92d
                           .group:00000000 wm4.usbcore001_device.h.107.6c032c9c28ac6c3f4e5e24a068720cd7
                           .group:00000000 wm4.USB.h.399.44a2bec94122294f06c4d854450494d3
                           .group:00000000 wm4.Common.h.102.bc881ac788d1d7ce84e651cbaa40f2c2
                           .group:00000000 wm4.Common.h.134.5069b632a0407201156f18fde915b80c
                           .group:00000000 wm4.USBMode.h.234.0cc9e23131c025605bb7c0db3ebb8ac9
                           .group:00000000 wm4.StdRequestType.h.93.4e19c7c655f990c2abedbb76a546fcde
                           .group:00000000 wm4.Endpoint.h.116.4ef46b127c9047ed49fe1e0df19e09b8
                           .group:00000000 wm4.StdDescriptors.h.120.0ce817e16dcc91b8cf4a79ba0e0e19b6
                           .group:00000000 wm4.CDC.h.103.7ce3e4692dde29e827f8736493eef7ef
                           .group:00000000 wm4.CDC.h.115.c83a7d6c5b6c8644b3dec6212d4ced09
                           .group:00000000 wm4.Descriptors.h.91.5cf84c2489ee54d154cabfe9e14b5c19
                           .group:00000000 wm4.Usic.h.54.8af9f733ba5771eeb374435d205ea54b
                           .group:00000000 wm4.UART001_Conf.h.53.fce01a2aa073e958cae0b1cc894db26c
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.CCU4Global_Conf.h.63.10a5fc586e1563647b9633c45b1b739e
                           .group:00000000 wm4.PWMSP001.h.57.29b732b86baf3e81f49153f5f495912e
                           .group:00000000 wm4.NVIC002_Conf.h.63.85c8666caca8bd9e6c27dcbc8efe5043
                           .group:00000000 wm4.I2C001.h.97.5277d52889d6c741e048ea45ee1277b5
                           .group:00000000 wm4.I2C001_Conf.h.58.2b816ac2c964c55a6c88f9c406d78c9f
                           .group:00000000 wm4.ERU001_Conf.h.69.61c28b1ac8f55fb79ee064524d8b6415
                           .group:00000000 wm4.ERU002_Conf.h.49.449ecc05b9e62e9b43f2dc6ead06a5ce
                           .group:00000000 wm4.IO002_Conf.h.51.87e2c8c60b647393fe9ced2cae198f63
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d
                           .group:00000000 wm4.IO004.h.53.442ea5eb47ad9eedc675253aa35f3107

UNDEFINED SYMBOLS
CCU4GLOBAL_Init
PWMSP001_Handle0
PWMSP001_Handle1
PWMSP001_Handle2
PWMSP001_Handle3
PWMSP001_Handle4
